// Generated by Molecule 0.4.2

use super::blockchain::*;
use molecule::prelude::*;
#[derive(Clone)]
pub struct Byte20(molecule::bytes::Bytes);
impl ::std::fmt::LowerHex for Byte20 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        use molecule::faster_hex::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()).unwrap())
    }
}
impl ::std::fmt::Debug for Byte20 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::std::fmt::Display for Byte20 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        use molecule::faster_hex::hex_string;
        let raw_data = hex_string(&self.raw_data()).unwrap();
        write!(f, "{}(0x{})", Self::NAME, raw_data)
    }
}
impl ::std::default::Default for Byte20 {
    fn default() -> Self {
        let v: Vec<u8> = vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
        Byte20::new_unchecked(v.into())
    }
}
impl Byte20 {
    pub const TOTAL_SIZE: usize = 20;
    pub const ITEM_SIZE: usize = 1;
    pub const ITEM_COUNT: usize = 20;
    pub fn nth0(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(0, 1))
    }
    pub fn nth1(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(1, 2))
    }
    pub fn nth2(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(2, 3))
    }
    pub fn nth3(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(3, 4))
    }
    pub fn nth4(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(4, 5))
    }
    pub fn nth5(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(5, 6))
    }
    pub fn nth6(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(6, 7))
    }
    pub fn nth7(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(7, 8))
    }
    pub fn nth8(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(8, 9))
    }
    pub fn nth9(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(9, 10))
    }
    pub fn nth10(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(10, 11))
    }
    pub fn nth11(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(11, 12))
    }
    pub fn nth12(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(12, 13))
    }
    pub fn nth13(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(13, 14))
    }
    pub fn nth14(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(14, 15))
    }
    pub fn nth15(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(15, 16))
    }
    pub fn nth16(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(16, 17))
    }
    pub fn nth17(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(17, 18))
    }
    pub fn nth18(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(18, 19))
    }
    pub fn nth19(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(19, 20))
    }
    pub fn raw_data(&self) -> molecule::bytes::Bytes {
        self.as_bytes()
    }
    pub fn as_reader<'r>(&'r self) -> Byte20Reader<'r> {
        Byte20Reader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for Byte20 {
    type Builder = Byte20Builder;
    const NAME: &'static str = "Byte20";
    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        Byte20(data)
    }
    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }
    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }
    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        Byte20Reader::from_slice(slice).map(|reader| reader.to_entity())
    }
    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        Byte20Reader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }
    fn new_builder() -> Self::Builder {
        ::std::default::Default::default()
    }
    fn as_builder(self) -> Self::Builder {
        Self::new_builder().set([
            self.nth0(),
            self.nth1(),
            self.nth2(),
            self.nth3(),
            self.nth4(),
            self.nth5(),
            self.nth6(),
            self.nth7(),
            self.nth8(),
            self.nth9(),
            self.nth10(),
            self.nth11(),
            self.nth12(),
            self.nth13(),
            self.nth14(),
            self.nth15(),
            self.nth16(),
            self.nth17(),
            self.nth18(),
            self.nth19(),
        ])
    }
}
#[derive(Clone, Copy)]
pub struct Byte20Reader<'r>(&'r [u8]);
impl<'r> ::std::fmt::LowerHex for Byte20Reader<'r> {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        use molecule::faster_hex::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()).unwrap())
    }
}
impl<'r> ::std::fmt::Debug for Byte20Reader<'r> {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::std::fmt::Display for Byte20Reader<'r> {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        use molecule::faster_hex::hex_string;
        let raw_data = hex_string(&self.raw_data()).unwrap();
        write!(f, "{}(0x{})", Self::NAME, raw_data)
    }
}
impl<'r> Byte20Reader<'r> {
    pub const TOTAL_SIZE: usize = 20;
    pub const ITEM_SIZE: usize = 1;
    pub const ITEM_COUNT: usize = 20;
    pub fn nth0(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[0..1])
    }
    pub fn nth1(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[1..2])
    }
    pub fn nth2(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[2..3])
    }
    pub fn nth3(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[3..4])
    }
    pub fn nth4(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[4..5])
    }
    pub fn nth5(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[5..6])
    }
    pub fn nth6(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[6..7])
    }
    pub fn nth7(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[7..8])
    }
    pub fn nth8(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[8..9])
    }
    pub fn nth9(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[9..10])
    }
    pub fn nth10(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[10..11])
    }
    pub fn nth11(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[11..12])
    }
    pub fn nth12(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[12..13])
    }
    pub fn nth13(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[13..14])
    }
    pub fn nth14(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[14..15])
    }
    pub fn nth15(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[15..16])
    }
    pub fn nth16(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[16..17])
    }
    pub fn nth17(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[17..18])
    }
    pub fn nth18(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[18..19])
    }
    pub fn nth19(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[19..20])
    }
    pub fn raw_data(&self) -> &'r [u8] {
        self.as_slice()
    }
}
impl<'r> molecule::prelude::Reader<'r> for Byte20Reader<'r> {
    type Entity = Byte20;
    const NAME: &'static str = "Byte20Reader";
    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().into())
    }
    fn new_unchecked(slice: &'r [u8]) -> Self {
        Byte20Reader(slice)
    }
    fn as_slice(&self) -> &'r [u8] {
        self.0
    }
    fn verify(slice: &[u8], _compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len != Self::TOTAL_SIZE {
            return ve!(Self, TotalSizeNotMatch, Self::TOTAL_SIZE, slice_len);
        }
        Ok(())
    }
}
pub struct Byte20Builder(pub(crate) [Byte; 20]);
impl ::std::fmt::Debug for Byte20Builder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "{}({:?})", Self::NAME, &self.0[..])
    }
}
impl ::std::default::Default for Byte20Builder {
    fn default() -> Self {
        Byte20Builder([
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
        ])
    }
}
impl Byte20Builder {
    pub const TOTAL_SIZE: usize = 20;
    pub const ITEM_SIZE: usize = 1;
    pub const ITEM_COUNT: usize = 20;
    pub fn set(mut self, v: [Byte; 20]) -> Self {
        self.0 = v;
        self
    }
    pub fn nth0(mut self, v: Byte) -> Self {
        self.0[0] = v;
        self
    }
    pub fn nth1(mut self, v: Byte) -> Self {
        self.0[1] = v;
        self
    }
    pub fn nth2(mut self, v: Byte) -> Self {
        self.0[2] = v;
        self
    }
    pub fn nth3(mut self, v: Byte) -> Self {
        self.0[3] = v;
        self
    }
    pub fn nth4(mut self, v: Byte) -> Self {
        self.0[4] = v;
        self
    }
    pub fn nth5(mut self, v: Byte) -> Self {
        self.0[5] = v;
        self
    }
    pub fn nth6(mut self, v: Byte) -> Self {
        self.0[6] = v;
        self
    }
    pub fn nth7(mut self, v: Byte) -> Self {
        self.0[7] = v;
        self
    }
    pub fn nth8(mut self, v: Byte) -> Self {
        self.0[8] = v;
        self
    }
    pub fn nth9(mut self, v: Byte) -> Self {
        self.0[9] = v;
        self
    }
    pub fn nth10(mut self, v: Byte) -> Self {
        self.0[10] = v;
        self
    }
    pub fn nth11(mut self, v: Byte) -> Self {
        self.0[11] = v;
        self
    }
    pub fn nth12(mut self, v: Byte) -> Self {
        self.0[12] = v;
        self
    }
    pub fn nth13(mut self, v: Byte) -> Self {
        self.0[13] = v;
        self
    }
    pub fn nth14(mut self, v: Byte) -> Self {
        self.0[14] = v;
        self
    }
    pub fn nth15(mut self, v: Byte) -> Self {
        self.0[15] = v;
        self
    }
    pub fn nth16(mut self, v: Byte) -> Self {
        self.0[16] = v;
        self
    }
    pub fn nth17(mut self, v: Byte) -> Self {
        self.0[17] = v;
        self
    }
    pub fn nth18(mut self, v: Byte) -> Self {
        self.0[18] = v;
        self
    }
    pub fn nth19(mut self, v: Byte) -> Self {
        self.0[19] = v;
        self
    }
}
impl molecule::prelude::Builder for Byte20Builder {
    type Entity = Byte20;
    const NAME: &'static str = "Byte20Builder";
    fn expected_length(&self) -> usize {
        Self::TOTAL_SIZE
    }
    fn write<W: ::std::io::Write>(&self, writer: &mut W) -> ::std::io::Result<()> {
        writer.write_all(self.0[0].as_slice())?;
        writer.write_all(self.0[1].as_slice())?;
        writer.write_all(self.0[2].as_slice())?;
        writer.write_all(self.0[3].as_slice())?;
        writer.write_all(self.0[4].as_slice())?;
        writer.write_all(self.0[5].as_slice())?;
        writer.write_all(self.0[6].as_slice())?;
        writer.write_all(self.0[7].as_slice())?;
        writer.write_all(self.0[8].as_slice())?;
        writer.write_all(self.0[9].as_slice())?;
        writer.write_all(self.0[10].as_slice())?;
        writer.write_all(self.0[11].as_slice())?;
        writer.write_all(self.0[12].as_slice())?;
        writer.write_all(self.0[13].as_slice())?;
        writer.write_all(self.0[14].as_slice())?;
        writer.write_all(self.0[15].as_slice())?;
        writer.write_all(self.0[16].as_slice())?;
        writer.write_all(self.0[17].as_slice())?;
        writer.write_all(self.0[18].as_slice())?;
        writer.write_all(self.0[19].as_slice())?;
        Ok(())
    }
    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        Byte20::new_unchecked(inner.into())
    }
}
#[derive(Clone)]
pub struct GlobalState(molecule::bytes::Bytes);
impl ::std::fmt::LowerHex for GlobalState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        use molecule::faster_hex::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()).unwrap())
    }
}
impl ::std::fmt::Debug for GlobalState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::std::fmt::Display for GlobalState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "address_root", self.address_root())?;
        write!(f, " }}")
    }
}
impl ::std::default::Default for GlobalState {
    fn default() -> Self {
        let v: Vec<u8> = vec![
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ];
        GlobalState::new_unchecked(v.into())
    }
}
impl GlobalState {
    pub const TOTAL_SIZE: usize = 32;
    pub const FIELD_SIZE: [usize; 1] = [32];
    pub const FIELD_COUNT: usize = 1;
    pub fn address_root(&self) -> Byte32 {
        Byte32::new_unchecked(self.0.slice(0, 32))
    }
    pub fn as_reader<'r>(&'r self) -> GlobalStateReader<'r> {
        GlobalStateReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for GlobalState {
    type Builder = GlobalStateBuilder;
    const NAME: &'static str = "GlobalState";
    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        GlobalState(data)
    }
    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }
    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }
    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        GlobalStateReader::from_slice(slice).map(|reader| reader.to_entity())
    }
    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        GlobalStateReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }
    fn new_builder() -> Self::Builder {
        ::std::default::Default::default()
    }
    fn as_builder(self) -> Self::Builder {
        Self::new_builder().address_root(self.address_root())
    }
}
#[derive(Clone, Copy)]
pub struct GlobalStateReader<'r>(&'r [u8]);
impl<'r> ::std::fmt::LowerHex for GlobalStateReader<'r> {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        use molecule::faster_hex::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()).unwrap())
    }
}
impl<'r> ::std::fmt::Debug for GlobalStateReader<'r> {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::std::fmt::Display for GlobalStateReader<'r> {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "address_root", self.address_root())?;
        write!(f, " }}")
    }
}
impl<'r> GlobalStateReader<'r> {
    pub const TOTAL_SIZE: usize = 32;
    pub const FIELD_SIZE: [usize; 1] = [32];
    pub const FIELD_COUNT: usize = 1;
    pub fn address_root(&self) -> Byte32Reader<'r> {
        Byte32Reader::new_unchecked(&self.as_slice()[0..32])
    }
}
impl<'r> molecule::prelude::Reader<'r> for GlobalStateReader<'r> {
    type Entity = GlobalState;
    const NAME: &'static str = "GlobalStateReader";
    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().into())
    }
    fn new_unchecked(slice: &'r [u8]) -> Self {
        GlobalStateReader(slice)
    }
    fn as_slice(&self) -> &'r [u8] {
        self.0
    }
    fn verify(slice: &[u8], _compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len != Self::TOTAL_SIZE {
            return ve!(Self, TotalSizeNotMatch, Self::TOTAL_SIZE, slice_len);
        }
        Ok(())
    }
}
#[derive(Debug, Default)]
pub struct GlobalStateBuilder {
    pub(crate) address_root: Byte32,
}
impl GlobalStateBuilder {
    pub const TOTAL_SIZE: usize = 32;
    pub const FIELD_SIZE: [usize; 1] = [32];
    pub const FIELD_COUNT: usize = 1;
    pub fn address_root(mut self, v: Byte32) -> Self {
        self.address_root = v;
        self
    }
}
impl molecule::prelude::Builder for GlobalStateBuilder {
    type Entity = GlobalState;
    const NAME: &'static str = "GlobalStateBuilder";
    fn expected_length(&self) -> usize {
        Self::TOTAL_SIZE
    }
    fn write<W: ::std::io::Write>(&self, writer: &mut W) -> ::std::io::Result<()> {
        writer.write_all(self.address_root.as_slice())?;
        Ok(())
    }
    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        GlobalState::new_unchecked(inner.into())
    }
}
#[derive(Clone)]
pub struct AddressEntry(molecule::bytes::Bytes);
impl ::std::fmt::LowerHex for AddressEntry {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        use molecule::faster_hex::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()).unwrap())
    }
}
impl ::std::fmt::Debug for AddressEntry {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::std::fmt::Display for AddressEntry {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "index", self.index())?;
        write!(f, ", {}: {}", "pubkey_hash", self.pubkey_hash())?;
        write!(f, ", {}: {}", "nonce", self.nonce())?;
        write!(f, ", {}: {}", "balance", self.balance())?;
        write!(f, " }}")
    }
}
impl ::std::default::Default for AddressEntry {
    fn default() -> Self {
        let v: Vec<u8> = vec![
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0,
        ];
        AddressEntry::new_unchecked(v.into())
    }
}
impl AddressEntry {
    pub const TOTAL_SIZE: usize = 36;
    pub const FIELD_SIZE: [usize; 4] = [4, 20, 4, 8];
    pub const FIELD_COUNT: usize = 4;
    pub fn index(&self) -> Uint32 {
        Uint32::new_unchecked(self.0.slice(0, 4))
    }
    pub fn pubkey_hash(&self) -> Byte20 {
        Byte20::new_unchecked(self.0.slice(4, 24))
    }
    pub fn nonce(&self) -> Uint32 {
        Uint32::new_unchecked(self.0.slice(24, 28))
    }
    pub fn balance(&self) -> Uint64 {
        Uint64::new_unchecked(self.0.slice(28, 36))
    }
    pub fn as_reader<'r>(&'r self) -> AddressEntryReader<'r> {
        AddressEntryReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for AddressEntry {
    type Builder = AddressEntryBuilder;
    const NAME: &'static str = "AddressEntry";
    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        AddressEntry(data)
    }
    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }
    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }
    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        AddressEntryReader::from_slice(slice).map(|reader| reader.to_entity())
    }
    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        AddressEntryReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }
    fn new_builder() -> Self::Builder {
        ::std::default::Default::default()
    }
    fn as_builder(self) -> Self::Builder {
        Self::new_builder()
            .index(self.index())
            .pubkey_hash(self.pubkey_hash())
            .nonce(self.nonce())
            .balance(self.balance())
    }
}
#[derive(Clone, Copy)]
pub struct AddressEntryReader<'r>(&'r [u8]);
impl<'r> ::std::fmt::LowerHex for AddressEntryReader<'r> {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        use molecule::faster_hex::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()).unwrap())
    }
}
impl<'r> ::std::fmt::Debug for AddressEntryReader<'r> {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::std::fmt::Display for AddressEntryReader<'r> {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "index", self.index())?;
        write!(f, ", {}: {}", "pubkey_hash", self.pubkey_hash())?;
        write!(f, ", {}: {}", "nonce", self.nonce())?;
        write!(f, ", {}: {}", "balance", self.balance())?;
        write!(f, " }}")
    }
}
impl<'r> AddressEntryReader<'r> {
    pub const TOTAL_SIZE: usize = 36;
    pub const FIELD_SIZE: [usize; 4] = [4, 20, 4, 8];
    pub const FIELD_COUNT: usize = 4;
    pub fn index(&self) -> Uint32Reader<'r> {
        Uint32Reader::new_unchecked(&self.as_slice()[0..4])
    }
    pub fn pubkey_hash(&self) -> Byte20Reader<'r> {
        Byte20Reader::new_unchecked(&self.as_slice()[4..24])
    }
    pub fn nonce(&self) -> Uint32Reader<'r> {
        Uint32Reader::new_unchecked(&self.as_slice()[24..28])
    }
    pub fn balance(&self) -> Uint64Reader<'r> {
        Uint64Reader::new_unchecked(&self.as_slice()[28..36])
    }
}
impl<'r> molecule::prelude::Reader<'r> for AddressEntryReader<'r> {
    type Entity = AddressEntry;
    const NAME: &'static str = "AddressEntryReader";
    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().into())
    }
    fn new_unchecked(slice: &'r [u8]) -> Self {
        AddressEntryReader(slice)
    }
    fn as_slice(&self) -> &'r [u8] {
        self.0
    }
    fn verify(slice: &[u8], _compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len != Self::TOTAL_SIZE {
            return ve!(Self, TotalSizeNotMatch, Self::TOTAL_SIZE, slice_len);
        }
        Ok(())
    }
}
#[derive(Debug, Default)]
pub struct AddressEntryBuilder {
    pub(crate) index: Uint32,
    pub(crate) pubkey_hash: Byte20,
    pub(crate) nonce: Uint32,
    pub(crate) balance: Uint64,
}
impl AddressEntryBuilder {
    pub const TOTAL_SIZE: usize = 36;
    pub const FIELD_SIZE: [usize; 4] = [4, 20, 4, 8];
    pub const FIELD_COUNT: usize = 4;
    pub fn index(mut self, v: Uint32) -> Self {
        self.index = v;
        self
    }
    pub fn pubkey_hash(mut self, v: Byte20) -> Self {
        self.pubkey_hash = v;
        self
    }
    pub fn nonce(mut self, v: Uint32) -> Self {
        self.nonce = v;
        self
    }
    pub fn balance(mut self, v: Uint64) -> Self {
        self.balance = v;
        self
    }
}
impl molecule::prelude::Builder for AddressEntryBuilder {
    type Entity = AddressEntry;
    const NAME: &'static str = "AddressEntryBuilder";
    fn expected_length(&self) -> usize {
        Self::TOTAL_SIZE
    }
    fn write<W: ::std::io::Write>(&self, writer: &mut W) -> ::std::io::Result<()> {
        writer.write_all(self.index.as_slice())?;
        writer.write_all(self.pubkey_hash.as_slice())?;
        writer.write_all(self.nonce.as_slice())?;
        writer.write_all(self.balance.as_slice())?;
        Ok(())
    }
    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        AddressEntry::new_unchecked(inner.into())
    }
}
#[derive(Clone)]
pub struct Action(molecule::bytes::Bytes);
impl ::std::fmt::LowerHex for Action {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        use molecule::faster_hex::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()).unwrap())
    }
}
impl ::std::fmt::Debug for Action {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::std::fmt::Display for Action {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "{}(", Self::NAME)?;
        self.to_enum().display_inner(f)?;
        write!(f, ")")
    }
}
impl ::std::default::Default for Action {
    fn default() -> Self {
        let v: Vec<u8> = vec![
            0, 0, 0, 0, 100, 0, 0, 0, 20, 0, 0, 0, 56, 0, 0, 0, 88, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ];
        Action::new_unchecked(v.into())
    }
}
impl Action {
    pub const ITEM_COUNT: usize = 2;
    pub fn item_id(&self) -> molecule::Number {
        molecule::unpack_number(self.as_slice())
    }
    pub fn to_enum(&self) -> ActionUnion {
        let inner = self.0.slice_from(molecule::NUMBER_SIZE);
        match self.item_id() {
            0 => Register::new_unchecked(inner).into(),
            1 => Deposit::new_unchecked(inner).into(),
            _ => panic!("{}: invalid data", Self::NAME),
        }
    }
    pub fn as_reader<'r>(&'r self) -> ActionReader<'r> {
        ActionReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for Action {
    type Builder = ActionBuilder;
    const NAME: &'static str = "Action";
    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        Action(data)
    }
    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }
    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }
    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        ActionReader::from_slice(slice).map(|reader| reader.to_entity())
    }
    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        ActionReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }
    fn new_builder() -> Self::Builder {
        ::std::default::Default::default()
    }
    fn as_builder(self) -> Self::Builder {
        Self::new_builder().set(self.to_enum())
    }
}
#[derive(Clone, Copy)]
pub struct ActionReader<'r>(&'r [u8]);
impl<'r> ::std::fmt::LowerHex for ActionReader<'r> {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        use molecule::faster_hex::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()).unwrap())
    }
}
impl<'r> ::std::fmt::Debug for ActionReader<'r> {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::std::fmt::Display for ActionReader<'r> {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "{}(", Self::NAME)?;
        self.to_enum().display_inner(f)?;
        write!(f, ")")
    }
}
impl<'r> ActionReader<'r> {
    pub const ITEM_COUNT: usize = 2;
    pub fn item_id(&self) -> molecule::Number {
        molecule::unpack_number(self.as_slice())
    }
    pub fn to_enum(&self) -> ActionUnionReader<'r> {
        let inner = &self.as_slice()[molecule::NUMBER_SIZE..];
        match self.item_id() {
            0 => RegisterReader::new_unchecked(inner).into(),
            1 => DepositReader::new_unchecked(inner).into(),
            _ => panic!("{}: invalid data", Self::NAME),
        }
    }
}
impl<'r> molecule::prelude::Reader<'r> for ActionReader<'r> {
    type Entity = Action;
    const NAME: &'static str = "ActionReader";
    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().into())
    }
    fn new_unchecked(slice: &'r [u8]) -> Self {
        ActionReader(slice)
    }
    fn as_slice(&self) -> &'r [u8] {
        self.0
    }
    fn verify(slice: &[u8], compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len < molecule::NUMBER_SIZE {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE, slice_len);
        }
        let item_id = molecule::unpack_number(slice);
        let inner_slice = &slice[molecule::NUMBER_SIZE..];
        match item_id {
            0 => RegisterReader::verify(inner_slice, compatible),
            1 => DepositReader::verify(inner_slice, compatible),
            _ => ve!(Self, UnknownItem, Self::ITEM_COUNT, item_id),
        }?;
        Ok(())
    }
}
#[derive(Debug, Default)]
pub struct ActionBuilder(pub(crate) ActionUnion);
impl ActionBuilder {
    pub const ITEM_COUNT: usize = 2;
    pub fn set<I>(mut self, v: I) -> Self
    where
        I: ::std::convert::Into<ActionUnion>,
    {
        self.0 = v.into();
        self
    }
}
impl molecule::prelude::Builder for ActionBuilder {
    type Entity = Action;
    const NAME: &'static str = "ActionBuilder";
    fn expected_length(&self) -> usize {
        molecule::NUMBER_SIZE + self.0.as_slice().len()
    }
    fn write<W: ::std::io::Write>(&self, writer: &mut W) -> ::std::io::Result<()> {
        writer.write_all(&molecule::pack_number(self.0.item_id()))?;
        writer.write_all(self.0.as_slice())
    }
    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        Action::new_unchecked(inner.into())
    }
}
#[derive(Debug, Clone)]
pub enum ActionUnion {
    Register(Register),
    Deposit(Deposit),
}
#[derive(Debug, Clone, Copy)]
pub enum ActionUnionReader<'r> {
    Register(RegisterReader<'r>),
    Deposit(DepositReader<'r>),
}
impl ::std::default::Default for ActionUnion {
    fn default() -> Self {
        ActionUnion::Register(::std::default::Default::default())
    }
}
impl ::std::fmt::Display for ActionUnion {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match self {
            ActionUnion::Register(ref item) => {
                write!(f, "{}::{}({})", Self::NAME, Register::NAME, item)
            }
            ActionUnion::Deposit(ref item) => {
                write!(f, "{}::{}({})", Self::NAME, Deposit::NAME, item)
            }
        }
    }
}
impl<'r> ::std::fmt::Display for ActionUnionReader<'r> {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match self {
            ActionUnionReader::Register(ref item) => {
                write!(f, "{}::{}({})", Self::NAME, Register::NAME, item)
            }
            ActionUnionReader::Deposit(ref item) => {
                write!(f, "{}::{}({})", Self::NAME, Deposit::NAME, item)
            }
        }
    }
}
impl ActionUnion {
    pub(crate) fn display_inner(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match self {
            ActionUnion::Register(ref item) => write!(f, "{}", item),
            ActionUnion::Deposit(ref item) => write!(f, "{}", item),
        }
    }
}
impl<'r> ActionUnionReader<'r> {
    pub(crate) fn display_inner(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match self {
            ActionUnionReader::Register(ref item) => write!(f, "{}", item),
            ActionUnionReader::Deposit(ref item) => write!(f, "{}", item),
        }
    }
}
impl ::std::convert::From<Register> for ActionUnion {
    fn from(item: Register) -> Self {
        ActionUnion::Register(item)
    }
}
impl ::std::convert::From<Deposit> for ActionUnion {
    fn from(item: Deposit) -> Self {
        ActionUnion::Deposit(item)
    }
}
impl<'r> ::std::convert::From<RegisterReader<'r>> for ActionUnionReader<'r> {
    fn from(item: RegisterReader<'r>) -> Self {
        ActionUnionReader::Register(item)
    }
}
impl<'r> ::std::convert::From<DepositReader<'r>> for ActionUnionReader<'r> {
    fn from(item: DepositReader<'r>) -> Self {
        ActionUnionReader::Deposit(item)
    }
}
impl ActionUnion {
    pub const NAME: &'static str = "ActionUnion";
    pub fn as_bytes(&self) -> molecule::bytes::Bytes {
        match self {
            ActionUnion::Register(item) => item.as_bytes(),
            ActionUnion::Deposit(item) => item.as_bytes(),
        }
    }
    pub fn as_slice(&self) -> &[u8] {
        match self {
            ActionUnion::Register(item) => item.as_slice(),
            ActionUnion::Deposit(item) => item.as_slice(),
        }
    }
    pub fn item_id(&self) -> molecule::Number {
        match self {
            ActionUnion::Register(_) => 0,
            ActionUnion::Deposit(_) => 1,
        }
    }
    pub fn item_name(&self) -> &str {
        match self {
            ActionUnion::Register(_) => "Register",
            ActionUnion::Deposit(_) => "Deposit",
        }
    }
    pub fn as_reader<'r>(&'r self) -> ActionUnionReader<'r> {
        match self {
            ActionUnion::Register(item) => item.as_reader().into(),
            ActionUnion::Deposit(item) => item.as_reader().into(),
        }
    }
}
impl<'r> ActionUnionReader<'r> {
    pub const NAME: &'r str = "ActionUnionReader";
    pub fn as_slice(&self) -> &'r [u8] {
        match self {
            ActionUnionReader::Register(item) => item.as_slice(),
            ActionUnionReader::Deposit(item) => item.as_slice(),
        }
    }
    pub fn item_id(&self) -> molecule::Number {
        match self {
            ActionUnionReader::Register(_) => 0,
            ActionUnionReader::Deposit(_) => 1,
        }
    }
    pub fn item_name(&self) -> &str {
        match self {
            ActionUnionReader::Register(_) => "Register",
            ActionUnionReader::Deposit(_) => "Deposit",
        }
    }
}
#[derive(Clone)]
pub struct Register(molecule::bytes::Bytes);
impl ::std::fmt::LowerHex for Register {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        use molecule::faster_hex::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()).unwrap())
    }
}
impl ::std::fmt::Debug for Register {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::std::fmt::Display for Register {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "address_entry", self.address_entry())?;
        write!(
            f,
            ", {}: {}",
            "last_address_entry_hash",
            self.last_address_entry_hash()
        )?;
        write!(f, ", {}: {}", "mmr_size", self.mmr_size())?;
        write!(f, ", {}: {}", "proof", self.proof())?;
        let extra_count = self.count_extra_fields();
        if extra_count != 0 {
            write!(f, ", .. ({} fields)", extra_count)?;
        }
        write!(f, " }}")
    }
}
impl ::std::default::Default for Register {
    fn default() -> Self {
        let v: Vec<u8> = vec![
            100, 0, 0, 0, 20, 0, 0, 0, 56, 0, 0, 0, 88, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ];
        Register::new_unchecked(v.into())
    }
}
impl Register {
    pub const FIELD_COUNT: usize = 4;
    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }
    pub fn field_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }
    pub fn field_offsets(&self) -> &[[u8; 4]] {
        molecule::unpack_number_vec(&self.as_slice()[molecule::NUMBER_SIZE..])
    }
    pub fn count_extra_fields(&self) -> usize {
        self.field_count() - Self::FIELD_COUNT
    }
    pub fn has_extra_fields(&self) -> bool {
        Self::FIELD_COUNT != self.field_count()
    }
    pub fn address_entry(&self) -> AddressEntry {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[0][..]) as usize;
        let end = molecule::unpack_number(&offsets[1][..]) as usize;
        AddressEntry::new_unchecked(self.0.slice(start, end))
    }
    pub fn last_address_entry_hash(&self) -> Byte32 {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[1][..]) as usize;
        let end = molecule::unpack_number(&offsets[2][..]) as usize;
        Byte32::new_unchecked(self.0.slice(start, end))
    }
    pub fn mmr_size(&self) -> Uint64 {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[2][..]) as usize;
        let end = molecule::unpack_number(&offsets[3][..]) as usize;
        Uint64::new_unchecked(self.0.slice(start, end))
    }
    pub fn proof(&self) -> Byte32Vec {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[3][..]) as usize;
        if self.has_extra_fields() {
            let end = molecule::unpack_number(&offsets[4][..]) as usize;
            Byte32Vec::new_unchecked(self.0.slice(start, end))
        } else {
            Byte32Vec::new_unchecked(self.0.slice_from(start))
        }
    }
    pub fn as_reader<'r>(&'r self) -> RegisterReader<'r> {
        RegisterReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for Register {
    type Builder = RegisterBuilder;
    const NAME: &'static str = "Register";
    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        Register(data)
    }
    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }
    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }
    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        RegisterReader::from_slice(slice).map(|reader| reader.to_entity())
    }
    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        RegisterReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }
    fn new_builder() -> Self::Builder {
        ::std::default::Default::default()
    }
    fn as_builder(self) -> Self::Builder {
        Self::new_builder()
            .address_entry(self.address_entry())
            .last_address_entry_hash(self.last_address_entry_hash())
            .mmr_size(self.mmr_size())
            .proof(self.proof())
    }
}
#[derive(Clone, Copy)]
pub struct RegisterReader<'r>(&'r [u8]);
impl<'r> ::std::fmt::LowerHex for RegisterReader<'r> {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        use molecule::faster_hex::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()).unwrap())
    }
}
impl<'r> ::std::fmt::Debug for RegisterReader<'r> {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::std::fmt::Display for RegisterReader<'r> {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "address_entry", self.address_entry())?;
        write!(
            f,
            ", {}: {}",
            "last_address_entry_hash",
            self.last_address_entry_hash()
        )?;
        write!(f, ", {}: {}", "mmr_size", self.mmr_size())?;
        write!(f, ", {}: {}", "proof", self.proof())?;
        let extra_count = self.count_extra_fields();
        if extra_count != 0 {
            write!(f, ", .. ({} fields)", extra_count)?;
        }
        write!(f, " }}")
    }
}
impl<'r> RegisterReader<'r> {
    pub const FIELD_COUNT: usize = 4;
    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }
    pub fn field_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }
    pub fn field_offsets(&self) -> &[[u8; 4]] {
        molecule::unpack_number_vec(&self.as_slice()[molecule::NUMBER_SIZE..])
    }
    pub fn count_extra_fields(&self) -> usize {
        self.field_count() - Self::FIELD_COUNT
    }
    pub fn has_extra_fields(&self) -> bool {
        Self::FIELD_COUNT != self.field_count()
    }
    pub fn address_entry(&self) -> AddressEntryReader<'r> {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[0][..]) as usize;
        let end = molecule::unpack_number(&offsets[1][..]) as usize;
        AddressEntryReader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn last_address_entry_hash(&self) -> Byte32Reader<'r> {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[1][..]) as usize;
        let end = molecule::unpack_number(&offsets[2][..]) as usize;
        Byte32Reader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn mmr_size(&self) -> Uint64Reader<'r> {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[2][..]) as usize;
        let end = molecule::unpack_number(&offsets[3][..]) as usize;
        Uint64Reader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn proof(&self) -> Byte32VecReader<'r> {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[3][..]) as usize;
        if self.has_extra_fields() {
            let end = molecule::unpack_number(&offsets[4][..]) as usize;
            Byte32VecReader::new_unchecked(&self.as_slice()[start..end])
        } else {
            Byte32VecReader::new_unchecked(&self.as_slice()[start..])
        }
    }
}
impl<'r> molecule::prelude::Reader<'r> for RegisterReader<'r> {
    type Entity = Register;
    const NAME: &'static str = "RegisterReader";
    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().into())
    }
    fn new_unchecked(slice: &'r [u8]) -> Self {
        RegisterReader(slice)
    }
    fn as_slice(&self) -> &'r [u8] {
        self.0
    }
    fn verify(slice: &[u8], compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len < molecule::NUMBER_SIZE {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE, slice_len);
        }
        let total_size = molecule::unpack_number(slice) as usize;
        if slice_len != total_size {
            return ve!(Self, TotalSizeNotMatch, total_size, slice_len);
        }
        if slice_len == molecule::NUMBER_SIZE && Self::FIELD_COUNT == 0 {
            return Ok(());
        }
        if slice_len < molecule::NUMBER_SIZE * 2 {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE * 2, slice_len);
        }
        let offset_first = molecule::unpack_number(&slice[molecule::NUMBER_SIZE..]) as usize;
        if offset_first % 4 != 0 || offset_first < molecule::NUMBER_SIZE * 2 {
            return ve!(Self, OffsetsNotMatch);
        }
        let field_count = offset_first / 4 - 1;
        if field_count < Self::FIELD_COUNT {
            return ve!(Self, FieldCountNotMatch, Self::FIELD_COUNT, field_count);
        } else if !compatible && field_count > Self::FIELD_COUNT {
            return ve!(Self, FieldCountNotMatch, Self::FIELD_COUNT, field_count);
        };
        let header_size = molecule::NUMBER_SIZE * (field_count + 1);
        if slice_len < header_size {
            return ve!(Self, HeaderIsBroken, header_size, slice_len);
        }
        let ptr = molecule::unpack_number_vec(&slice[molecule::NUMBER_SIZE..]);
        let mut offsets: Vec<usize> = ptr[..field_count]
            .iter()
            .map(|x| molecule::unpack_number(&x[..]) as usize)
            .collect();
        offsets.push(total_size);
        if offsets.windows(2).any(|i| i[0] > i[1]) {
            return ve!(Self, OffsetsNotMatch);
        }
        AddressEntryReader::verify(&slice[offsets[0]..offsets[1]], compatible)?;
        Byte32Reader::verify(&slice[offsets[1]..offsets[2]], compatible)?;
        Uint64Reader::verify(&slice[offsets[2]..offsets[3]], compatible)?;
        Byte32VecReader::verify(&slice[offsets[3]..offsets[4]], compatible)?;
        Ok(())
    }
}
#[derive(Debug, Default)]
pub struct RegisterBuilder {
    pub(crate) address_entry: AddressEntry,
    pub(crate) last_address_entry_hash: Byte32,
    pub(crate) mmr_size: Uint64,
    pub(crate) proof: Byte32Vec,
}
impl RegisterBuilder {
    pub const FIELD_COUNT: usize = 4;
    pub fn address_entry(mut self, v: AddressEntry) -> Self {
        self.address_entry = v;
        self
    }
    pub fn last_address_entry_hash(mut self, v: Byte32) -> Self {
        self.last_address_entry_hash = v;
        self
    }
    pub fn mmr_size(mut self, v: Uint64) -> Self {
        self.mmr_size = v;
        self
    }
    pub fn proof(mut self, v: Byte32Vec) -> Self {
        self.proof = v;
        self
    }
}
impl molecule::prelude::Builder for RegisterBuilder {
    type Entity = Register;
    const NAME: &'static str = "RegisterBuilder";
    fn expected_length(&self) -> usize {
        molecule::NUMBER_SIZE * (Self::FIELD_COUNT + 1)
            + self.address_entry.as_slice().len()
            + self.last_address_entry_hash.as_slice().len()
            + self.mmr_size.as_slice().len()
            + self.proof.as_slice().len()
    }
    fn write<W: ::std::io::Write>(&self, writer: &mut W) -> ::std::io::Result<()> {
        let mut total_size = molecule::NUMBER_SIZE * (Self::FIELD_COUNT + 1);
        let mut offsets = Vec::with_capacity(Self::FIELD_COUNT);
        offsets.push(total_size);
        total_size += self.address_entry.as_slice().len();
        offsets.push(total_size);
        total_size += self.last_address_entry_hash.as_slice().len();
        offsets.push(total_size);
        total_size += self.mmr_size.as_slice().len();
        offsets.push(total_size);
        total_size += self.proof.as_slice().len();
        writer.write_all(&molecule::pack_number(total_size as molecule::Number))?;
        for offset in offsets.into_iter() {
            writer.write_all(&molecule::pack_number(offset as molecule::Number))?;
        }
        writer.write_all(self.address_entry.as_slice())?;
        writer.write_all(self.last_address_entry_hash.as_slice())?;
        writer.write_all(self.mmr_size.as_slice())?;
        writer.write_all(self.proof.as_slice())?;
        Ok(())
    }
    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        Register::new_unchecked(inner.into())
    }
}
#[derive(Clone)]
pub struct Deposit(molecule::bytes::Bytes);
impl ::std::fmt::LowerHex for Deposit {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        use molecule::faster_hex::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()).unwrap())
    }
}
impl ::std::fmt::Debug for Deposit {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::std::fmt::Display for Deposit {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "dummy", self.dummy())?;
        write!(f, " }}")
    }
}
impl ::std::default::Default for Deposit {
    fn default() -> Self {
        let v: Vec<u8> = vec![0, 0, 0, 0];
        Deposit::new_unchecked(v.into())
    }
}
impl Deposit {
    pub const TOTAL_SIZE: usize = 4;
    pub const FIELD_SIZE: [usize; 1] = [4];
    pub const FIELD_COUNT: usize = 1;
    pub fn dummy(&self) -> Uint32 {
        Uint32::new_unchecked(self.0.slice(0, 4))
    }
    pub fn as_reader<'r>(&'r self) -> DepositReader<'r> {
        DepositReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for Deposit {
    type Builder = DepositBuilder;
    const NAME: &'static str = "Deposit";
    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        Deposit(data)
    }
    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }
    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }
    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        DepositReader::from_slice(slice).map(|reader| reader.to_entity())
    }
    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        DepositReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }
    fn new_builder() -> Self::Builder {
        ::std::default::Default::default()
    }
    fn as_builder(self) -> Self::Builder {
        Self::new_builder().dummy(self.dummy())
    }
}
#[derive(Clone, Copy)]
pub struct DepositReader<'r>(&'r [u8]);
impl<'r> ::std::fmt::LowerHex for DepositReader<'r> {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        use molecule::faster_hex::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()).unwrap())
    }
}
impl<'r> ::std::fmt::Debug for DepositReader<'r> {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::std::fmt::Display for DepositReader<'r> {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "dummy", self.dummy())?;
        write!(f, " }}")
    }
}
impl<'r> DepositReader<'r> {
    pub const TOTAL_SIZE: usize = 4;
    pub const FIELD_SIZE: [usize; 1] = [4];
    pub const FIELD_COUNT: usize = 1;
    pub fn dummy(&self) -> Uint32Reader<'r> {
        Uint32Reader::new_unchecked(&self.as_slice()[0..4])
    }
}
impl<'r> molecule::prelude::Reader<'r> for DepositReader<'r> {
    type Entity = Deposit;
    const NAME: &'static str = "DepositReader";
    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().into())
    }
    fn new_unchecked(slice: &'r [u8]) -> Self {
        DepositReader(slice)
    }
    fn as_slice(&self) -> &'r [u8] {
        self.0
    }
    fn verify(slice: &[u8], _compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len != Self::TOTAL_SIZE {
            return ve!(Self, TotalSizeNotMatch, Self::TOTAL_SIZE, slice_len);
        }
        Ok(())
    }
}
#[derive(Debug, Default)]
pub struct DepositBuilder {
    pub(crate) dummy: Uint32,
}
impl DepositBuilder {
    pub const TOTAL_SIZE: usize = 4;
    pub const FIELD_SIZE: [usize; 1] = [4];
    pub const FIELD_COUNT: usize = 1;
    pub fn dummy(mut self, v: Uint32) -> Self {
        self.dummy = v;
        self
    }
}
impl molecule::prelude::Builder for DepositBuilder {
    type Entity = Deposit;
    const NAME: &'static str = "DepositBuilder";
    fn expected_length(&self) -> usize {
        Self::TOTAL_SIZE
    }
    fn write<W: ::std::io::Write>(&self, writer: &mut W) -> ::std::io::Result<()> {
        writer.write_all(self.dummy.as_slice())?;
        Ok(())
    }
    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        Deposit::new_unchecked(inner.into())
    }
}
