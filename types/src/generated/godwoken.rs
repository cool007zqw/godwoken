// Generated by Molecule 0.4.2

use super::blockchain::*;
use molecule::prelude::*;
#[derive(Clone)]
pub struct Share(molecule::bytes::Bytes);
impl ::std::fmt::LowerHex for Share {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        use molecule::faster_hex::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()).unwrap())
    }
}
impl ::std::fmt::Debug for Share {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::std::fmt::Display for Share {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "header", self.header())?;
        write!(f, ", {}: {}", "proof", self.proof())?;
        let extra_count = self.count_extra_fields();
        if extra_count != 0 {
            write!(f, ", .. ({} fields)", extra_count)?;
        }
        write!(f, " }}")
    }
}
impl ::std::default::Default for Share {
    fn default() -> Self {
        let v: Vec<u8> = vec![
            224, 0, 0, 0, 12, 0, 0, 0, 220, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ];
        Share::new_unchecked(v.into())
    }
}
impl Share {
    pub const FIELD_COUNT: usize = 2;
    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }
    pub fn field_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }
    pub fn field_offsets(&self) -> &[[u8; 4]] {
        molecule::unpack_number_vec(&self.as_slice()[molecule::NUMBER_SIZE..])
    }
    pub fn count_extra_fields(&self) -> usize {
        self.field_count() - Self::FIELD_COUNT
    }
    pub fn has_extra_fields(&self) -> bool {
        Self::FIELD_COUNT != self.field_count()
    }
    pub fn header(&self) -> Header {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[0][..]) as usize;
        let end = molecule::unpack_number(&offsets[1][..]) as usize;
        Header::new_unchecked(self.0.slice(start, end))
    }
    pub fn proof(&self) -> Byte32Vec {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[1][..]) as usize;
        if self.has_extra_fields() {
            let end = molecule::unpack_number(&offsets[2][..]) as usize;
            Byte32Vec::new_unchecked(self.0.slice(start, end))
        } else {
            Byte32Vec::new_unchecked(self.0.slice_from(start))
        }
    }
    pub fn as_reader<'r>(&'r self) -> ShareReader<'r> {
        ShareReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for Share {
    type Builder = ShareBuilder;
    const NAME: &'static str = "Share";
    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        Share(data)
    }
    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }
    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }
    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        ShareReader::from_slice(slice).map(|reader| reader.to_entity())
    }
    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        ShareReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }
    fn new_builder() -> Self::Builder {
        ::std::default::Default::default()
    }
    fn as_builder(self) -> Self::Builder {
        Self::new_builder()
            .header(self.header())
            .proof(self.proof())
    }
}
#[derive(Clone, Copy)]
pub struct ShareReader<'r>(&'r [u8]);
impl<'r> ::std::fmt::LowerHex for ShareReader<'r> {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        use molecule::faster_hex::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()).unwrap())
    }
}
impl<'r> ::std::fmt::Debug for ShareReader<'r> {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::std::fmt::Display for ShareReader<'r> {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "header", self.header())?;
        write!(f, ", {}: {}", "proof", self.proof())?;
        let extra_count = self.count_extra_fields();
        if extra_count != 0 {
            write!(f, ", .. ({} fields)", extra_count)?;
        }
        write!(f, " }}")
    }
}
impl<'r> ShareReader<'r> {
    pub const FIELD_COUNT: usize = 2;
    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }
    pub fn field_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }
    pub fn field_offsets(&self) -> &[[u8; 4]] {
        molecule::unpack_number_vec(&self.as_slice()[molecule::NUMBER_SIZE..])
    }
    pub fn count_extra_fields(&self) -> usize {
        self.field_count() - Self::FIELD_COUNT
    }
    pub fn has_extra_fields(&self) -> bool {
        Self::FIELD_COUNT != self.field_count()
    }
    pub fn header(&self) -> HeaderReader<'r> {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[0][..]) as usize;
        let end = molecule::unpack_number(&offsets[1][..]) as usize;
        HeaderReader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn proof(&self) -> Byte32VecReader<'r> {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[1][..]) as usize;
        if self.has_extra_fields() {
            let end = molecule::unpack_number(&offsets[2][..]) as usize;
            Byte32VecReader::new_unchecked(&self.as_slice()[start..end])
        } else {
            Byte32VecReader::new_unchecked(&self.as_slice()[start..])
        }
    }
}
impl<'r> molecule::prelude::Reader<'r> for ShareReader<'r> {
    type Entity = Share;
    const NAME: &'static str = "ShareReader";
    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().into())
    }
    fn new_unchecked(slice: &'r [u8]) -> Self {
        ShareReader(slice)
    }
    fn as_slice(&self) -> &'r [u8] {
        self.0
    }
    fn verify(slice: &[u8], compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len < molecule::NUMBER_SIZE {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE, slice_len);
        }
        let total_size = molecule::unpack_number(slice) as usize;
        if slice_len != total_size {
            return ve!(Self, TotalSizeNotMatch, total_size, slice_len);
        }
        if slice_len == molecule::NUMBER_SIZE && Self::FIELD_COUNT == 0 {
            return Ok(());
        }
        if slice_len < molecule::NUMBER_SIZE * 2 {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE * 2, slice_len);
        }
        let offset_first = molecule::unpack_number(&slice[molecule::NUMBER_SIZE..]) as usize;
        if offset_first % 4 != 0 || offset_first < molecule::NUMBER_SIZE * 2 {
            return ve!(Self, OffsetsNotMatch);
        }
        let field_count = offset_first / 4 - 1;
        if field_count < Self::FIELD_COUNT {
            return ve!(Self, FieldCountNotMatch, Self::FIELD_COUNT, field_count);
        } else if !compatible && field_count > Self::FIELD_COUNT {
            return ve!(Self, FieldCountNotMatch, Self::FIELD_COUNT, field_count);
        };
        let header_size = molecule::NUMBER_SIZE * (field_count + 1);
        if slice_len < header_size {
            return ve!(Self, HeaderIsBroken, header_size, slice_len);
        }
        let ptr = molecule::unpack_number_vec(&slice[molecule::NUMBER_SIZE..]);
        let mut offsets: Vec<usize> = ptr[..field_count]
            .iter()
            .map(|x| molecule::unpack_number(&x[..]) as usize)
            .collect();
        offsets.push(total_size);
        if offsets.windows(2).any(|i| i[0] > i[1]) {
            return ve!(Self, OffsetsNotMatch);
        }
        HeaderReader::verify(&slice[offsets[0]..offsets[1]], compatible)?;
        Byte32VecReader::verify(&slice[offsets[1]..offsets[2]], compatible)?;
        Ok(())
    }
}
#[derive(Debug, Default)]
pub struct ShareBuilder {
    pub(crate) header: Header,
    pub(crate) proof: Byte32Vec,
}
impl ShareBuilder {
    pub const FIELD_COUNT: usize = 2;
    pub fn header(mut self, v: Header) -> Self {
        self.header = v;
        self
    }
    pub fn proof(mut self, v: Byte32Vec) -> Self {
        self.proof = v;
        self
    }
}
impl molecule::prelude::Builder for ShareBuilder {
    type Entity = Share;
    const NAME: &'static str = "ShareBuilder";
    fn expected_length(&self) -> usize {
        molecule::NUMBER_SIZE * (Self::FIELD_COUNT + 1)
            + self.header.as_slice().len()
            + self.proof.as_slice().len()
    }
    fn write<W: ::std::io::Write>(&self, writer: &mut W) -> ::std::io::Result<()> {
        let mut total_size = molecule::NUMBER_SIZE * (Self::FIELD_COUNT + 1);
        let mut offsets = Vec::with_capacity(Self::FIELD_COUNT);
        offsets.push(total_size);
        total_size += self.header.as_slice().len();
        offsets.push(total_size);
        total_size += self.proof.as_slice().len();
        writer.write_all(&molecule::pack_number(total_size as molecule::Number))?;
        for offset in offsets.into_iter() {
            writer.write_all(&molecule::pack_number(offset as molecule::Number))?;
        }
        writer.write_all(self.header.as_slice())?;
        writer.write_all(self.proof.as_slice())?;
        Ok(())
    }
    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        Share::new_unchecked(inner.into())
    }
}
#[derive(Clone)]
pub struct Shares(molecule::bytes::Bytes);
impl ::std::fmt::LowerHex for Shares {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        use molecule::faster_hex::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()).unwrap())
    }
}
impl ::std::fmt::Debug for Shares {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::std::fmt::Display for Shares {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "{} [", Self::NAME)?;
        for i in 0..self.len() {
            if i == 0 {
                write!(f, "{}", self.get_unchecked(i))?;
            } else {
                write!(f, ", {}", self.get_unchecked(i))?;
            }
        }
        write!(f, "]")
    }
}
impl ::std::default::Default for Shares {
    fn default() -> Self {
        let v: Vec<u8> = vec![4, 0, 0, 0];
        Shares::new_unchecked(v.into())
    }
}
impl Shares {
    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }
    pub fn item_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }
    pub fn item_offsets(&self) -> &[[u8; 4]] {
        molecule::unpack_number_vec(&self.as_slice()[molecule::NUMBER_SIZE..])
    }
    pub fn len(&self) -> usize {
        self.item_count()
    }
    pub fn is_empty(&self) -> bool {
        self.len() == 0
    }
    pub fn get(&self, idx: usize) -> Option<Share> {
        if idx >= self.len() {
            None
        } else {
            Some(self.get_unchecked(idx))
        }
    }
    pub fn get_unchecked(&self, idx: usize) -> Share {
        let offsets = self.item_offsets();
        let start = molecule::unpack_number(&offsets[idx][..]) as usize;
        if idx == self.len() - 1 {
            Share::new_unchecked(self.0.slice_from(start))
        } else {
            let end = molecule::unpack_number(&offsets[idx + 1][..]) as usize;
            Share::new_unchecked(self.0.slice(start, end))
        }
    }
    pub fn as_reader<'r>(&'r self) -> SharesReader<'r> {
        SharesReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for Shares {
    type Builder = SharesBuilder;
    const NAME: &'static str = "Shares";
    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        Shares(data)
    }
    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }
    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }
    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        SharesReader::from_slice(slice).map(|reader| reader.to_entity())
    }
    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        SharesReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }
    fn new_builder() -> Self::Builder {
        ::std::default::Default::default()
    }
    fn as_builder(self) -> Self::Builder {
        Self::new_builder().extend(self.into_iter())
    }
}
#[derive(Clone, Copy)]
pub struct SharesReader<'r>(&'r [u8]);
impl<'r> ::std::fmt::LowerHex for SharesReader<'r> {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        use molecule::faster_hex::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()).unwrap())
    }
}
impl<'r> ::std::fmt::Debug for SharesReader<'r> {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::std::fmt::Display for SharesReader<'r> {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "{} [", Self::NAME)?;
        for i in 0..self.len() {
            if i == 0 {
                write!(f, "{}", self.get_unchecked(i))?;
            } else {
                write!(f, ", {}", self.get_unchecked(i))?;
            }
        }
        write!(f, "]")
    }
}
impl<'r> SharesReader<'r> {
    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }
    pub fn item_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }
    pub fn item_offsets(&self) -> &[[u8; 4]] {
        molecule::unpack_number_vec(&self.as_slice()[molecule::NUMBER_SIZE..])
    }
    pub fn len(&self) -> usize {
        self.item_count()
    }
    pub fn is_empty(&self) -> bool {
        self.len() == 0
    }
    pub fn get(&self, idx: usize) -> Option<ShareReader<'r>> {
        if idx >= self.len() {
            None
        } else {
            Some(self.get_unchecked(idx))
        }
    }
    pub fn get_unchecked(&self, idx: usize) -> ShareReader<'r> {
        let offsets = self.item_offsets();
        let start = molecule::unpack_number(&offsets[idx][..]) as usize;
        if idx == self.len() - 1 {
            ShareReader::new_unchecked(&self.as_slice()[start..])
        } else {
            let end = molecule::unpack_number(&offsets[idx + 1][..]) as usize;
            ShareReader::new_unchecked(&self.as_slice()[start..end])
        }
    }
}
impl<'r> molecule::prelude::Reader<'r> for SharesReader<'r> {
    type Entity = Shares;
    const NAME: &'static str = "SharesReader";
    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().into())
    }
    fn new_unchecked(slice: &'r [u8]) -> Self {
        SharesReader(slice)
    }
    fn as_slice(&self) -> &'r [u8] {
        self.0
    }
    fn verify(slice: &[u8], compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len < molecule::NUMBER_SIZE {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE, slice_len);
        }
        let total_size = molecule::unpack_number(slice) as usize;
        if slice_len != total_size {
            return ve!(Self, TotalSizeNotMatch, total_size, slice_len);
        }
        if slice_len == molecule::NUMBER_SIZE {
            return Ok(());
        }
        if slice_len < molecule::NUMBER_SIZE * 2 {
            return ve!(
                Self,
                TotalSizeNotMatch,
                molecule::NUMBER_SIZE * 2,
                slice_len
            );
        }
        let offset_first = molecule::unpack_number(&slice[molecule::NUMBER_SIZE..]) as usize;
        if offset_first % 4 != 0 || offset_first < molecule::NUMBER_SIZE * 2 {
            return ve!(Self, OffsetsNotMatch);
        }
        let item_count = offset_first / 4 - 1;
        let header_size = molecule::NUMBER_SIZE * (item_count + 1);
        if slice_len < header_size {
            return ve!(Self, HeaderIsBroken, header_size, slice_len);
        }
        let ptr = molecule::unpack_number_vec(&slice[molecule::NUMBER_SIZE..]);
        let mut offsets: Vec<usize> = ptr[..item_count]
            .iter()
            .map(|x| molecule::unpack_number(&x[..]) as usize)
            .collect();
        offsets.push(total_size);
        if offsets.windows(2).any(|i| i[0] > i[1]) {
            return ve!(Self, OffsetsNotMatch);
        }
        for pair in offsets.windows(2) {
            let start = pair[0];
            let end = pair[1];
            ShareReader::verify(&slice[start..end], compatible)?;
        }
        Ok(())
    }
}
#[derive(Debug, Default)]
pub struct SharesBuilder(pub(crate) Vec<Share>);
impl SharesBuilder {
    pub fn set(mut self, v: Vec<Share>) -> Self {
        self.0 = v;
        self
    }
    pub fn push(mut self, v: Share) -> Self {
        self.0.push(v);
        self
    }
    pub fn extend<T: ::std::iter::IntoIterator<Item = Share>>(mut self, iter: T) -> Self {
        for elem in iter {
            self.0.push(elem);
        }
        self
    }
}
impl molecule::prelude::Builder for SharesBuilder {
    type Entity = Shares;
    const NAME: &'static str = "SharesBuilder";
    fn expected_length(&self) -> usize {
        molecule::NUMBER_SIZE * (self.0.len() + 1)
            + self
                .0
                .iter()
                .map(|inner| inner.as_slice().len())
                .sum::<usize>()
    }
    fn write<W: ::std::io::Write>(&self, writer: &mut W) -> ::std::io::Result<()> {
        let item_count = self.0.len();
        if item_count == 0 {
            writer.write_all(&molecule::pack_number(
                molecule::NUMBER_SIZE as molecule::Number,
            ))?;
        } else {
            let (total_size, offsets) = self.0.iter().fold(
                (
                    molecule::NUMBER_SIZE * (item_count + 1),
                    Vec::with_capacity(item_count),
                ),
                |(start, mut offsets), inner| {
                    offsets.push(start);
                    (start + inner.as_slice().len(), offsets)
                },
            );
            writer.write_all(&molecule::pack_number(total_size as molecule::Number))?;
            for offset in offsets.into_iter() {
                writer.write_all(&molecule::pack_number(offset as molecule::Number))?;
            }
            for inner in self.0.iter() {
                writer.write_all(inner.as_slice())?;
            }
        }
        Ok(())
    }
    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        Shares::new_unchecked(inner.into())
    }
}
pub struct SharesIterator(Shares, usize, usize);
impl ::std::iter::Iterator for SharesIterator {
    type Item = Share;
    fn next(&mut self) -> Option<Self::Item> {
        if self.1 >= self.2 {
            None
        } else {
            let ret = self.0.get_unchecked(self.1);
            self.1 += 1;
            Some(ret)
        }
    }
}
impl ::std::iter::ExactSizeIterator for SharesIterator {
    fn len(&self) -> usize {
        self.2 - self.1
    }
}
impl ::std::iter::IntoIterator for Shares {
    type Item = Share;
    type IntoIter = SharesIterator;
    fn into_iter(self) -> Self::IntoIter {
        let len = self.len();
        SharesIterator(self, 0, len)
    }
}
impl<'r> SharesReader<'r> {
    pub fn iter<'t>(&'t self) -> SharesReaderIterator<'t, 'r> {
        SharesReaderIterator(&self, 0, self.len())
    }
}
pub struct SharesReaderIterator<'t, 'r>(&'t SharesReader<'r>, usize, usize);
impl<'t: 'r, 'r> ::std::iter::Iterator for SharesReaderIterator<'t, 'r> {
    type Item = ShareReader<'t>;
    fn next(&mut self) -> Option<Self::Item> {
        if self.1 >= self.2 {
            None
        } else {
            let ret = self.0.get_unchecked(self.1);
            self.1 += 1;
            Some(ret)
        }
    }
}
impl<'t: 'r, 'r> ::std::iter::ExactSizeIterator for SharesReaderIterator<'t, 'r> {
    fn len(&self) -> usize {
        self.2 - self.1
    }
}
#[derive(Clone)]
pub struct SubmitGroup(molecule::bytes::Bytes);
impl ::std::fmt::LowerHex for SubmitGroup {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        use molecule::faster_hex::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()).unwrap())
    }
}
impl ::std::fmt::Debug for SubmitGroup {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::std::fmt::Display for SubmitGroup {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "epoch_header_index", self.epoch_header_index())?;
        write!(f, ", {}: {}", "shares", self.shares())?;
        let extra_count = self.count_extra_fields();
        if extra_count != 0 {
            write!(f, ", .. ({} fields)", extra_count)?;
        }
        write!(f, " }}")
    }
}
impl ::std::default::Default for SubmitGroup {
    fn default() -> Self {
        let v: Vec<u8> = vec![17, 0, 0, 0, 12, 0, 0, 0, 13, 0, 0, 0, 0, 4, 0, 0, 0];
        SubmitGroup::new_unchecked(v.into())
    }
}
impl SubmitGroup {
    pub const FIELD_COUNT: usize = 2;
    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }
    pub fn field_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }
    pub fn field_offsets(&self) -> &[[u8; 4]] {
        molecule::unpack_number_vec(&self.as_slice()[molecule::NUMBER_SIZE..])
    }
    pub fn count_extra_fields(&self) -> usize {
        self.field_count() - Self::FIELD_COUNT
    }
    pub fn has_extra_fields(&self) -> bool {
        Self::FIELD_COUNT != self.field_count()
    }
    pub fn epoch_header_index(&self) -> Byte {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[0][..]) as usize;
        let end = molecule::unpack_number(&offsets[1][..]) as usize;
        Byte::new_unchecked(self.0.slice(start, end))
    }
    pub fn shares(&self) -> Shares {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[1][..]) as usize;
        if self.has_extra_fields() {
            let end = molecule::unpack_number(&offsets[2][..]) as usize;
            Shares::new_unchecked(self.0.slice(start, end))
        } else {
            Shares::new_unchecked(self.0.slice_from(start))
        }
    }
    pub fn as_reader<'r>(&'r self) -> SubmitGroupReader<'r> {
        SubmitGroupReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for SubmitGroup {
    type Builder = SubmitGroupBuilder;
    const NAME: &'static str = "SubmitGroup";
    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        SubmitGroup(data)
    }
    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }
    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }
    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        SubmitGroupReader::from_slice(slice).map(|reader| reader.to_entity())
    }
    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        SubmitGroupReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }
    fn new_builder() -> Self::Builder {
        ::std::default::Default::default()
    }
    fn as_builder(self) -> Self::Builder {
        Self::new_builder()
            .epoch_header_index(self.epoch_header_index())
            .shares(self.shares())
    }
}
#[derive(Clone, Copy)]
pub struct SubmitGroupReader<'r>(&'r [u8]);
impl<'r> ::std::fmt::LowerHex for SubmitGroupReader<'r> {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        use molecule::faster_hex::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()).unwrap())
    }
}
impl<'r> ::std::fmt::Debug for SubmitGroupReader<'r> {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::std::fmt::Display for SubmitGroupReader<'r> {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "epoch_header_index", self.epoch_header_index())?;
        write!(f, ", {}: {}", "shares", self.shares())?;
        let extra_count = self.count_extra_fields();
        if extra_count != 0 {
            write!(f, ", .. ({} fields)", extra_count)?;
        }
        write!(f, " }}")
    }
}
impl<'r> SubmitGroupReader<'r> {
    pub const FIELD_COUNT: usize = 2;
    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }
    pub fn field_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }
    pub fn field_offsets(&self) -> &[[u8; 4]] {
        molecule::unpack_number_vec(&self.as_slice()[molecule::NUMBER_SIZE..])
    }
    pub fn count_extra_fields(&self) -> usize {
        self.field_count() - Self::FIELD_COUNT
    }
    pub fn has_extra_fields(&self) -> bool {
        Self::FIELD_COUNT != self.field_count()
    }
    pub fn epoch_header_index(&self) -> ByteReader<'r> {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[0][..]) as usize;
        let end = molecule::unpack_number(&offsets[1][..]) as usize;
        ByteReader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn shares(&self) -> SharesReader<'r> {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[1][..]) as usize;
        if self.has_extra_fields() {
            let end = molecule::unpack_number(&offsets[2][..]) as usize;
            SharesReader::new_unchecked(&self.as_slice()[start..end])
        } else {
            SharesReader::new_unchecked(&self.as_slice()[start..])
        }
    }
}
impl<'r> molecule::prelude::Reader<'r> for SubmitGroupReader<'r> {
    type Entity = SubmitGroup;
    const NAME: &'static str = "SubmitGroupReader";
    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().into())
    }
    fn new_unchecked(slice: &'r [u8]) -> Self {
        SubmitGroupReader(slice)
    }
    fn as_slice(&self) -> &'r [u8] {
        self.0
    }
    fn verify(slice: &[u8], compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len < molecule::NUMBER_SIZE {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE, slice_len);
        }
        let total_size = molecule::unpack_number(slice) as usize;
        if slice_len != total_size {
            return ve!(Self, TotalSizeNotMatch, total_size, slice_len);
        }
        if slice_len == molecule::NUMBER_SIZE && Self::FIELD_COUNT == 0 {
            return Ok(());
        }
        if slice_len < molecule::NUMBER_SIZE * 2 {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE * 2, slice_len);
        }
        let offset_first = molecule::unpack_number(&slice[molecule::NUMBER_SIZE..]) as usize;
        if offset_first % 4 != 0 || offset_first < molecule::NUMBER_SIZE * 2 {
            return ve!(Self, OffsetsNotMatch);
        }
        let field_count = offset_first / 4 - 1;
        if field_count < Self::FIELD_COUNT {
            return ve!(Self, FieldCountNotMatch, Self::FIELD_COUNT, field_count);
        } else if !compatible && field_count > Self::FIELD_COUNT {
            return ve!(Self, FieldCountNotMatch, Self::FIELD_COUNT, field_count);
        };
        let header_size = molecule::NUMBER_SIZE * (field_count + 1);
        if slice_len < header_size {
            return ve!(Self, HeaderIsBroken, header_size, slice_len);
        }
        let ptr = molecule::unpack_number_vec(&slice[molecule::NUMBER_SIZE..]);
        let mut offsets: Vec<usize> = ptr[..field_count]
            .iter()
            .map(|x| molecule::unpack_number(&x[..]) as usize)
            .collect();
        offsets.push(total_size);
        if offsets.windows(2).any(|i| i[0] > i[1]) {
            return ve!(Self, OffsetsNotMatch);
        }
        ByteReader::verify(&slice[offsets[0]..offsets[1]], compatible)?;
        SharesReader::verify(&slice[offsets[1]..offsets[2]], compatible)?;
        Ok(())
    }
}
#[derive(Debug, Default)]
pub struct SubmitGroupBuilder {
    pub(crate) epoch_header_index: Byte,
    pub(crate) shares: Shares,
}
impl SubmitGroupBuilder {
    pub const FIELD_COUNT: usize = 2;
    pub fn epoch_header_index(mut self, v: Byte) -> Self {
        self.epoch_header_index = v;
        self
    }
    pub fn shares(mut self, v: Shares) -> Self {
        self.shares = v;
        self
    }
}
impl molecule::prelude::Builder for SubmitGroupBuilder {
    type Entity = SubmitGroup;
    const NAME: &'static str = "SubmitGroupBuilder";
    fn expected_length(&self) -> usize {
        molecule::NUMBER_SIZE * (Self::FIELD_COUNT + 1)
            + self.epoch_header_index.as_slice().len()
            + self.shares.as_slice().len()
    }
    fn write<W: ::std::io::Write>(&self, writer: &mut W) -> ::std::io::Result<()> {
        let mut total_size = molecule::NUMBER_SIZE * (Self::FIELD_COUNT + 1);
        let mut offsets = Vec::with_capacity(Self::FIELD_COUNT);
        offsets.push(total_size);
        total_size += self.epoch_header_index.as_slice().len();
        offsets.push(total_size);
        total_size += self.shares.as_slice().len();
        writer.write_all(&molecule::pack_number(total_size as molecule::Number))?;
        for offset in offsets.into_iter() {
            writer.write_all(&molecule::pack_number(offset as molecule::Number))?;
        }
        writer.write_all(self.epoch_header_index.as_slice())?;
        writer.write_all(self.shares.as_slice())?;
        Ok(())
    }
    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        SubmitGroup::new_unchecked(inner.into())
    }
}
#[derive(Clone)]
pub struct SubmitGroups(molecule::bytes::Bytes);
impl ::std::fmt::LowerHex for SubmitGroups {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        use molecule::faster_hex::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()).unwrap())
    }
}
impl ::std::fmt::Debug for SubmitGroups {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::std::fmt::Display for SubmitGroups {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "{} [", Self::NAME)?;
        for i in 0..self.len() {
            if i == 0 {
                write!(f, "{}", self.get_unchecked(i))?;
            } else {
                write!(f, ", {}", self.get_unchecked(i))?;
            }
        }
        write!(f, "]")
    }
}
impl ::std::default::Default for SubmitGroups {
    fn default() -> Self {
        let v: Vec<u8> = vec![4, 0, 0, 0];
        SubmitGroups::new_unchecked(v.into())
    }
}
impl SubmitGroups {
    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }
    pub fn item_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }
    pub fn item_offsets(&self) -> &[[u8; 4]] {
        molecule::unpack_number_vec(&self.as_slice()[molecule::NUMBER_SIZE..])
    }
    pub fn len(&self) -> usize {
        self.item_count()
    }
    pub fn is_empty(&self) -> bool {
        self.len() == 0
    }
    pub fn get(&self, idx: usize) -> Option<SubmitGroup> {
        if idx >= self.len() {
            None
        } else {
            Some(self.get_unchecked(idx))
        }
    }
    pub fn get_unchecked(&self, idx: usize) -> SubmitGroup {
        let offsets = self.item_offsets();
        let start = molecule::unpack_number(&offsets[idx][..]) as usize;
        if idx == self.len() - 1 {
            SubmitGroup::new_unchecked(self.0.slice_from(start))
        } else {
            let end = molecule::unpack_number(&offsets[idx + 1][..]) as usize;
            SubmitGroup::new_unchecked(self.0.slice(start, end))
        }
    }
    pub fn as_reader<'r>(&'r self) -> SubmitGroupsReader<'r> {
        SubmitGroupsReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for SubmitGroups {
    type Builder = SubmitGroupsBuilder;
    const NAME: &'static str = "SubmitGroups";
    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        SubmitGroups(data)
    }
    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }
    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }
    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        SubmitGroupsReader::from_slice(slice).map(|reader| reader.to_entity())
    }
    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        SubmitGroupsReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }
    fn new_builder() -> Self::Builder {
        ::std::default::Default::default()
    }
    fn as_builder(self) -> Self::Builder {
        Self::new_builder().extend(self.into_iter())
    }
}
#[derive(Clone, Copy)]
pub struct SubmitGroupsReader<'r>(&'r [u8]);
impl<'r> ::std::fmt::LowerHex for SubmitGroupsReader<'r> {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        use molecule::faster_hex::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()).unwrap())
    }
}
impl<'r> ::std::fmt::Debug for SubmitGroupsReader<'r> {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::std::fmt::Display for SubmitGroupsReader<'r> {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "{} [", Self::NAME)?;
        for i in 0..self.len() {
            if i == 0 {
                write!(f, "{}", self.get_unchecked(i))?;
            } else {
                write!(f, ", {}", self.get_unchecked(i))?;
            }
        }
        write!(f, "]")
    }
}
impl<'r> SubmitGroupsReader<'r> {
    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }
    pub fn item_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }
    pub fn item_offsets(&self) -> &[[u8; 4]] {
        molecule::unpack_number_vec(&self.as_slice()[molecule::NUMBER_SIZE..])
    }
    pub fn len(&self) -> usize {
        self.item_count()
    }
    pub fn is_empty(&self) -> bool {
        self.len() == 0
    }
    pub fn get(&self, idx: usize) -> Option<SubmitGroupReader<'r>> {
        if idx >= self.len() {
            None
        } else {
            Some(self.get_unchecked(idx))
        }
    }
    pub fn get_unchecked(&self, idx: usize) -> SubmitGroupReader<'r> {
        let offsets = self.item_offsets();
        let start = molecule::unpack_number(&offsets[idx][..]) as usize;
        if idx == self.len() - 1 {
            SubmitGroupReader::new_unchecked(&self.as_slice()[start..])
        } else {
            let end = molecule::unpack_number(&offsets[idx + 1][..]) as usize;
            SubmitGroupReader::new_unchecked(&self.as_slice()[start..end])
        }
    }
}
impl<'r> molecule::prelude::Reader<'r> for SubmitGroupsReader<'r> {
    type Entity = SubmitGroups;
    const NAME: &'static str = "SubmitGroupsReader";
    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().into())
    }
    fn new_unchecked(slice: &'r [u8]) -> Self {
        SubmitGroupsReader(slice)
    }
    fn as_slice(&self) -> &'r [u8] {
        self.0
    }
    fn verify(slice: &[u8], compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len < molecule::NUMBER_SIZE {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE, slice_len);
        }
        let total_size = molecule::unpack_number(slice) as usize;
        if slice_len != total_size {
            return ve!(Self, TotalSizeNotMatch, total_size, slice_len);
        }
        if slice_len == molecule::NUMBER_SIZE {
            return Ok(());
        }
        if slice_len < molecule::NUMBER_SIZE * 2 {
            return ve!(
                Self,
                TotalSizeNotMatch,
                molecule::NUMBER_SIZE * 2,
                slice_len
            );
        }
        let offset_first = molecule::unpack_number(&slice[molecule::NUMBER_SIZE..]) as usize;
        if offset_first % 4 != 0 || offset_first < molecule::NUMBER_SIZE * 2 {
            return ve!(Self, OffsetsNotMatch);
        }
        let item_count = offset_first / 4 - 1;
        let header_size = molecule::NUMBER_SIZE * (item_count + 1);
        if slice_len < header_size {
            return ve!(Self, HeaderIsBroken, header_size, slice_len);
        }
        let ptr = molecule::unpack_number_vec(&slice[molecule::NUMBER_SIZE..]);
        let mut offsets: Vec<usize> = ptr[..item_count]
            .iter()
            .map(|x| molecule::unpack_number(&x[..]) as usize)
            .collect();
        offsets.push(total_size);
        if offsets.windows(2).any(|i| i[0] > i[1]) {
            return ve!(Self, OffsetsNotMatch);
        }
        for pair in offsets.windows(2) {
            let start = pair[0];
            let end = pair[1];
            SubmitGroupReader::verify(&slice[start..end], compatible)?;
        }
        Ok(())
    }
}
#[derive(Debug, Default)]
pub struct SubmitGroupsBuilder(pub(crate) Vec<SubmitGroup>);
impl SubmitGroupsBuilder {
    pub fn set(mut self, v: Vec<SubmitGroup>) -> Self {
        self.0 = v;
        self
    }
    pub fn push(mut self, v: SubmitGroup) -> Self {
        self.0.push(v);
        self
    }
    pub fn extend<T: ::std::iter::IntoIterator<Item = SubmitGroup>>(mut self, iter: T) -> Self {
        for elem in iter {
            self.0.push(elem);
        }
        self
    }
}
impl molecule::prelude::Builder for SubmitGroupsBuilder {
    type Entity = SubmitGroups;
    const NAME: &'static str = "SubmitGroupsBuilder";
    fn expected_length(&self) -> usize {
        molecule::NUMBER_SIZE * (self.0.len() + 1)
            + self
                .0
                .iter()
                .map(|inner| inner.as_slice().len())
                .sum::<usize>()
    }
    fn write<W: ::std::io::Write>(&self, writer: &mut W) -> ::std::io::Result<()> {
        let item_count = self.0.len();
        if item_count == 0 {
            writer.write_all(&molecule::pack_number(
                molecule::NUMBER_SIZE as molecule::Number,
            ))?;
        } else {
            let (total_size, offsets) = self.0.iter().fold(
                (
                    molecule::NUMBER_SIZE * (item_count + 1),
                    Vec::with_capacity(item_count),
                ),
                |(start, mut offsets), inner| {
                    offsets.push(start);
                    (start + inner.as_slice().len(), offsets)
                },
            );
            writer.write_all(&molecule::pack_number(total_size as molecule::Number))?;
            for offset in offsets.into_iter() {
                writer.write_all(&molecule::pack_number(offset as molecule::Number))?;
            }
            for inner in self.0.iter() {
                writer.write_all(inner.as_slice())?;
            }
        }
        Ok(())
    }
    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        SubmitGroups::new_unchecked(inner.into())
    }
}
pub struct SubmitGroupsIterator(SubmitGroups, usize, usize);
impl ::std::iter::Iterator for SubmitGroupsIterator {
    type Item = SubmitGroup;
    fn next(&mut self) -> Option<Self::Item> {
        if self.1 >= self.2 {
            None
        } else {
            let ret = self.0.get_unchecked(self.1);
            self.1 += 1;
            Some(ret)
        }
    }
}
impl ::std::iter::ExactSizeIterator for SubmitGroupsIterator {
    fn len(&self) -> usize {
        self.2 - self.1
    }
}
impl ::std::iter::IntoIterator for SubmitGroups {
    type Item = SubmitGroup;
    type IntoIter = SubmitGroupsIterator;
    fn into_iter(self) -> Self::IntoIter {
        let len = self.len();
        SubmitGroupsIterator(self, 0, len)
    }
}
impl<'r> SubmitGroupsReader<'r> {
    pub fn iter<'t>(&'t self) -> SubmitGroupsReaderIterator<'t, 'r> {
        SubmitGroupsReaderIterator(&self, 0, self.len())
    }
}
pub struct SubmitGroupsReaderIterator<'t, 'r>(&'t SubmitGroupsReader<'r>, usize, usize);
impl<'t: 'r, 'r> ::std::iter::Iterator for SubmitGroupsReaderIterator<'t, 'r> {
    type Item = SubmitGroupReader<'t>;
    fn next(&mut self) -> Option<Self::Item> {
        if self.1 >= self.2 {
            None
        } else {
            let ret = self.0.get_unchecked(self.1);
            self.1 += 1;
            Some(ret)
        }
    }
}
impl<'t: 'r, 'r> ::std::iter::ExactSizeIterator for SubmitGroupsReaderIterator<'t, 'r> {
    fn len(&self) -> usize {
        self.2 - self.1
    }
}
#[derive(Clone)]
pub struct MinerLock(molecule::bytes::Bytes);
impl ::std::fmt::LowerHex for MinerLock {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        use molecule::faster_hex::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()).unwrap())
    }
}
impl ::std::fmt::Debug for MinerLock {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::std::fmt::Display for MinerLock {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "args", self.args())?;
        write!(f, ", {}: {}", "message", self.message())?;
        let extra_count = self.count_extra_fields();
        if extra_count != 0 {
            write!(f, ", .. ({} fields)", extra_count)?;
        }
        write!(f, " }}")
    }
}
impl ::std::default::Default for MinerLock {
    fn default() -> Self {
        let v: Vec<u8> = vec![16, 0, 0, 0, 12, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0];
        MinerLock::new_unchecked(v.into())
    }
}
impl MinerLock {
    pub const FIELD_COUNT: usize = 2;
    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }
    pub fn field_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }
    pub fn field_offsets(&self) -> &[[u8; 4]] {
        molecule::unpack_number_vec(&self.as_slice()[molecule::NUMBER_SIZE..])
    }
    pub fn count_extra_fields(&self) -> usize {
        self.field_count() - Self::FIELD_COUNT
    }
    pub fn has_extra_fields(&self) -> bool {
        Self::FIELD_COUNT != self.field_count()
    }
    pub fn args(&self) -> Bytes {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[0][..]) as usize;
        let end = molecule::unpack_number(&offsets[1][..]) as usize;
        Bytes::new_unchecked(self.0.slice(start, end))
    }
    pub fn message(&self) -> BytesOpt {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[1][..]) as usize;
        if self.has_extra_fields() {
            let end = molecule::unpack_number(&offsets[2][..]) as usize;
            BytesOpt::new_unchecked(self.0.slice(start, end))
        } else {
            BytesOpt::new_unchecked(self.0.slice_from(start))
        }
    }
    pub fn as_reader<'r>(&'r self) -> MinerLockReader<'r> {
        MinerLockReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for MinerLock {
    type Builder = MinerLockBuilder;
    const NAME: &'static str = "MinerLock";
    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        MinerLock(data)
    }
    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }
    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }
    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        MinerLockReader::from_slice(slice).map(|reader| reader.to_entity())
    }
    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        MinerLockReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }
    fn new_builder() -> Self::Builder {
        ::std::default::Default::default()
    }
    fn as_builder(self) -> Self::Builder {
        Self::new_builder()
            .args(self.args())
            .message(self.message())
    }
}
#[derive(Clone, Copy)]
pub struct MinerLockReader<'r>(&'r [u8]);
impl<'r> ::std::fmt::LowerHex for MinerLockReader<'r> {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        use molecule::faster_hex::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()).unwrap())
    }
}
impl<'r> ::std::fmt::Debug for MinerLockReader<'r> {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::std::fmt::Display for MinerLockReader<'r> {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "args", self.args())?;
        write!(f, ", {}: {}", "message", self.message())?;
        let extra_count = self.count_extra_fields();
        if extra_count != 0 {
            write!(f, ", .. ({} fields)", extra_count)?;
        }
        write!(f, " }}")
    }
}
impl<'r> MinerLockReader<'r> {
    pub const FIELD_COUNT: usize = 2;
    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }
    pub fn field_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }
    pub fn field_offsets(&self) -> &[[u8; 4]] {
        molecule::unpack_number_vec(&self.as_slice()[molecule::NUMBER_SIZE..])
    }
    pub fn count_extra_fields(&self) -> usize {
        self.field_count() - Self::FIELD_COUNT
    }
    pub fn has_extra_fields(&self) -> bool {
        Self::FIELD_COUNT != self.field_count()
    }
    pub fn args(&self) -> BytesReader<'r> {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[0][..]) as usize;
        let end = molecule::unpack_number(&offsets[1][..]) as usize;
        BytesReader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn message(&self) -> BytesOptReader<'r> {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[1][..]) as usize;
        if self.has_extra_fields() {
            let end = molecule::unpack_number(&offsets[2][..]) as usize;
            BytesOptReader::new_unchecked(&self.as_slice()[start..end])
        } else {
            BytesOptReader::new_unchecked(&self.as_slice()[start..])
        }
    }
}
impl<'r> molecule::prelude::Reader<'r> for MinerLockReader<'r> {
    type Entity = MinerLock;
    const NAME: &'static str = "MinerLockReader";
    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().into())
    }
    fn new_unchecked(slice: &'r [u8]) -> Self {
        MinerLockReader(slice)
    }
    fn as_slice(&self) -> &'r [u8] {
        self.0
    }
    fn verify(slice: &[u8], compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len < molecule::NUMBER_SIZE {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE, slice_len);
        }
        let total_size = molecule::unpack_number(slice) as usize;
        if slice_len != total_size {
            return ve!(Self, TotalSizeNotMatch, total_size, slice_len);
        }
        if slice_len == molecule::NUMBER_SIZE && Self::FIELD_COUNT == 0 {
            return Ok(());
        }
        if slice_len < molecule::NUMBER_SIZE * 2 {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE * 2, slice_len);
        }
        let offset_first = molecule::unpack_number(&slice[molecule::NUMBER_SIZE..]) as usize;
        if offset_first % 4 != 0 || offset_first < molecule::NUMBER_SIZE * 2 {
            return ve!(Self, OffsetsNotMatch);
        }
        let field_count = offset_first / 4 - 1;
        if field_count < Self::FIELD_COUNT {
            return ve!(Self, FieldCountNotMatch, Self::FIELD_COUNT, field_count);
        } else if !compatible && field_count > Self::FIELD_COUNT {
            return ve!(Self, FieldCountNotMatch, Self::FIELD_COUNT, field_count);
        };
        let header_size = molecule::NUMBER_SIZE * (field_count + 1);
        if slice_len < header_size {
            return ve!(Self, HeaderIsBroken, header_size, slice_len);
        }
        let ptr = molecule::unpack_number_vec(&slice[molecule::NUMBER_SIZE..]);
        let mut offsets: Vec<usize> = ptr[..field_count]
            .iter()
            .map(|x| molecule::unpack_number(&x[..]) as usize)
            .collect();
        offsets.push(total_size);
        if offsets.windows(2).any(|i| i[0] > i[1]) {
            return ve!(Self, OffsetsNotMatch);
        }
        BytesReader::verify(&slice[offsets[0]..offsets[1]], compatible)?;
        BytesOptReader::verify(&slice[offsets[1]..offsets[2]], compatible)?;
        Ok(())
    }
}
#[derive(Debug, Default)]
pub struct MinerLockBuilder {
    pub(crate) args: Bytes,
    pub(crate) message: BytesOpt,
}
impl MinerLockBuilder {
    pub const FIELD_COUNT: usize = 2;
    pub fn args(mut self, v: Bytes) -> Self {
        self.args = v;
        self
    }
    pub fn message(mut self, v: BytesOpt) -> Self {
        self.message = v;
        self
    }
}
impl molecule::prelude::Builder for MinerLockBuilder {
    type Entity = MinerLock;
    const NAME: &'static str = "MinerLockBuilder";
    fn expected_length(&self) -> usize {
        molecule::NUMBER_SIZE * (Self::FIELD_COUNT + 1)
            + self.args.as_slice().len()
            + self.message.as_slice().len()
    }
    fn write<W: ::std::io::Write>(&self, writer: &mut W) -> ::std::io::Result<()> {
        let mut total_size = molecule::NUMBER_SIZE * (Self::FIELD_COUNT + 1);
        let mut offsets = Vec::with_capacity(Self::FIELD_COUNT);
        offsets.push(total_size);
        total_size += self.args.as_slice().len();
        offsets.push(total_size);
        total_size += self.message.as_slice().len();
        writer.write_all(&molecule::pack_number(total_size as molecule::Number))?;
        for offset in offsets.into_iter() {
            writer.write_all(&molecule::pack_number(offset as molecule::Number))?;
        }
        writer.write_all(self.args.as_slice())?;
        writer.write_all(self.message.as_slice())?;
        Ok(())
    }
    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        MinerLock::new_unchecked(inner.into())
    }
}
#[derive(Clone)]
pub struct Submit(molecule::bytes::Bytes);
impl ::std::fmt::LowerHex for Submit {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        use molecule::faster_hex::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()).unwrap())
    }
}
impl ::std::fmt::Debug for Submit {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::std::fmt::Display for Submit {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "miner_lock", self.miner_lock())?;
        write!(f, ", {}: {}", "groups", self.groups())?;
        let extra_count = self.count_extra_fields();
        if extra_count != 0 {
            write!(f, ", .. ({} fields)", extra_count)?;
        }
        write!(f, " }}")
    }
}
impl ::std::default::Default for Submit {
    fn default() -> Self {
        let v: Vec<u8> = vec![
            32, 0, 0, 0, 12, 0, 0, 0, 28, 0, 0, 0, 16, 0, 0, 0, 12, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0,
            0, 4, 0, 0, 0,
        ];
        Submit::new_unchecked(v.into())
    }
}
impl Submit {
    pub const FIELD_COUNT: usize = 2;
    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }
    pub fn field_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }
    pub fn field_offsets(&self) -> &[[u8; 4]] {
        molecule::unpack_number_vec(&self.as_slice()[molecule::NUMBER_SIZE..])
    }
    pub fn count_extra_fields(&self) -> usize {
        self.field_count() - Self::FIELD_COUNT
    }
    pub fn has_extra_fields(&self) -> bool {
        Self::FIELD_COUNT != self.field_count()
    }
    pub fn miner_lock(&self) -> MinerLock {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[0][..]) as usize;
        let end = molecule::unpack_number(&offsets[1][..]) as usize;
        MinerLock::new_unchecked(self.0.slice(start, end))
    }
    pub fn groups(&self) -> SubmitGroups {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[1][..]) as usize;
        if self.has_extra_fields() {
            let end = molecule::unpack_number(&offsets[2][..]) as usize;
            SubmitGroups::new_unchecked(self.0.slice(start, end))
        } else {
            SubmitGroups::new_unchecked(self.0.slice_from(start))
        }
    }
    pub fn as_reader<'r>(&'r self) -> SubmitReader<'r> {
        SubmitReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for Submit {
    type Builder = SubmitBuilder;
    const NAME: &'static str = "Submit";
    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        Submit(data)
    }
    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }
    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }
    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        SubmitReader::from_slice(slice).map(|reader| reader.to_entity())
    }
    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        SubmitReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }
    fn new_builder() -> Self::Builder {
        ::std::default::Default::default()
    }
    fn as_builder(self) -> Self::Builder {
        Self::new_builder()
            .miner_lock(self.miner_lock())
            .groups(self.groups())
    }
}
#[derive(Clone, Copy)]
pub struct SubmitReader<'r>(&'r [u8]);
impl<'r> ::std::fmt::LowerHex for SubmitReader<'r> {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        use molecule::faster_hex::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()).unwrap())
    }
}
impl<'r> ::std::fmt::Debug for SubmitReader<'r> {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::std::fmt::Display for SubmitReader<'r> {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "miner_lock", self.miner_lock())?;
        write!(f, ", {}: {}", "groups", self.groups())?;
        let extra_count = self.count_extra_fields();
        if extra_count != 0 {
            write!(f, ", .. ({} fields)", extra_count)?;
        }
        write!(f, " }}")
    }
}
impl<'r> SubmitReader<'r> {
    pub const FIELD_COUNT: usize = 2;
    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }
    pub fn field_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }
    pub fn field_offsets(&self) -> &[[u8; 4]] {
        molecule::unpack_number_vec(&self.as_slice()[molecule::NUMBER_SIZE..])
    }
    pub fn count_extra_fields(&self) -> usize {
        self.field_count() - Self::FIELD_COUNT
    }
    pub fn has_extra_fields(&self) -> bool {
        Self::FIELD_COUNT != self.field_count()
    }
    pub fn miner_lock(&self) -> MinerLockReader<'r> {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[0][..]) as usize;
        let end = molecule::unpack_number(&offsets[1][..]) as usize;
        MinerLockReader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn groups(&self) -> SubmitGroupsReader<'r> {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[1][..]) as usize;
        if self.has_extra_fields() {
            let end = molecule::unpack_number(&offsets[2][..]) as usize;
            SubmitGroupsReader::new_unchecked(&self.as_slice()[start..end])
        } else {
            SubmitGroupsReader::new_unchecked(&self.as_slice()[start..])
        }
    }
}
impl<'r> molecule::prelude::Reader<'r> for SubmitReader<'r> {
    type Entity = Submit;
    const NAME: &'static str = "SubmitReader";
    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().into())
    }
    fn new_unchecked(slice: &'r [u8]) -> Self {
        SubmitReader(slice)
    }
    fn as_slice(&self) -> &'r [u8] {
        self.0
    }
    fn verify(slice: &[u8], compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len < molecule::NUMBER_SIZE {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE, slice_len);
        }
        let total_size = molecule::unpack_number(slice) as usize;
        if slice_len != total_size {
            return ve!(Self, TotalSizeNotMatch, total_size, slice_len);
        }
        if slice_len == molecule::NUMBER_SIZE && Self::FIELD_COUNT == 0 {
            return Ok(());
        }
        if slice_len < molecule::NUMBER_SIZE * 2 {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE * 2, slice_len);
        }
        let offset_first = molecule::unpack_number(&slice[molecule::NUMBER_SIZE..]) as usize;
        if offset_first % 4 != 0 || offset_first < molecule::NUMBER_SIZE * 2 {
            return ve!(Self, OffsetsNotMatch);
        }
        let field_count = offset_first / 4 - 1;
        if field_count < Self::FIELD_COUNT {
            return ve!(Self, FieldCountNotMatch, Self::FIELD_COUNT, field_count);
        } else if !compatible && field_count > Self::FIELD_COUNT {
            return ve!(Self, FieldCountNotMatch, Self::FIELD_COUNT, field_count);
        };
        let header_size = molecule::NUMBER_SIZE * (field_count + 1);
        if slice_len < header_size {
            return ve!(Self, HeaderIsBroken, header_size, slice_len);
        }
        let ptr = molecule::unpack_number_vec(&slice[molecule::NUMBER_SIZE..]);
        let mut offsets: Vec<usize> = ptr[..field_count]
            .iter()
            .map(|x| molecule::unpack_number(&x[..]) as usize)
            .collect();
        offsets.push(total_size);
        if offsets.windows(2).any(|i| i[0] > i[1]) {
            return ve!(Self, OffsetsNotMatch);
        }
        MinerLockReader::verify(&slice[offsets[0]..offsets[1]], compatible)?;
        SubmitGroupsReader::verify(&slice[offsets[1]..offsets[2]], compatible)?;
        Ok(())
    }
}
#[derive(Debug, Default)]
pub struct SubmitBuilder {
    pub(crate) miner_lock: MinerLock,
    pub(crate) groups: SubmitGroups,
}
impl SubmitBuilder {
    pub const FIELD_COUNT: usize = 2;
    pub fn miner_lock(mut self, v: MinerLock) -> Self {
        self.miner_lock = v;
        self
    }
    pub fn groups(mut self, v: SubmitGroups) -> Self {
        self.groups = v;
        self
    }
}
impl molecule::prelude::Builder for SubmitBuilder {
    type Entity = Submit;
    const NAME: &'static str = "SubmitBuilder";
    fn expected_length(&self) -> usize {
        molecule::NUMBER_SIZE * (Self::FIELD_COUNT + 1)
            + self.miner_lock.as_slice().len()
            + self.groups.as_slice().len()
    }
    fn write<W: ::std::io::Write>(&self, writer: &mut W) -> ::std::io::Result<()> {
        let mut total_size = molecule::NUMBER_SIZE * (Self::FIELD_COUNT + 1);
        let mut offsets = Vec::with_capacity(Self::FIELD_COUNT);
        offsets.push(total_size);
        total_size += self.miner_lock.as_slice().len();
        offsets.push(total_size);
        total_size += self.groups.as_slice().len();
        writer.write_all(&molecule::pack_number(total_size as molecule::Number))?;
        for offset in offsets.into_iter() {
            writer.write_all(&molecule::pack_number(offset as molecule::Number))?;
        }
        writer.write_all(self.miner_lock.as_slice())?;
        writer.write_all(self.groups.as_slice())?;
        Ok(())
    }
    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        Submit::new_unchecked(inner.into())
    }
}
