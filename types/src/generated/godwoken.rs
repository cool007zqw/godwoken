// Generated by Molecule 0.4.2

use super::blockchain::*;
use molecule::prelude::*;
#[derive(Clone)]
pub struct Byte20(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for Byte20 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for Byte20 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for Byte20 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        let raw_data = hex_string(&self.raw_data());
        write!(f, "{}(0x{})", Self::NAME, raw_data)
    }
}
impl ::core::default::Default for Byte20 {
    fn default() -> Self {
        let v: Vec<u8> = vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
        Byte20::new_unchecked(v.into())
    }
}
impl Byte20 {
    pub const TOTAL_SIZE: usize = 20;
    pub const ITEM_SIZE: usize = 1;
    pub const ITEM_COUNT: usize = 20;
    pub fn nth0(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(0, 1))
    }
    pub fn nth1(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(1, 2))
    }
    pub fn nth2(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(2, 3))
    }
    pub fn nth3(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(3, 4))
    }
    pub fn nth4(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(4, 5))
    }
    pub fn nth5(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(5, 6))
    }
    pub fn nth6(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(6, 7))
    }
    pub fn nth7(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(7, 8))
    }
    pub fn nth8(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(8, 9))
    }
    pub fn nth9(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(9, 10))
    }
    pub fn nth10(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(10, 11))
    }
    pub fn nth11(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(11, 12))
    }
    pub fn nth12(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(12, 13))
    }
    pub fn nth13(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(13, 14))
    }
    pub fn nth14(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(14, 15))
    }
    pub fn nth15(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(15, 16))
    }
    pub fn nth16(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(16, 17))
    }
    pub fn nth17(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(17, 18))
    }
    pub fn nth18(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(18, 19))
    }
    pub fn nth19(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(19, 20))
    }
    pub fn raw_data(&self) -> molecule::bytes::Bytes {
        self.as_bytes()
    }
    pub fn as_reader<'r>(&'r self) -> Byte20Reader<'r> {
        Byte20Reader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for Byte20 {
    type Builder = Byte20Builder;
    const NAME: &'static str = "Byte20";
    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        Byte20(data)
    }
    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }
    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }
    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        Byte20Reader::from_slice(slice).map(|reader| reader.to_entity())
    }
    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        Byte20Reader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }
    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }
    fn as_builder(self) -> Self::Builder {
        Self::new_builder().set([
            self.nth0(),
            self.nth1(),
            self.nth2(),
            self.nth3(),
            self.nth4(),
            self.nth5(),
            self.nth6(),
            self.nth7(),
            self.nth8(),
            self.nth9(),
            self.nth10(),
            self.nth11(),
            self.nth12(),
            self.nth13(),
            self.nth14(),
            self.nth15(),
            self.nth16(),
            self.nth17(),
            self.nth18(),
            self.nth19(),
        ])
    }
}
#[derive(Clone, Copy)]
pub struct Byte20Reader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for Byte20Reader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for Byte20Reader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for Byte20Reader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        let raw_data = hex_string(&self.raw_data());
        write!(f, "{}(0x{})", Self::NAME, raw_data)
    }
}
impl<'r> Byte20Reader<'r> {
    pub const TOTAL_SIZE: usize = 20;
    pub const ITEM_SIZE: usize = 1;
    pub const ITEM_COUNT: usize = 20;
    pub fn nth0(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[0..1])
    }
    pub fn nth1(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[1..2])
    }
    pub fn nth2(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[2..3])
    }
    pub fn nth3(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[3..4])
    }
    pub fn nth4(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[4..5])
    }
    pub fn nth5(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[5..6])
    }
    pub fn nth6(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[6..7])
    }
    pub fn nth7(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[7..8])
    }
    pub fn nth8(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[8..9])
    }
    pub fn nth9(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[9..10])
    }
    pub fn nth10(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[10..11])
    }
    pub fn nth11(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[11..12])
    }
    pub fn nth12(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[12..13])
    }
    pub fn nth13(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[13..14])
    }
    pub fn nth14(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[14..15])
    }
    pub fn nth15(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[15..16])
    }
    pub fn nth16(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[16..17])
    }
    pub fn nth17(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[17..18])
    }
    pub fn nth18(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[18..19])
    }
    pub fn nth19(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[19..20])
    }
    pub fn raw_data(&self) -> &'r [u8] {
        self.as_slice()
    }
}
impl<'r> molecule::prelude::Reader<'r> for Byte20Reader<'r> {
    type Entity = Byte20;
    const NAME: &'static str = "Byte20Reader";
    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().into())
    }
    fn new_unchecked(slice: &'r [u8]) -> Self {
        Byte20Reader(slice)
    }
    fn as_slice(&self) -> &'r [u8] {
        self.0
    }
    fn verify(slice: &[u8], _compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len != Self::TOTAL_SIZE {
            return ve!(Self, TotalSizeNotMatch, Self::TOTAL_SIZE, slice_len);
        }
        Ok(())
    }
}
pub struct Byte20Builder(pub(crate) [Byte; 20]);
impl ::core::fmt::Debug for Byte20Builder {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:?})", Self::NAME, &self.0[..])
    }
}
impl ::core::default::Default for Byte20Builder {
    fn default() -> Self {
        Byte20Builder([
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
        ])
    }
}
impl Byte20Builder {
    pub const TOTAL_SIZE: usize = 20;
    pub const ITEM_SIZE: usize = 1;
    pub const ITEM_COUNT: usize = 20;
    pub fn set(mut self, v: [Byte; 20]) -> Self {
        self.0 = v;
        self
    }
    pub fn nth0(mut self, v: Byte) -> Self {
        self.0[0] = v;
        self
    }
    pub fn nth1(mut self, v: Byte) -> Self {
        self.0[1] = v;
        self
    }
    pub fn nth2(mut self, v: Byte) -> Self {
        self.0[2] = v;
        self
    }
    pub fn nth3(mut self, v: Byte) -> Self {
        self.0[3] = v;
        self
    }
    pub fn nth4(mut self, v: Byte) -> Self {
        self.0[4] = v;
        self
    }
    pub fn nth5(mut self, v: Byte) -> Self {
        self.0[5] = v;
        self
    }
    pub fn nth6(mut self, v: Byte) -> Self {
        self.0[6] = v;
        self
    }
    pub fn nth7(mut self, v: Byte) -> Self {
        self.0[7] = v;
        self
    }
    pub fn nth8(mut self, v: Byte) -> Self {
        self.0[8] = v;
        self
    }
    pub fn nth9(mut self, v: Byte) -> Self {
        self.0[9] = v;
        self
    }
    pub fn nth10(mut self, v: Byte) -> Self {
        self.0[10] = v;
        self
    }
    pub fn nth11(mut self, v: Byte) -> Self {
        self.0[11] = v;
        self
    }
    pub fn nth12(mut self, v: Byte) -> Self {
        self.0[12] = v;
        self
    }
    pub fn nth13(mut self, v: Byte) -> Self {
        self.0[13] = v;
        self
    }
    pub fn nth14(mut self, v: Byte) -> Self {
        self.0[14] = v;
        self
    }
    pub fn nth15(mut self, v: Byte) -> Self {
        self.0[15] = v;
        self
    }
    pub fn nth16(mut self, v: Byte) -> Self {
        self.0[16] = v;
        self
    }
    pub fn nth17(mut self, v: Byte) -> Self {
        self.0[17] = v;
        self
    }
    pub fn nth18(mut self, v: Byte) -> Self {
        self.0[18] = v;
        self
    }
    pub fn nth19(mut self, v: Byte) -> Self {
        self.0[19] = v;
        self
    }
}
impl molecule::prelude::Builder for Byte20Builder {
    type Entity = Byte20;
    const NAME: &'static str = "Byte20Builder";
    fn expected_length(&self) -> usize {
        Self::TOTAL_SIZE
    }
    fn write<W: ::molecule::io::Write>(&self, writer: &mut W) -> ::molecule::io::Result<()> {
        writer.write_all(self.0[0].as_slice())?;
        writer.write_all(self.0[1].as_slice())?;
        writer.write_all(self.0[2].as_slice())?;
        writer.write_all(self.0[3].as_slice())?;
        writer.write_all(self.0[4].as_slice())?;
        writer.write_all(self.0[5].as_slice())?;
        writer.write_all(self.0[6].as_slice())?;
        writer.write_all(self.0[7].as_slice())?;
        writer.write_all(self.0[8].as_slice())?;
        writer.write_all(self.0[9].as_slice())?;
        writer.write_all(self.0[10].as_slice())?;
        writer.write_all(self.0[11].as_slice())?;
        writer.write_all(self.0[12].as_slice())?;
        writer.write_all(self.0[13].as_slice())?;
        writer.write_all(self.0[14].as_slice())?;
        writer.write_all(self.0[15].as_slice())?;
        writer.write_all(self.0[16].as_slice())?;
        writer.write_all(self.0[17].as_slice())?;
        writer.write_all(self.0[18].as_slice())?;
        writer.write_all(self.0[19].as_slice())?;
        Ok(())
    }
    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        Byte20::new_unchecked(inner.into())
    }
}
#[derive(Clone)]
pub struct Byte65(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for Byte65 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for Byte65 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for Byte65 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        let raw_data = hex_string(&self.raw_data());
        write!(f, "{}(0x{})", Self::NAME, raw_data)
    }
}
impl ::core::default::Default for Byte65 {
    fn default() -> Self {
        let v: Vec<u8> = vec![
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0,
        ];
        Byte65::new_unchecked(v.into())
    }
}
impl Byte65 {
    pub const TOTAL_SIZE: usize = 65;
    pub const ITEM_SIZE: usize = 1;
    pub const ITEM_COUNT: usize = 65;
    pub fn nth0(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(0, 1))
    }
    pub fn nth1(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(1, 2))
    }
    pub fn nth2(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(2, 3))
    }
    pub fn nth3(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(3, 4))
    }
    pub fn nth4(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(4, 5))
    }
    pub fn nth5(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(5, 6))
    }
    pub fn nth6(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(6, 7))
    }
    pub fn nth7(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(7, 8))
    }
    pub fn nth8(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(8, 9))
    }
    pub fn nth9(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(9, 10))
    }
    pub fn nth10(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(10, 11))
    }
    pub fn nth11(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(11, 12))
    }
    pub fn nth12(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(12, 13))
    }
    pub fn nth13(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(13, 14))
    }
    pub fn nth14(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(14, 15))
    }
    pub fn nth15(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(15, 16))
    }
    pub fn nth16(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(16, 17))
    }
    pub fn nth17(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(17, 18))
    }
    pub fn nth18(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(18, 19))
    }
    pub fn nth19(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(19, 20))
    }
    pub fn nth20(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(20, 21))
    }
    pub fn nth21(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(21, 22))
    }
    pub fn nth22(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(22, 23))
    }
    pub fn nth23(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(23, 24))
    }
    pub fn nth24(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(24, 25))
    }
    pub fn nth25(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(25, 26))
    }
    pub fn nth26(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(26, 27))
    }
    pub fn nth27(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(27, 28))
    }
    pub fn nth28(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(28, 29))
    }
    pub fn nth29(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(29, 30))
    }
    pub fn nth30(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(30, 31))
    }
    pub fn nth31(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(31, 32))
    }
    pub fn nth32(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(32, 33))
    }
    pub fn nth33(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(33, 34))
    }
    pub fn nth34(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(34, 35))
    }
    pub fn nth35(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(35, 36))
    }
    pub fn nth36(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(36, 37))
    }
    pub fn nth37(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(37, 38))
    }
    pub fn nth38(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(38, 39))
    }
    pub fn nth39(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(39, 40))
    }
    pub fn nth40(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(40, 41))
    }
    pub fn nth41(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(41, 42))
    }
    pub fn nth42(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(42, 43))
    }
    pub fn nth43(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(43, 44))
    }
    pub fn nth44(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(44, 45))
    }
    pub fn nth45(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(45, 46))
    }
    pub fn nth46(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(46, 47))
    }
    pub fn nth47(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(47, 48))
    }
    pub fn nth48(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(48, 49))
    }
    pub fn nth49(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(49, 50))
    }
    pub fn nth50(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(50, 51))
    }
    pub fn nth51(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(51, 52))
    }
    pub fn nth52(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(52, 53))
    }
    pub fn nth53(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(53, 54))
    }
    pub fn nth54(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(54, 55))
    }
    pub fn nth55(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(55, 56))
    }
    pub fn nth56(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(56, 57))
    }
    pub fn nth57(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(57, 58))
    }
    pub fn nth58(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(58, 59))
    }
    pub fn nth59(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(59, 60))
    }
    pub fn nth60(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(60, 61))
    }
    pub fn nth61(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(61, 62))
    }
    pub fn nth62(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(62, 63))
    }
    pub fn nth63(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(63, 64))
    }
    pub fn nth64(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(64, 65))
    }
    pub fn raw_data(&self) -> molecule::bytes::Bytes {
        self.as_bytes()
    }
    pub fn as_reader<'r>(&'r self) -> Byte65Reader<'r> {
        Byte65Reader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for Byte65 {
    type Builder = Byte65Builder;
    const NAME: &'static str = "Byte65";
    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        Byte65(data)
    }
    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }
    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }
    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        Byte65Reader::from_slice(slice).map(|reader| reader.to_entity())
    }
    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        Byte65Reader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }
    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }
    fn as_builder(self) -> Self::Builder {
        Self::new_builder().set([
            self.nth0(),
            self.nth1(),
            self.nth2(),
            self.nth3(),
            self.nth4(),
            self.nth5(),
            self.nth6(),
            self.nth7(),
            self.nth8(),
            self.nth9(),
            self.nth10(),
            self.nth11(),
            self.nth12(),
            self.nth13(),
            self.nth14(),
            self.nth15(),
            self.nth16(),
            self.nth17(),
            self.nth18(),
            self.nth19(),
            self.nth20(),
            self.nth21(),
            self.nth22(),
            self.nth23(),
            self.nth24(),
            self.nth25(),
            self.nth26(),
            self.nth27(),
            self.nth28(),
            self.nth29(),
            self.nth30(),
            self.nth31(),
            self.nth32(),
            self.nth33(),
            self.nth34(),
            self.nth35(),
            self.nth36(),
            self.nth37(),
            self.nth38(),
            self.nth39(),
            self.nth40(),
            self.nth41(),
            self.nth42(),
            self.nth43(),
            self.nth44(),
            self.nth45(),
            self.nth46(),
            self.nth47(),
            self.nth48(),
            self.nth49(),
            self.nth50(),
            self.nth51(),
            self.nth52(),
            self.nth53(),
            self.nth54(),
            self.nth55(),
            self.nth56(),
            self.nth57(),
            self.nth58(),
            self.nth59(),
            self.nth60(),
            self.nth61(),
            self.nth62(),
            self.nth63(),
            self.nth64(),
        ])
    }
}
#[derive(Clone, Copy)]
pub struct Byte65Reader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for Byte65Reader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for Byte65Reader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for Byte65Reader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        let raw_data = hex_string(&self.raw_data());
        write!(f, "{}(0x{})", Self::NAME, raw_data)
    }
}
impl<'r> Byte65Reader<'r> {
    pub const TOTAL_SIZE: usize = 65;
    pub const ITEM_SIZE: usize = 1;
    pub const ITEM_COUNT: usize = 65;
    pub fn nth0(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[0..1])
    }
    pub fn nth1(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[1..2])
    }
    pub fn nth2(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[2..3])
    }
    pub fn nth3(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[3..4])
    }
    pub fn nth4(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[4..5])
    }
    pub fn nth5(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[5..6])
    }
    pub fn nth6(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[6..7])
    }
    pub fn nth7(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[7..8])
    }
    pub fn nth8(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[8..9])
    }
    pub fn nth9(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[9..10])
    }
    pub fn nth10(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[10..11])
    }
    pub fn nth11(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[11..12])
    }
    pub fn nth12(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[12..13])
    }
    pub fn nth13(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[13..14])
    }
    pub fn nth14(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[14..15])
    }
    pub fn nth15(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[15..16])
    }
    pub fn nth16(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[16..17])
    }
    pub fn nth17(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[17..18])
    }
    pub fn nth18(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[18..19])
    }
    pub fn nth19(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[19..20])
    }
    pub fn nth20(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[20..21])
    }
    pub fn nth21(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[21..22])
    }
    pub fn nth22(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[22..23])
    }
    pub fn nth23(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[23..24])
    }
    pub fn nth24(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[24..25])
    }
    pub fn nth25(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[25..26])
    }
    pub fn nth26(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[26..27])
    }
    pub fn nth27(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[27..28])
    }
    pub fn nth28(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[28..29])
    }
    pub fn nth29(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[29..30])
    }
    pub fn nth30(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[30..31])
    }
    pub fn nth31(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[31..32])
    }
    pub fn nth32(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[32..33])
    }
    pub fn nth33(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[33..34])
    }
    pub fn nth34(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[34..35])
    }
    pub fn nth35(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[35..36])
    }
    pub fn nth36(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[36..37])
    }
    pub fn nth37(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[37..38])
    }
    pub fn nth38(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[38..39])
    }
    pub fn nth39(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[39..40])
    }
    pub fn nth40(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[40..41])
    }
    pub fn nth41(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[41..42])
    }
    pub fn nth42(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[42..43])
    }
    pub fn nth43(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[43..44])
    }
    pub fn nth44(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[44..45])
    }
    pub fn nth45(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[45..46])
    }
    pub fn nth46(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[46..47])
    }
    pub fn nth47(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[47..48])
    }
    pub fn nth48(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[48..49])
    }
    pub fn nth49(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[49..50])
    }
    pub fn nth50(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[50..51])
    }
    pub fn nth51(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[51..52])
    }
    pub fn nth52(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[52..53])
    }
    pub fn nth53(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[53..54])
    }
    pub fn nth54(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[54..55])
    }
    pub fn nth55(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[55..56])
    }
    pub fn nth56(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[56..57])
    }
    pub fn nth57(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[57..58])
    }
    pub fn nth58(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[58..59])
    }
    pub fn nth59(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[59..60])
    }
    pub fn nth60(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[60..61])
    }
    pub fn nth61(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[61..62])
    }
    pub fn nth62(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[62..63])
    }
    pub fn nth63(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[63..64])
    }
    pub fn nth64(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[64..65])
    }
    pub fn raw_data(&self) -> &'r [u8] {
        self.as_slice()
    }
}
impl<'r> molecule::prelude::Reader<'r> for Byte65Reader<'r> {
    type Entity = Byte65;
    const NAME: &'static str = "Byte65Reader";
    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().into())
    }
    fn new_unchecked(slice: &'r [u8]) -> Self {
        Byte65Reader(slice)
    }
    fn as_slice(&self) -> &'r [u8] {
        self.0
    }
    fn verify(slice: &[u8], _compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len != Self::TOTAL_SIZE {
            return ve!(Self, TotalSizeNotMatch, Self::TOTAL_SIZE, slice_len);
        }
        Ok(())
    }
}
pub struct Byte65Builder(pub(crate) [Byte; 65]);
impl ::core::fmt::Debug for Byte65Builder {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:?})", Self::NAME, &self.0[..])
    }
}
impl ::core::default::Default for Byte65Builder {
    fn default() -> Self {
        Byte65Builder([
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
            Byte::default(),
        ])
    }
}
impl Byte65Builder {
    pub const TOTAL_SIZE: usize = 65;
    pub const ITEM_SIZE: usize = 1;
    pub const ITEM_COUNT: usize = 65;
    pub fn set(mut self, v: [Byte; 65]) -> Self {
        self.0 = v;
        self
    }
    pub fn nth0(mut self, v: Byte) -> Self {
        self.0[0] = v;
        self
    }
    pub fn nth1(mut self, v: Byte) -> Self {
        self.0[1] = v;
        self
    }
    pub fn nth2(mut self, v: Byte) -> Self {
        self.0[2] = v;
        self
    }
    pub fn nth3(mut self, v: Byte) -> Self {
        self.0[3] = v;
        self
    }
    pub fn nth4(mut self, v: Byte) -> Self {
        self.0[4] = v;
        self
    }
    pub fn nth5(mut self, v: Byte) -> Self {
        self.0[5] = v;
        self
    }
    pub fn nth6(mut self, v: Byte) -> Self {
        self.0[6] = v;
        self
    }
    pub fn nth7(mut self, v: Byte) -> Self {
        self.0[7] = v;
        self
    }
    pub fn nth8(mut self, v: Byte) -> Self {
        self.0[8] = v;
        self
    }
    pub fn nth9(mut self, v: Byte) -> Self {
        self.0[9] = v;
        self
    }
    pub fn nth10(mut self, v: Byte) -> Self {
        self.0[10] = v;
        self
    }
    pub fn nth11(mut self, v: Byte) -> Self {
        self.0[11] = v;
        self
    }
    pub fn nth12(mut self, v: Byte) -> Self {
        self.0[12] = v;
        self
    }
    pub fn nth13(mut self, v: Byte) -> Self {
        self.0[13] = v;
        self
    }
    pub fn nth14(mut self, v: Byte) -> Self {
        self.0[14] = v;
        self
    }
    pub fn nth15(mut self, v: Byte) -> Self {
        self.0[15] = v;
        self
    }
    pub fn nth16(mut self, v: Byte) -> Self {
        self.0[16] = v;
        self
    }
    pub fn nth17(mut self, v: Byte) -> Self {
        self.0[17] = v;
        self
    }
    pub fn nth18(mut self, v: Byte) -> Self {
        self.0[18] = v;
        self
    }
    pub fn nth19(mut self, v: Byte) -> Self {
        self.0[19] = v;
        self
    }
    pub fn nth20(mut self, v: Byte) -> Self {
        self.0[20] = v;
        self
    }
    pub fn nth21(mut self, v: Byte) -> Self {
        self.0[21] = v;
        self
    }
    pub fn nth22(mut self, v: Byte) -> Self {
        self.0[22] = v;
        self
    }
    pub fn nth23(mut self, v: Byte) -> Self {
        self.0[23] = v;
        self
    }
    pub fn nth24(mut self, v: Byte) -> Self {
        self.0[24] = v;
        self
    }
    pub fn nth25(mut self, v: Byte) -> Self {
        self.0[25] = v;
        self
    }
    pub fn nth26(mut self, v: Byte) -> Self {
        self.0[26] = v;
        self
    }
    pub fn nth27(mut self, v: Byte) -> Self {
        self.0[27] = v;
        self
    }
    pub fn nth28(mut self, v: Byte) -> Self {
        self.0[28] = v;
        self
    }
    pub fn nth29(mut self, v: Byte) -> Self {
        self.0[29] = v;
        self
    }
    pub fn nth30(mut self, v: Byte) -> Self {
        self.0[30] = v;
        self
    }
    pub fn nth31(mut self, v: Byte) -> Self {
        self.0[31] = v;
        self
    }
    pub fn nth32(mut self, v: Byte) -> Self {
        self.0[32] = v;
        self
    }
    pub fn nth33(mut self, v: Byte) -> Self {
        self.0[33] = v;
        self
    }
    pub fn nth34(mut self, v: Byte) -> Self {
        self.0[34] = v;
        self
    }
    pub fn nth35(mut self, v: Byte) -> Self {
        self.0[35] = v;
        self
    }
    pub fn nth36(mut self, v: Byte) -> Self {
        self.0[36] = v;
        self
    }
    pub fn nth37(mut self, v: Byte) -> Self {
        self.0[37] = v;
        self
    }
    pub fn nth38(mut self, v: Byte) -> Self {
        self.0[38] = v;
        self
    }
    pub fn nth39(mut self, v: Byte) -> Self {
        self.0[39] = v;
        self
    }
    pub fn nth40(mut self, v: Byte) -> Self {
        self.0[40] = v;
        self
    }
    pub fn nth41(mut self, v: Byte) -> Self {
        self.0[41] = v;
        self
    }
    pub fn nth42(mut self, v: Byte) -> Self {
        self.0[42] = v;
        self
    }
    pub fn nth43(mut self, v: Byte) -> Self {
        self.0[43] = v;
        self
    }
    pub fn nth44(mut self, v: Byte) -> Self {
        self.0[44] = v;
        self
    }
    pub fn nth45(mut self, v: Byte) -> Self {
        self.0[45] = v;
        self
    }
    pub fn nth46(mut self, v: Byte) -> Self {
        self.0[46] = v;
        self
    }
    pub fn nth47(mut self, v: Byte) -> Self {
        self.0[47] = v;
        self
    }
    pub fn nth48(mut self, v: Byte) -> Self {
        self.0[48] = v;
        self
    }
    pub fn nth49(mut self, v: Byte) -> Self {
        self.0[49] = v;
        self
    }
    pub fn nth50(mut self, v: Byte) -> Self {
        self.0[50] = v;
        self
    }
    pub fn nth51(mut self, v: Byte) -> Self {
        self.0[51] = v;
        self
    }
    pub fn nth52(mut self, v: Byte) -> Self {
        self.0[52] = v;
        self
    }
    pub fn nth53(mut self, v: Byte) -> Self {
        self.0[53] = v;
        self
    }
    pub fn nth54(mut self, v: Byte) -> Self {
        self.0[54] = v;
        self
    }
    pub fn nth55(mut self, v: Byte) -> Self {
        self.0[55] = v;
        self
    }
    pub fn nth56(mut self, v: Byte) -> Self {
        self.0[56] = v;
        self
    }
    pub fn nth57(mut self, v: Byte) -> Self {
        self.0[57] = v;
        self
    }
    pub fn nth58(mut self, v: Byte) -> Self {
        self.0[58] = v;
        self
    }
    pub fn nth59(mut self, v: Byte) -> Self {
        self.0[59] = v;
        self
    }
    pub fn nth60(mut self, v: Byte) -> Self {
        self.0[60] = v;
        self
    }
    pub fn nth61(mut self, v: Byte) -> Self {
        self.0[61] = v;
        self
    }
    pub fn nth62(mut self, v: Byte) -> Self {
        self.0[62] = v;
        self
    }
    pub fn nth63(mut self, v: Byte) -> Self {
        self.0[63] = v;
        self
    }
    pub fn nth64(mut self, v: Byte) -> Self {
        self.0[64] = v;
        self
    }
}
impl molecule::prelude::Builder for Byte65Builder {
    type Entity = Byte65;
    const NAME: &'static str = "Byte65Builder";
    fn expected_length(&self) -> usize {
        Self::TOTAL_SIZE
    }
    fn write<W: ::molecule::io::Write>(&self, writer: &mut W) -> ::molecule::io::Result<()> {
        writer.write_all(self.0[0].as_slice())?;
        writer.write_all(self.0[1].as_slice())?;
        writer.write_all(self.0[2].as_slice())?;
        writer.write_all(self.0[3].as_slice())?;
        writer.write_all(self.0[4].as_slice())?;
        writer.write_all(self.0[5].as_slice())?;
        writer.write_all(self.0[6].as_slice())?;
        writer.write_all(self.0[7].as_slice())?;
        writer.write_all(self.0[8].as_slice())?;
        writer.write_all(self.0[9].as_slice())?;
        writer.write_all(self.0[10].as_slice())?;
        writer.write_all(self.0[11].as_slice())?;
        writer.write_all(self.0[12].as_slice())?;
        writer.write_all(self.0[13].as_slice())?;
        writer.write_all(self.0[14].as_slice())?;
        writer.write_all(self.0[15].as_slice())?;
        writer.write_all(self.0[16].as_slice())?;
        writer.write_all(self.0[17].as_slice())?;
        writer.write_all(self.0[18].as_slice())?;
        writer.write_all(self.0[19].as_slice())?;
        writer.write_all(self.0[20].as_slice())?;
        writer.write_all(self.0[21].as_slice())?;
        writer.write_all(self.0[22].as_slice())?;
        writer.write_all(self.0[23].as_slice())?;
        writer.write_all(self.0[24].as_slice())?;
        writer.write_all(self.0[25].as_slice())?;
        writer.write_all(self.0[26].as_slice())?;
        writer.write_all(self.0[27].as_slice())?;
        writer.write_all(self.0[28].as_slice())?;
        writer.write_all(self.0[29].as_slice())?;
        writer.write_all(self.0[30].as_slice())?;
        writer.write_all(self.0[31].as_slice())?;
        writer.write_all(self.0[32].as_slice())?;
        writer.write_all(self.0[33].as_slice())?;
        writer.write_all(self.0[34].as_slice())?;
        writer.write_all(self.0[35].as_slice())?;
        writer.write_all(self.0[36].as_slice())?;
        writer.write_all(self.0[37].as_slice())?;
        writer.write_all(self.0[38].as_slice())?;
        writer.write_all(self.0[39].as_slice())?;
        writer.write_all(self.0[40].as_slice())?;
        writer.write_all(self.0[41].as_slice())?;
        writer.write_all(self.0[42].as_slice())?;
        writer.write_all(self.0[43].as_slice())?;
        writer.write_all(self.0[44].as_slice())?;
        writer.write_all(self.0[45].as_slice())?;
        writer.write_all(self.0[46].as_slice())?;
        writer.write_all(self.0[47].as_slice())?;
        writer.write_all(self.0[48].as_slice())?;
        writer.write_all(self.0[49].as_slice())?;
        writer.write_all(self.0[50].as_slice())?;
        writer.write_all(self.0[51].as_slice())?;
        writer.write_all(self.0[52].as_slice())?;
        writer.write_all(self.0[53].as_slice())?;
        writer.write_all(self.0[54].as_slice())?;
        writer.write_all(self.0[55].as_slice())?;
        writer.write_all(self.0[56].as_slice())?;
        writer.write_all(self.0[57].as_slice())?;
        writer.write_all(self.0[58].as_slice())?;
        writer.write_all(self.0[59].as_slice())?;
        writer.write_all(self.0[60].as_slice())?;
        writer.write_all(self.0[61].as_slice())?;
        writer.write_all(self.0[62].as_slice())?;
        writer.write_all(self.0[63].as_slice())?;
        writer.write_all(self.0[64].as_slice())?;
        Ok(())
    }
    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        Byte65::new_unchecked(inner.into())
    }
}
#[derive(Clone)]
pub struct GlobalState(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for GlobalState {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for GlobalState {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for GlobalState {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "account_root", self.account_root())?;
        write!(f, ", {}: {}", "block_root", self.block_root())?;
        write!(f, ", {}: {}", "account_count", self.account_count())?;
        write!(f, ", {}: {}", "block_count", self.block_count())?;
        write!(f, " }}")
    }
}
impl ::core::default::Default for GlobalState {
    fn default() -> Self {
        let v: Vec<u8> = vec![
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ];
        GlobalState::new_unchecked(v.into())
    }
}
impl GlobalState {
    pub const TOTAL_SIZE: usize = 80;
    pub const FIELD_SIZE: [usize; 4] = [32, 32, 8, 8];
    pub const FIELD_COUNT: usize = 4;
    pub fn account_root(&self) -> Byte32 {
        Byte32::new_unchecked(self.0.slice(0, 32))
    }
    pub fn block_root(&self) -> Byte32 {
        Byte32::new_unchecked(self.0.slice(32, 64))
    }
    pub fn account_count(&self) -> Uint64 {
        Uint64::new_unchecked(self.0.slice(64, 72))
    }
    pub fn block_count(&self) -> Uint64 {
        Uint64::new_unchecked(self.0.slice(72, 80))
    }
    pub fn as_reader<'r>(&'r self) -> GlobalStateReader<'r> {
        GlobalStateReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for GlobalState {
    type Builder = GlobalStateBuilder;
    const NAME: &'static str = "GlobalState";
    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        GlobalState(data)
    }
    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }
    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }
    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        GlobalStateReader::from_slice(slice).map(|reader| reader.to_entity())
    }
    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        GlobalStateReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }
    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }
    fn as_builder(self) -> Self::Builder {
        Self::new_builder()
            .account_root(self.account_root())
            .block_root(self.block_root())
            .account_count(self.account_count())
            .block_count(self.block_count())
    }
}
#[derive(Clone, Copy)]
pub struct GlobalStateReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for GlobalStateReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for GlobalStateReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for GlobalStateReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "account_root", self.account_root())?;
        write!(f, ", {}: {}", "block_root", self.block_root())?;
        write!(f, ", {}: {}", "account_count", self.account_count())?;
        write!(f, ", {}: {}", "block_count", self.block_count())?;
        write!(f, " }}")
    }
}
impl<'r> GlobalStateReader<'r> {
    pub const TOTAL_SIZE: usize = 80;
    pub const FIELD_SIZE: [usize; 4] = [32, 32, 8, 8];
    pub const FIELD_COUNT: usize = 4;
    pub fn account_root(&self) -> Byte32Reader<'r> {
        Byte32Reader::new_unchecked(&self.as_slice()[0..32])
    }
    pub fn block_root(&self) -> Byte32Reader<'r> {
        Byte32Reader::new_unchecked(&self.as_slice()[32..64])
    }
    pub fn account_count(&self) -> Uint64Reader<'r> {
        Uint64Reader::new_unchecked(&self.as_slice()[64..72])
    }
    pub fn block_count(&self) -> Uint64Reader<'r> {
        Uint64Reader::new_unchecked(&self.as_slice()[72..80])
    }
}
impl<'r> molecule::prelude::Reader<'r> for GlobalStateReader<'r> {
    type Entity = GlobalState;
    const NAME: &'static str = "GlobalStateReader";
    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().into())
    }
    fn new_unchecked(slice: &'r [u8]) -> Self {
        GlobalStateReader(slice)
    }
    fn as_slice(&self) -> &'r [u8] {
        self.0
    }
    fn verify(slice: &[u8], _compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len != Self::TOTAL_SIZE {
            return ve!(Self, TotalSizeNotMatch, Self::TOTAL_SIZE, slice_len);
        }
        Ok(())
    }
}
#[derive(Debug, Default)]
pub struct GlobalStateBuilder {
    pub(crate) account_root: Byte32,
    pub(crate) block_root: Byte32,
    pub(crate) account_count: Uint64,
    pub(crate) block_count: Uint64,
}
impl GlobalStateBuilder {
    pub const TOTAL_SIZE: usize = 80;
    pub const FIELD_SIZE: [usize; 4] = [32, 32, 8, 8];
    pub const FIELD_COUNT: usize = 4;
    pub fn account_root(mut self, v: Byte32) -> Self {
        self.account_root = v;
        self
    }
    pub fn block_root(mut self, v: Byte32) -> Self {
        self.block_root = v;
        self
    }
    pub fn account_count(mut self, v: Uint64) -> Self {
        self.account_count = v;
        self
    }
    pub fn block_count(mut self, v: Uint64) -> Self {
        self.block_count = v;
        self
    }
}
impl molecule::prelude::Builder for GlobalStateBuilder {
    type Entity = GlobalState;
    const NAME: &'static str = "GlobalStateBuilder";
    fn expected_length(&self) -> usize {
        Self::TOTAL_SIZE
    }
    fn write<W: ::molecule::io::Write>(&self, writer: &mut W) -> ::molecule::io::Result<()> {
        writer.write_all(self.account_root.as_slice())?;
        writer.write_all(self.block_root.as_slice())?;
        writer.write_all(self.account_count.as_slice())?;
        writer.write_all(self.block_count.as_slice())?;
        Ok(())
    }
    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        GlobalState::new_unchecked(inner.into())
    }
}
#[derive(Clone)]
pub struct AccountScript(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for AccountScript {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for AccountScript {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for AccountScript {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "code_hash", self.code_hash())?;
        write!(f, ", {}: {}", "args", self.args())?;
        let extra_count = self.count_extra_fields();
        if extra_count != 0 {
            write!(f, ", .. ({} fields)", extra_count)?;
        }
        write!(f, " }}")
    }
}
impl ::core::default::Default for AccountScript {
    fn default() -> Self {
        let v: Vec<u8> = vec![
            48, 0, 0, 0, 12, 0, 0, 0, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ];
        AccountScript::new_unchecked(v.into())
    }
}
impl AccountScript {
    pub const FIELD_COUNT: usize = 2;
    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }
    pub fn field_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }
    pub fn field_offsets(&self) -> &[[u8; 4]] {
        molecule::unpack_number_vec(&self.as_slice()[molecule::NUMBER_SIZE..])
    }
    pub fn count_extra_fields(&self) -> usize {
        self.field_count() - Self::FIELD_COUNT
    }
    pub fn has_extra_fields(&self) -> bool {
        Self::FIELD_COUNT != self.field_count()
    }
    pub fn code_hash(&self) -> Byte32 {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[0][..]) as usize;
        let end = molecule::unpack_number(&offsets[1][..]) as usize;
        Byte32::new_unchecked(self.0.slice(start, end))
    }
    pub fn args(&self) -> Bytes {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[1][..]) as usize;
        if self.has_extra_fields() {
            let end = molecule::unpack_number(&offsets[2][..]) as usize;
            Bytes::new_unchecked(self.0.slice(start, end))
        } else {
            Bytes::new_unchecked(self.0.slice_from(start))
        }
    }
    pub fn as_reader<'r>(&'r self) -> AccountScriptReader<'r> {
        AccountScriptReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for AccountScript {
    type Builder = AccountScriptBuilder;
    const NAME: &'static str = "AccountScript";
    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        AccountScript(data)
    }
    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }
    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }
    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        AccountScriptReader::from_slice(slice).map(|reader| reader.to_entity())
    }
    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        AccountScriptReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }
    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }
    fn as_builder(self) -> Self::Builder {
        Self::new_builder()
            .code_hash(self.code_hash())
            .args(self.args())
    }
}
#[derive(Clone, Copy)]
pub struct AccountScriptReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for AccountScriptReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for AccountScriptReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for AccountScriptReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "code_hash", self.code_hash())?;
        write!(f, ", {}: {}", "args", self.args())?;
        let extra_count = self.count_extra_fields();
        if extra_count != 0 {
            write!(f, ", .. ({} fields)", extra_count)?;
        }
        write!(f, " }}")
    }
}
impl<'r> AccountScriptReader<'r> {
    pub const FIELD_COUNT: usize = 2;
    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }
    pub fn field_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }
    pub fn field_offsets(&self) -> &[[u8; 4]] {
        molecule::unpack_number_vec(&self.as_slice()[molecule::NUMBER_SIZE..])
    }
    pub fn count_extra_fields(&self) -> usize {
        self.field_count() - Self::FIELD_COUNT
    }
    pub fn has_extra_fields(&self) -> bool {
        Self::FIELD_COUNT != self.field_count()
    }
    pub fn code_hash(&self) -> Byte32Reader<'r> {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[0][..]) as usize;
        let end = molecule::unpack_number(&offsets[1][..]) as usize;
        Byte32Reader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn args(&self) -> BytesReader<'r> {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[1][..]) as usize;
        if self.has_extra_fields() {
            let end = molecule::unpack_number(&offsets[2][..]) as usize;
            BytesReader::new_unchecked(&self.as_slice()[start..end])
        } else {
            BytesReader::new_unchecked(&self.as_slice()[start..])
        }
    }
}
impl<'r> molecule::prelude::Reader<'r> for AccountScriptReader<'r> {
    type Entity = AccountScript;
    const NAME: &'static str = "AccountScriptReader";
    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().into())
    }
    fn new_unchecked(slice: &'r [u8]) -> Self {
        AccountScriptReader(slice)
    }
    fn as_slice(&self) -> &'r [u8] {
        self.0
    }
    fn verify(slice: &[u8], compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len < molecule::NUMBER_SIZE {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE, slice_len);
        }
        let total_size = molecule::unpack_number(slice) as usize;
        if slice_len != total_size {
            return ve!(Self, TotalSizeNotMatch, total_size, slice_len);
        }
        if slice_len == molecule::NUMBER_SIZE && Self::FIELD_COUNT == 0 {
            return Ok(());
        }
        if slice_len < molecule::NUMBER_SIZE * 2 {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE * 2, slice_len);
        }
        let offset_first = molecule::unpack_number(&slice[molecule::NUMBER_SIZE..]) as usize;
        if offset_first % 4 != 0 || offset_first < molecule::NUMBER_SIZE * 2 {
            return ve!(Self, OffsetsNotMatch);
        }
        let field_count = offset_first / 4 - 1;
        if field_count < Self::FIELD_COUNT {
            return ve!(Self, FieldCountNotMatch, Self::FIELD_COUNT, field_count);
        } else if !compatible && field_count > Self::FIELD_COUNT {
            return ve!(Self, FieldCountNotMatch, Self::FIELD_COUNT, field_count);
        };
        let header_size = molecule::NUMBER_SIZE * (field_count + 1);
        if slice_len < header_size {
            return ve!(Self, HeaderIsBroken, header_size, slice_len);
        }
        let ptr = molecule::unpack_number_vec(&slice[molecule::NUMBER_SIZE..]);
        let mut offsets: Vec<usize> = ptr[..field_count]
            .iter()
            .map(|x| molecule::unpack_number(&x[..]) as usize)
            .collect();
        offsets.push(total_size);
        if offsets.windows(2).any(|i| i[0] > i[1]) {
            return ve!(Self, OffsetsNotMatch);
        }
        Byte32Reader::verify(&slice[offsets[0]..offsets[1]], compatible)?;
        BytesReader::verify(&slice[offsets[1]..offsets[2]], compatible)?;
        Ok(())
    }
}
#[derive(Debug, Default)]
pub struct AccountScriptBuilder {
    pub(crate) code_hash: Byte32,
    pub(crate) args: Bytes,
}
impl AccountScriptBuilder {
    pub const FIELD_COUNT: usize = 2;
    pub fn code_hash(mut self, v: Byte32) -> Self {
        self.code_hash = v;
        self
    }
    pub fn args(mut self, v: Bytes) -> Self {
        self.args = v;
        self
    }
}
impl molecule::prelude::Builder for AccountScriptBuilder {
    type Entity = AccountScript;
    const NAME: &'static str = "AccountScriptBuilder";
    fn expected_length(&self) -> usize {
        molecule::NUMBER_SIZE * (Self::FIELD_COUNT + 1)
            + self.code_hash.as_slice().len()
            + self.args.as_slice().len()
    }
    fn write<W: ::molecule::io::Write>(&self, writer: &mut W) -> ::molecule::io::Result<()> {
        let mut total_size = molecule::NUMBER_SIZE * (Self::FIELD_COUNT + 1);
        let mut offsets = Vec::with_capacity(Self::FIELD_COUNT);
        offsets.push(total_size);
        total_size += self.code_hash.as_slice().len();
        offsets.push(total_size);
        total_size += self.args.as_slice().len();
        writer.write_all(&molecule::pack_number(total_size as molecule::Number))?;
        for offset in offsets.into_iter() {
            writer.write_all(&molecule::pack_number(offset as molecule::Number))?;
        }
        writer.write_all(self.code_hash.as_slice())?;
        writer.write_all(self.args.as_slice())?;
        Ok(())
    }
    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        AccountScript::new_unchecked(inner.into())
    }
}
#[derive(Clone)]
pub struct AccountScriptOpt(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for AccountScriptOpt {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for AccountScriptOpt {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for AccountScriptOpt {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        if let Some(v) = self.to_opt() {
            write!(f, "{}(Some({}))", Self::NAME, v)
        } else {
            write!(f, "{}(None)", Self::NAME)
        }
    }
}
impl ::core::default::Default for AccountScriptOpt {
    fn default() -> Self {
        let v: Vec<u8> = vec![];
        AccountScriptOpt::new_unchecked(v.into())
    }
}
impl AccountScriptOpt {
    pub fn is_none(&self) -> bool {
        self.0.is_empty()
    }
    pub fn is_some(&self) -> bool {
        !self.0.is_empty()
    }
    pub fn to_opt(&self) -> Option<AccountScript> {
        if self.is_none() {
            None
        } else {
            Some(AccountScript::new_unchecked(self.0.clone()))
        }
    }
    pub fn as_reader<'r>(&'r self) -> AccountScriptOptReader<'r> {
        AccountScriptOptReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for AccountScriptOpt {
    type Builder = AccountScriptOptBuilder;
    const NAME: &'static str = "AccountScriptOpt";
    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        AccountScriptOpt(data)
    }
    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }
    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }
    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        AccountScriptOptReader::from_slice(slice).map(|reader| reader.to_entity())
    }
    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        AccountScriptOptReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }
    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }
    fn as_builder(self) -> Self::Builder {
        Self::new_builder().set(self.to_opt())
    }
}
#[derive(Clone, Copy)]
pub struct AccountScriptOptReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for AccountScriptOptReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for AccountScriptOptReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for AccountScriptOptReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        if let Some(v) = self.to_opt() {
            write!(f, "{}(Some({}))", Self::NAME, v)
        } else {
            write!(f, "{}(None)", Self::NAME)
        }
    }
}
impl<'r> AccountScriptOptReader<'r> {
    pub fn is_none(&self) -> bool {
        self.0.is_empty()
    }
    pub fn is_some(&self) -> bool {
        !self.0.is_empty()
    }
    pub fn to_opt(&self) -> Option<AccountScriptReader<'r>> {
        if self.is_none() {
            None
        } else {
            Some(AccountScriptReader::new_unchecked(self.as_slice()))
        }
    }
}
impl<'r> molecule::prelude::Reader<'r> for AccountScriptOptReader<'r> {
    type Entity = AccountScriptOpt;
    const NAME: &'static str = "AccountScriptOptReader";
    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().into())
    }
    fn new_unchecked(slice: &'r [u8]) -> Self {
        AccountScriptOptReader(slice)
    }
    fn as_slice(&self) -> &'r [u8] {
        self.0
    }
    fn verify(slice: &[u8], compatible: bool) -> molecule::error::VerificationResult<()> {
        if !slice.is_empty() {
            AccountScriptReader::verify(&slice[..], compatible)?;
        }
        Ok(())
    }
}
#[derive(Debug, Default)]
pub struct AccountScriptOptBuilder(pub(crate) Option<AccountScript>);
impl AccountScriptOptBuilder {
    pub fn set(mut self, v: Option<AccountScript>) -> Self {
        self.0 = v;
        self
    }
}
impl molecule::prelude::Builder for AccountScriptOptBuilder {
    type Entity = AccountScriptOpt;
    const NAME: &'static str = "AccountScriptOptBuilder";
    fn expected_length(&self) -> usize {
        self.0
            .as_ref()
            .map(|ref inner| inner.as_slice().len())
            .unwrap_or(0)
    }
    fn write<W: ::molecule::io::Write>(&self, writer: &mut W) -> ::molecule::io::Result<()> {
        self.0
            .as_ref()
            .map(|ref inner| writer.write_all(inner.as_slice()))
            .unwrap_or(Ok(()))
    }
    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        AccountScriptOpt::new_unchecked(inner.into())
    }
}
#[derive(Clone)]
pub struct KeyValue(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for KeyValue {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for KeyValue {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for KeyValue {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "key", self.key())?;
        write!(f, ", {}: {}", "value", self.value())?;
        write!(f, " }}")
    }
}
impl ::core::default::Default for KeyValue {
    fn default() -> Self {
        let v: Vec<u8> = vec![
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ];
        KeyValue::new_unchecked(v.into())
    }
}
impl KeyValue {
    pub const TOTAL_SIZE: usize = 40;
    pub const FIELD_SIZE: [usize; 2] = [32, 8];
    pub const FIELD_COUNT: usize = 2;
    pub fn key(&self) -> Byte32 {
        Byte32::new_unchecked(self.0.slice(0, 32))
    }
    pub fn value(&self) -> Uint64 {
        Uint64::new_unchecked(self.0.slice(32, 40))
    }
    pub fn as_reader<'r>(&'r self) -> KeyValueReader<'r> {
        KeyValueReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for KeyValue {
    type Builder = KeyValueBuilder;
    const NAME: &'static str = "KeyValue";
    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        KeyValue(data)
    }
    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }
    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }
    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        KeyValueReader::from_slice(slice).map(|reader| reader.to_entity())
    }
    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        KeyValueReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }
    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }
    fn as_builder(self) -> Self::Builder {
        Self::new_builder().key(self.key()).value(self.value())
    }
}
#[derive(Clone, Copy)]
pub struct KeyValueReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for KeyValueReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for KeyValueReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for KeyValueReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "key", self.key())?;
        write!(f, ", {}: {}", "value", self.value())?;
        write!(f, " }}")
    }
}
impl<'r> KeyValueReader<'r> {
    pub const TOTAL_SIZE: usize = 40;
    pub const FIELD_SIZE: [usize; 2] = [32, 8];
    pub const FIELD_COUNT: usize = 2;
    pub fn key(&self) -> Byte32Reader<'r> {
        Byte32Reader::new_unchecked(&self.as_slice()[0..32])
    }
    pub fn value(&self) -> Uint64Reader<'r> {
        Uint64Reader::new_unchecked(&self.as_slice()[32..40])
    }
}
impl<'r> molecule::prelude::Reader<'r> for KeyValueReader<'r> {
    type Entity = KeyValue;
    const NAME: &'static str = "KeyValueReader";
    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().into())
    }
    fn new_unchecked(slice: &'r [u8]) -> Self {
        KeyValueReader(slice)
    }
    fn as_slice(&self) -> &'r [u8] {
        self.0
    }
    fn verify(slice: &[u8], _compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len != Self::TOTAL_SIZE {
            return ve!(Self, TotalSizeNotMatch, Self::TOTAL_SIZE, slice_len);
        }
        Ok(())
    }
}
#[derive(Debug, Default)]
pub struct KeyValueBuilder {
    pub(crate) key: Byte32,
    pub(crate) value: Uint64,
}
impl KeyValueBuilder {
    pub const TOTAL_SIZE: usize = 40;
    pub const FIELD_SIZE: [usize; 2] = [32, 8];
    pub const FIELD_COUNT: usize = 2;
    pub fn key(mut self, v: Byte32) -> Self {
        self.key = v;
        self
    }
    pub fn value(mut self, v: Uint64) -> Self {
        self.value = v;
        self
    }
}
impl molecule::prelude::Builder for KeyValueBuilder {
    type Entity = KeyValue;
    const NAME: &'static str = "KeyValueBuilder";
    fn expected_length(&self) -> usize {
        Self::TOTAL_SIZE
    }
    fn write<W: ::molecule::io::Write>(&self, writer: &mut W) -> ::molecule::io::Result<()> {
        writer.write_all(self.key.as_slice())?;
        writer.write_all(self.value.as_slice())?;
        Ok(())
    }
    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        KeyValue::new_unchecked(inner.into())
    }
}
#[derive(Clone)]
pub struct KeyValueMap(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for KeyValueMap {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for KeyValueMap {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for KeyValueMap {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} [", Self::NAME)?;
        for i in 0..self.len() {
            if i == 0 {
                write!(f, "{}", self.get_unchecked(i))?;
            } else {
                write!(f, ", {}", self.get_unchecked(i))?;
            }
        }
        write!(f, "]")
    }
}
impl ::core::default::Default for KeyValueMap {
    fn default() -> Self {
        let v: Vec<u8> = vec![0, 0, 0, 0];
        KeyValueMap::new_unchecked(v.into())
    }
}
impl KeyValueMap {
    pub const ITEM_SIZE: usize = 40;
    pub fn total_size(&self) -> usize {
        molecule::NUMBER_SIZE * (self.item_count() + 1)
    }
    pub fn item_count(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }
    pub fn len(&self) -> usize {
        self.item_count()
    }
    pub fn is_empty(&self) -> bool {
        self.len() == 0
    }
    pub fn get(&self, idx: usize) -> Option<KeyValue> {
        if idx >= self.len() {
            None
        } else {
            Some(self.get_unchecked(idx))
        }
    }
    pub fn get_unchecked(&self, idx: usize) -> KeyValue {
        let start = molecule::NUMBER_SIZE + Self::ITEM_SIZE * idx;
        let end = start + Self::ITEM_SIZE;
        KeyValue::new_unchecked(self.0.slice(start, end))
    }
    pub fn as_reader<'r>(&'r self) -> KeyValueMapReader<'r> {
        KeyValueMapReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for KeyValueMap {
    type Builder = KeyValueMapBuilder;
    const NAME: &'static str = "KeyValueMap";
    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        KeyValueMap(data)
    }
    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }
    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }
    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        KeyValueMapReader::from_slice(slice).map(|reader| reader.to_entity())
    }
    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        KeyValueMapReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }
    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }
    fn as_builder(self) -> Self::Builder {
        Self::new_builder().extend(self.into_iter())
    }
}
#[derive(Clone, Copy)]
pub struct KeyValueMapReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for KeyValueMapReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for KeyValueMapReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for KeyValueMapReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} [", Self::NAME)?;
        for i in 0..self.len() {
            if i == 0 {
                write!(f, "{}", self.get_unchecked(i))?;
            } else {
                write!(f, ", {}", self.get_unchecked(i))?;
            }
        }
        write!(f, "]")
    }
}
impl<'r> KeyValueMapReader<'r> {
    pub const ITEM_SIZE: usize = 40;
    pub fn total_size(&self) -> usize {
        molecule::NUMBER_SIZE * (self.item_count() + 1)
    }
    pub fn item_count(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }
    pub fn len(&self) -> usize {
        self.item_count()
    }
    pub fn is_empty(&self) -> bool {
        self.len() == 0
    }
    pub fn get(&self, idx: usize) -> Option<KeyValueReader<'r>> {
        if idx >= self.len() {
            None
        } else {
            Some(self.get_unchecked(idx))
        }
    }
    pub fn get_unchecked(&self, idx: usize) -> KeyValueReader<'r> {
        let start = molecule::NUMBER_SIZE + Self::ITEM_SIZE * idx;
        let end = start + Self::ITEM_SIZE;
        KeyValueReader::new_unchecked(&self.as_slice()[start..end])
    }
}
impl<'r> molecule::prelude::Reader<'r> for KeyValueMapReader<'r> {
    type Entity = KeyValueMap;
    const NAME: &'static str = "KeyValueMapReader";
    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().into())
    }
    fn new_unchecked(slice: &'r [u8]) -> Self {
        KeyValueMapReader(slice)
    }
    fn as_slice(&self) -> &'r [u8] {
        self.0
    }
    fn verify(slice: &[u8], _compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len < molecule::NUMBER_SIZE {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE, slice_len);
        }
        let item_count = molecule::unpack_number(slice) as usize;
        if item_count == 0 {
            if slice_len != molecule::NUMBER_SIZE {
                return ve!(Self, TotalSizeNotMatch, molecule::NUMBER_SIZE, slice_len);
            }
            return Ok(());
        }
        let total_size = molecule::NUMBER_SIZE + Self::ITEM_SIZE * item_count;
        if slice_len != total_size {
            return ve!(Self, TotalSizeNotMatch, total_size, slice_len);
        }
        Ok(())
    }
}
#[derive(Debug, Default)]
pub struct KeyValueMapBuilder(pub(crate) Vec<KeyValue>);
impl KeyValueMapBuilder {
    pub const ITEM_SIZE: usize = 40;
    pub fn set(mut self, v: Vec<KeyValue>) -> Self {
        self.0 = v;
        self
    }
    pub fn push(mut self, v: KeyValue) -> Self {
        self.0.push(v);
        self
    }
    pub fn extend<T: ::core::iter::IntoIterator<Item = KeyValue>>(mut self, iter: T) -> Self {
        for elem in iter {
            self.0.push(elem);
        }
        self
    }
}
impl molecule::prelude::Builder for KeyValueMapBuilder {
    type Entity = KeyValueMap;
    const NAME: &'static str = "KeyValueMapBuilder";
    fn expected_length(&self) -> usize {
        molecule::NUMBER_SIZE + Self::ITEM_SIZE * self.0.len()
    }
    fn write<W: ::molecule::io::Write>(&self, writer: &mut W) -> ::molecule::io::Result<()> {
        writer.write_all(&molecule::pack_number(self.0.len() as molecule::Number))?;
        for inner in &self.0[..] {
            writer.write_all(inner.as_slice())?;
        }
        Ok(())
    }
    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        KeyValueMap::new_unchecked(inner.into())
    }
}
pub struct KeyValueMapIterator(KeyValueMap, usize, usize);
impl ::core::iter::Iterator for KeyValueMapIterator {
    type Item = KeyValue;
    fn next(&mut self) -> Option<Self::Item> {
        if self.1 >= self.2 {
            None
        } else {
            let ret = self.0.get_unchecked(self.1);
            self.1 += 1;
            Some(ret)
        }
    }
}
impl ::core::iter::ExactSizeIterator for KeyValueMapIterator {
    fn len(&self) -> usize {
        self.2 - self.1
    }
}
impl ::core::iter::IntoIterator for KeyValueMap {
    type Item = KeyValue;
    type IntoIter = KeyValueMapIterator;
    fn into_iter(self) -> Self::IntoIter {
        let len = self.len();
        KeyValueMapIterator(self, 0, len)
    }
}
impl<'r> KeyValueMapReader<'r> {
    pub fn iter<'t>(&'t self) -> KeyValueMapReaderIterator<'t, 'r> {
        KeyValueMapReaderIterator(&self, 0, self.len())
    }
}
pub struct KeyValueMapReaderIterator<'t, 'r>(&'t KeyValueMapReader<'r>, usize, usize);
impl<'t: 'r, 'r> ::core::iter::Iterator for KeyValueMapReaderIterator<'t, 'r> {
    type Item = KeyValueReader<'t>;
    fn next(&mut self) -> Option<Self::Item> {
        if self.1 >= self.2 {
            None
        } else {
            let ret = self.0.get_unchecked(self.1);
            self.1 += 1;
            Some(ret)
        }
    }
}
impl<'t: 'r, 'r> ::core::iter::ExactSizeIterator for KeyValueMapReaderIterator<'t, 'r> {
    fn len(&self) -> usize {
        self.2 - self.1
    }
}
#[derive(Clone)]
pub struct TreePath(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for TreePath {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for TreePath {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for TreePath {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        let raw_data = hex_string(&self.raw_data());
        write!(f, "{}(0x{})", Self::NAME, raw_data)
    }
}
impl ::core::default::Default for TreePath {
    fn default() -> Self {
        let v: Vec<u8> = vec![0, 0, 0, 0];
        TreePath::new_unchecked(v.into())
    }
}
impl TreePath {
    pub const ITEM_SIZE: usize = 1;
    pub fn total_size(&self) -> usize {
        molecule::NUMBER_SIZE * (self.item_count() + 1)
    }
    pub fn item_count(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }
    pub fn len(&self) -> usize {
        self.item_count()
    }
    pub fn is_empty(&self) -> bool {
        self.len() == 0
    }
    pub fn get(&self, idx: usize) -> Option<Byte> {
        if idx >= self.len() {
            None
        } else {
            Some(self.get_unchecked(idx))
        }
    }
    pub fn get_unchecked(&self, idx: usize) -> Byte {
        let start = molecule::NUMBER_SIZE + Self::ITEM_SIZE * idx;
        let end = start + Self::ITEM_SIZE;
        Byte::new_unchecked(self.0.slice(start, end))
    }
    pub fn raw_data(&self) -> molecule::bytes::Bytes {
        self.0.slice_from(molecule::NUMBER_SIZE)
    }
    pub fn as_reader<'r>(&'r self) -> TreePathReader<'r> {
        TreePathReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for TreePath {
    type Builder = TreePathBuilder;
    const NAME: &'static str = "TreePath";
    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        TreePath(data)
    }
    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }
    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }
    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        TreePathReader::from_slice(slice).map(|reader| reader.to_entity())
    }
    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        TreePathReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }
    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }
    fn as_builder(self) -> Self::Builder {
        Self::new_builder().extend(self.into_iter())
    }
}
#[derive(Clone, Copy)]
pub struct TreePathReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for TreePathReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for TreePathReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for TreePathReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        let raw_data = hex_string(&self.raw_data());
        write!(f, "{}(0x{})", Self::NAME, raw_data)
    }
}
impl<'r> TreePathReader<'r> {
    pub const ITEM_SIZE: usize = 1;
    pub fn total_size(&self) -> usize {
        molecule::NUMBER_SIZE * (self.item_count() + 1)
    }
    pub fn item_count(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }
    pub fn len(&self) -> usize {
        self.item_count()
    }
    pub fn is_empty(&self) -> bool {
        self.len() == 0
    }
    pub fn get(&self, idx: usize) -> Option<ByteReader<'r>> {
        if idx >= self.len() {
            None
        } else {
            Some(self.get_unchecked(idx))
        }
    }
    pub fn get_unchecked(&self, idx: usize) -> ByteReader<'r> {
        let start = molecule::NUMBER_SIZE + Self::ITEM_SIZE * idx;
        let end = start + Self::ITEM_SIZE;
        ByteReader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn raw_data(&self) -> &'r [u8] {
        &self.as_slice()[molecule::NUMBER_SIZE..]
    }
}
impl<'r> molecule::prelude::Reader<'r> for TreePathReader<'r> {
    type Entity = TreePath;
    const NAME: &'static str = "TreePathReader";
    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().into())
    }
    fn new_unchecked(slice: &'r [u8]) -> Self {
        TreePathReader(slice)
    }
    fn as_slice(&self) -> &'r [u8] {
        self.0
    }
    fn verify(slice: &[u8], _compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len < molecule::NUMBER_SIZE {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE, slice_len);
        }
        let item_count = molecule::unpack_number(slice) as usize;
        if item_count == 0 {
            if slice_len != molecule::NUMBER_SIZE {
                return ve!(Self, TotalSizeNotMatch, molecule::NUMBER_SIZE, slice_len);
            }
            return Ok(());
        }
        let total_size = molecule::NUMBER_SIZE + Self::ITEM_SIZE * item_count;
        if slice_len != total_size {
            return ve!(Self, TotalSizeNotMatch, total_size, slice_len);
        }
        Ok(())
    }
}
#[derive(Debug, Default)]
pub struct TreePathBuilder(pub(crate) Vec<Byte>);
impl TreePathBuilder {
    pub const ITEM_SIZE: usize = 1;
    pub fn set(mut self, v: Vec<Byte>) -> Self {
        self.0 = v;
        self
    }
    pub fn push(mut self, v: Byte) -> Self {
        self.0.push(v);
        self
    }
    pub fn extend<T: ::core::iter::IntoIterator<Item = Byte>>(mut self, iter: T) -> Self {
        for elem in iter {
            self.0.push(elem);
        }
        self
    }
}
impl molecule::prelude::Builder for TreePathBuilder {
    type Entity = TreePath;
    const NAME: &'static str = "TreePathBuilder";
    fn expected_length(&self) -> usize {
        molecule::NUMBER_SIZE + Self::ITEM_SIZE * self.0.len()
    }
    fn write<W: ::molecule::io::Write>(&self, writer: &mut W) -> ::molecule::io::Result<()> {
        writer.write_all(&molecule::pack_number(self.0.len() as molecule::Number))?;
        for inner in &self.0[..] {
            writer.write_all(inner.as_slice())?;
        }
        Ok(())
    }
    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        TreePath::new_unchecked(inner.into())
    }
}
pub struct TreePathIterator(TreePath, usize, usize);
impl ::core::iter::Iterator for TreePathIterator {
    type Item = Byte;
    fn next(&mut self) -> Option<Self::Item> {
        if self.1 >= self.2 {
            None
        } else {
            let ret = self.0.get_unchecked(self.1);
            self.1 += 1;
            Some(ret)
        }
    }
}
impl ::core::iter::ExactSizeIterator for TreePathIterator {
    fn len(&self) -> usize {
        self.2 - self.1
    }
}
impl ::core::iter::IntoIterator for TreePath {
    type Item = Byte;
    type IntoIter = TreePathIterator;
    fn into_iter(self) -> Self::IntoIter {
        let len = self.len();
        TreePathIterator(self, 0, len)
    }
}
#[derive(Clone)]
pub struct TreePathVec(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for TreePathVec {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for TreePathVec {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for TreePathVec {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} [", Self::NAME)?;
        for i in 0..self.len() {
            if i == 0 {
                write!(f, "{}", self.get_unchecked(i))?;
            } else {
                write!(f, ", {}", self.get_unchecked(i))?;
            }
        }
        write!(f, "]")
    }
}
impl ::core::default::Default for TreePathVec {
    fn default() -> Self {
        let v: Vec<u8> = vec![4, 0, 0, 0];
        TreePathVec::new_unchecked(v.into())
    }
}
impl TreePathVec {
    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }
    pub fn item_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }
    pub fn item_offsets(&self) -> &[[u8; 4]] {
        molecule::unpack_number_vec(&self.as_slice()[molecule::NUMBER_SIZE..])
    }
    pub fn len(&self) -> usize {
        self.item_count()
    }
    pub fn is_empty(&self) -> bool {
        self.len() == 0
    }
    pub fn get(&self, idx: usize) -> Option<TreePath> {
        if idx >= self.len() {
            None
        } else {
            Some(self.get_unchecked(idx))
        }
    }
    pub fn get_unchecked(&self, idx: usize) -> TreePath {
        let offsets = self.item_offsets();
        let start = molecule::unpack_number(&offsets[idx][..]) as usize;
        if idx == self.len() - 1 {
            TreePath::new_unchecked(self.0.slice_from(start))
        } else {
            let end = molecule::unpack_number(&offsets[idx + 1][..]) as usize;
            TreePath::new_unchecked(self.0.slice(start, end))
        }
    }
    pub fn as_reader<'r>(&'r self) -> TreePathVecReader<'r> {
        TreePathVecReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for TreePathVec {
    type Builder = TreePathVecBuilder;
    const NAME: &'static str = "TreePathVec";
    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        TreePathVec(data)
    }
    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }
    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }
    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        TreePathVecReader::from_slice(slice).map(|reader| reader.to_entity())
    }
    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        TreePathVecReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }
    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }
    fn as_builder(self) -> Self::Builder {
        Self::new_builder().extend(self.into_iter())
    }
}
#[derive(Clone, Copy)]
pub struct TreePathVecReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for TreePathVecReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for TreePathVecReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for TreePathVecReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} [", Self::NAME)?;
        for i in 0..self.len() {
            if i == 0 {
                write!(f, "{}", self.get_unchecked(i))?;
            } else {
                write!(f, ", {}", self.get_unchecked(i))?;
            }
        }
        write!(f, "]")
    }
}
impl<'r> TreePathVecReader<'r> {
    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }
    pub fn item_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }
    pub fn item_offsets(&self) -> &[[u8; 4]] {
        molecule::unpack_number_vec(&self.as_slice()[molecule::NUMBER_SIZE..])
    }
    pub fn len(&self) -> usize {
        self.item_count()
    }
    pub fn is_empty(&self) -> bool {
        self.len() == 0
    }
    pub fn get(&self, idx: usize) -> Option<TreePathReader<'r>> {
        if idx >= self.len() {
            None
        } else {
            Some(self.get_unchecked(idx))
        }
    }
    pub fn get_unchecked(&self, idx: usize) -> TreePathReader<'r> {
        let offsets = self.item_offsets();
        let start = molecule::unpack_number(&offsets[idx][..]) as usize;
        if idx == self.len() - 1 {
            TreePathReader::new_unchecked(&self.as_slice()[start..])
        } else {
            let end = molecule::unpack_number(&offsets[idx + 1][..]) as usize;
            TreePathReader::new_unchecked(&self.as_slice()[start..end])
        }
    }
}
impl<'r> molecule::prelude::Reader<'r> for TreePathVecReader<'r> {
    type Entity = TreePathVec;
    const NAME: &'static str = "TreePathVecReader";
    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().into())
    }
    fn new_unchecked(slice: &'r [u8]) -> Self {
        TreePathVecReader(slice)
    }
    fn as_slice(&self) -> &'r [u8] {
        self.0
    }
    fn verify(slice: &[u8], compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len < molecule::NUMBER_SIZE {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE, slice_len);
        }
        let total_size = molecule::unpack_number(slice) as usize;
        if slice_len != total_size {
            return ve!(Self, TotalSizeNotMatch, total_size, slice_len);
        }
        if slice_len == molecule::NUMBER_SIZE {
            return Ok(());
        }
        if slice_len < molecule::NUMBER_SIZE * 2 {
            return ve!(
                Self,
                TotalSizeNotMatch,
                molecule::NUMBER_SIZE * 2,
                slice_len
            );
        }
        let offset_first = molecule::unpack_number(&slice[molecule::NUMBER_SIZE..]) as usize;
        if offset_first % 4 != 0 || offset_first < molecule::NUMBER_SIZE * 2 {
            return ve!(Self, OffsetsNotMatch);
        }
        let item_count = offset_first / 4 - 1;
        let header_size = molecule::NUMBER_SIZE * (item_count + 1);
        if slice_len < header_size {
            return ve!(Self, HeaderIsBroken, header_size, slice_len);
        }
        let ptr = molecule::unpack_number_vec(&slice[molecule::NUMBER_SIZE..]);
        let mut offsets: Vec<usize> = ptr[..item_count]
            .iter()
            .map(|x| molecule::unpack_number(&x[..]) as usize)
            .collect();
        offsets.push(total_size);
        if offsets.windows(2).any(|i| i[0] > i[1]) {
            return ve!(Self, OffsetsNotMatch);
        }
        for pair in offsets.windows(2) {
            let start = pair[0];
            let end = pair[1];
            TreePathReader::verify(&slice[start..end], compatible)?;
        }
        Ok(())
    }
}
#[derive(Debug, Default)]
pub struct TreePathVecBuilder(pub(crate) Vec<TreePath>);
impl TreePathVecBuilder {
    pub fn set(mut self, v: Vec<TreePath>) -> Self {
        self.0 = v;
        self
    }
    pub fn push(mut self, v: TreePath) -> Self {
        self.0.push(v);
        self
    }
    pub fn extend<T: ::core::iter::IntoIterator<Item = TreePath>>(mut self, iter: T) -> Self {
        for elem in iter {
            self.0.push(elem);
        }
        self
    }
}
impl molecule::prelude::Builder for TreePathVecBuilder {
    type Entity = TreePathVec;
    const NAME: &'static str = "TreePathVecBuilder";
    fn expected_length(&self) -> usize {
        molecule::NUMBER_SIZE * (self.0.len() + 1)
            + self
                .0
                .iter()
                .map(|inner| inner.as_slice().len())
                .sum::<usize>()
    }
    fn write<W: ::molecule::io::Write>(&self, writer: &mut W) -> ::molecule::io::Result<()> {
        let item_count = self.0.len();
        if item_count == 0 {
            writer.write_all(&molecule::pack_number(
                molecule::NUMBER_SIZE as molecule::Number,
            ))?;
        } else {
            let (total_size, offsets) = self.0.iter().fold(
                (
                    molecule::NUMBER_SIZE * (item_count + 1),
                    Vec::with_capacity(item_count),
                ),
                |(start, mut offsets), inner| {
                    offsets.push(start);
                    (start + inner.as_slice().len(), offsets)
                },
            );
            writer.write_all(&molecule::pack_number(total_size as molecule::Number))?;
            for offset in offsets.into_iter() {
                writer.write_all(&molecule::pack_number(offset as molecule::Number))?;
            }
            for inner in self.0.iter() {
                writer.write_all(inner.as_slice())?;
            }
        }
        Ok(())
    }
    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        TreePathVec::new_unchecked(inner.into())
    }
}
pub struct TreePathVecIterator(TreePathVec, usize, usize);
impl ::core::iter::Iterator for TreePathVecIterator {
    type Item = TreePath;
    fn next(&mut self) -> Option<Self::Item> {
        if self.1 >= self.2 {
            None
        } else {
            let ret = self.0.get_unchecked(self.1);
            self.1 += 1;
            Some(ret)
        }
    }
}
impl ::core::iter::ExactSizeIterator for TreePathVecIterator {
    fn len(&self) -> usize {
        self.2 - self.1
    }
}
impl ::core::iter::IntoIterator for TreePathVec {
    type Item = TreePath;
    type IntoIter = TreePathVecIterator;
    fn into_iter(self) -> Self::IntoIter {
        let len = self.len();
        TreePathVecIterator(self, 0, len)
    }
}
impl<'r> TreePathVecReader<'r> {
    pub fn iter<'t>(&'t self) -> TreePathVecReaderIterator<'t, 'r> {
        TreePathVecReaderIterator(&self, 0, self.len())
    }
}
pub struct TreePathVecReaderIterator<'t, 'r>(&'t TreePathVecReader<'r>, usize, usize);
impl<'t: 'r, 'r> ::core::iter::Iterator for TreePathVecReaderIterator<'t, 'r> {
    type Item = TreePathReader<'t>;
    fn next(&mut self) -> Option<Self::Item> {
        if self.1 >= self.2 {
            None
        } else {
            let ret = self.0.get_unchecked(self.1);
            self.1 += 1;
            Some(ret)
        }
    }
}
impl<'t: 'r, 'r> ::core::iter::ExactSizeIterator for TreePathVecReaderIterator<'t, 'r> {
    fn len(&self) -> usize {
        self.2 - self.1
    }
}
#[derive(Clone)]
pub struct SMTBranch(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for SMTBranch {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for SMTBranch {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for SMTBranch {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "node", self.node())?;
        write!(f, ", {}: {}", "height", self.height())?;
        write!(f, " }}")
    }
}
impl ::core::default::Default for SMTBranch {
    fn default() -> Self {
        let v: Vec<u8> = vec![
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0,
        ];
        SMTBranch::new_unchecked(v.into())
    }
}
impl SMTBranch {
    pub const TOTAL_SIZE: usize = 33;
    pub const FIELD_SIZE: [usize; 2] = [32, 1];
    pub const FIELD_COUNT: usize = 2;
    pub fn node(&self) -> Byte32 {
        Byte32::new_unchecked(self.0.slice(0, 32))
    }
    pub fn height(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(32, 33))
    }
    pub fn as_reader<'r>(&'r self) -> SMTBranchReader<'r> {
        SMTBranchReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for SMTBranch {
    type Builder = SMTBranchBuilder;
    const NAME: &'static str = "SMTBranch";
    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        SMTBranch(data)
    }
    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }
    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }
    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        SMTBranchReader::from_slice(slice).map(|reader| reader.to_entity())
    }
    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        SMTBranchReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }
    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }
    fn as_builder(self) -> Self::Builder {
        Self::new_builder().node(self.node()).height(self.height())
    }
}
#[derive(Clone, Copy)]
pub struct SMTBranchReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for SMTBranchReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for SMTBranchReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for SMTBranchReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "node", self.node())?;
        write!(f, ", {}: {}", "height", self.height())?;
        write!(f, " }}")
    }
}
impl<'r> SMTBranchReader<'r> {
    pub const TOTAL_SIZE: usize = 33;
    pub const FIELD_SIZE: [usize; 2] = [32, 1];
    pub const FIELD_COUNT: usize = 2;
    pub fn node(&self) -> Byte32Reader<'r> {
        Byte32Reader::new_unchecked(&self.as_slice()[0..32])
    }
    pub fn height(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[32..33])
    }
}
impl<'r> molecule::prelude::Reader<'r> for SMTBranchReader<'r> {
    type Entity = SMTBranch;
    const NAME: &'static str = "SMTBranchReader";
    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().into())
    }
    fn new_unchecked(slice: &'r [u8]) -> Self {
        SMTBranchReader(slice)
    }
    fn as_slice(&self) -> &'r [u8] {
        self.0
    }
    fn verify(slice: &[u8], _compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len != Self::TOTAL_SIZE {
            return ve!(Self, TotalSizeNotMatch, Self::TOTAL_SIZE, slice_len);
        }
        Ok(())
    }
}
#[derive(Debug, Default)]
pub struct SMTBranchBuilder {
    pub(crate) node: Byte32,
    pub(crate) height: Byte,
}
impl SMTBranchBuilder {
    pub const TOTAL_SIZE: usize = 33;
    pub const FIELD_SIZE: [usize; 2] = [32, 1];
    pub const FIELD_COUNT: usize = 2;
    pub fn node(mut self, v: Byte32) -> Self {
        self.node = v;
        self
    }
    pub fn height(mut self, v: Byte) -> Self {
        self.height = v;
        self
    }
}
impl molecule::prelude::Builder for SMTBranchBuilder {
    type Entity = SMTBranch;
    const NAME: &'static str = "SMTBranchBuilder";
    fn expected_length(&self) -> usize {
        Self::TOTAL_SIZE
    }
    fn write<W: ::molecule::io::Write>(&self, writer: &mut W) -> ::molecule::io::Result<()> {
        writer.write_all(self.node.as_slice())?;
        writer.write_all(self.height.as_slice())?;
        Ok(())
    }
    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        SMTBranch::new_unchecked(inner.into())
    }
}
#[derive(Clone)]
pub struct SMTBranchVec(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for SMTBranchVec {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for SMTBranchVec {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for SMTBranchVec {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} [", Self::NAME)?;
        for i in 0..self.len() {
            if i == 0 {
                write!(f, "{}", self.get_unchecked(i))?;
            } else {
                write!(f, ", {}", self.get_unchecked(i))?;
            }
        }
        write!(f, "]")
    }
}
impl ::core::default::Default for SMTBranchVec {
    fn default() -> Self {
        let v: Vec<u8> = vec![0, 0, 0, 0];
        SMTBranchVec::new_unchecked(v.into())
    }
}
impl SMTBranchVec {
    pub const ITEM_SIZE: usize = 33;
    pub fn total_size(&self) -> usize {
        molecule::NUMBER_SIZE * (self.item_count() + 1)
    }
    pub fn item_count(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }
    pub fn len(&self) -> usize {
        self.item_count()
    }
    pub fn is_empty(&self) -> bool {
        self.len() == 0
    }
    pub fn get(&self, idx: usize) -> Option<SMTBranch> {
        if idx >= self.len() {
            None
        } else {
            Some(self.get_unchecked(idx))
        }
    }
    pub fn get_unchecked(&self, idx: usize) -> SMTBranch {
        let start = molecule::NUMBER_SIZE + Self::ITEM_SIZE * idx;
        let end = start + Self::ITEM_SIZE;
        SMTBranch::new_unchecked(self.0.slice(start, end))
    }
    pub fn as_reader<'r>(&'r self) -> SMTBranchVecReader<'r> {
        SMTBranchVecReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for SMTBranchVec {
    type Builder = SMTBranchVecBuilder;
    const NAME: &'static str = "SMTBranchVec";
    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        SMTBranchVec(data)
    }
    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }
    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }
    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        SMTBranchVecReader::from_slice(slice).map(|reader| reader.to_entity())
    }
    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        SMTBranchVecReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }
    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }
    fn as_builder(self) -> Self::Builder {
        Self::new_builder().extend(self.into_iter())
    }
}
#[derive(Clone, Copy)]
pub struct SMTBranchVecReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for SMTBranchVecReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for SMTBranchVecReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for SMTBranchVecReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} [", Self::NAME)?;
        for i in 0..self.len() {
            if i == 0 {
                write!(f, "{}", self.get_unchecked(i))?;
            } else {
                write!(f, ", {}", self.get_unchecked(i))?;
            }
        }
        write!(f, "]")
    }
}
impl<'r> SMTBranchVecReader<'r> {
    pub const ITEM_SIZE: usize = 33;
    pub fn total_size(&self) -> usize {
        molecule::NUMBER_SIZE * (self.item_count() + 1)
    }
    pub fn item_count(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }
    pub fn len(&self) -> usize {
        self.item_count()
    }
    pub fn is_empty(&self) -> bool {
        self.len() == 0
    }
    pub fn get(&self, idx: usize) -> Option<SMTBranchReader<'r>> {
        if idx >= self.len() {
            None
        } else {
            Some(self.get_unchecked(idx))
        }
    }
    pub fn get_unchecked(&self, idx: usize) -> SMTBranchReader<'r> {
        let start = molecule::NUMBER_SIZE + Self::ITEM_SIZE * idx;
        let end = start + Self::ITEM_SIZE;
        SMTBranchReader::new_unchecked(&self.as_slice()[start..end])
    }
}
impl<'r> molecule::prelude::Reader<'r> for SMTBranchVecReader<'r> {
    type Entity = SMTBranchVec;
    const NAME: &'static str = "SMTBranchVecReader";
    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().into())
    }
    fn new_unchecked(slice: &'r [u8]) -> Self {
        SMTBranchVecReader(slice)
    }
    fn as_slice(&self) -> &'r [u8] {
        self.0
    }
    fn verify(slice: &[u8], _compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len < molecule::NUMBER_SIZE {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE, slice_len);
        }
        let item_count = molecule::unpack_number(slice) as usize;
        if item_count == 0 {
            if slice_len != molecule::NUMBER_SIZE {
                return ve!(Self, TotalSizeNotMatch, molecule::NUMBER_SIZE, slice_len);
            }
            return Ok(());
        }
        let total_size = molecule::NUMBER_SIZE + Self::ITEM_SIZE * item_count;
        if slice_len != total_size {
            return ve!(Self, TotalSizeNotMatch, total_size, slice_len);
        }
        Ok(())
    }
}
#[derive(Debug, Default)]
pub struct SMTBranchVecBuilder(pub(crate) Vec<SMTBranch>);
impl SMTBranchVecBuilder {
    pub const ITEM_SIZE: usize = 33;
    pub fn set(mut self, v: Vec<SMTBranch>) -> Self {
        self.0 = v;
        self
    }
    pub fn push(mut self, v: SMTBranch) -> Self {
        self.0.push(v);
        self
    }
    pub fn extend<T: ::core::iter::IntoIterator<Item = SMTBranch>>(mut self, iter: T) -> Self {
        for elem in iter {
            self.0.push(elem);
        }
        self
    }
}
impl molecule::prelude::Builder for SMTBranchVecBuilder {
    type Entity = SMTBranchVec;
    const NAME: &'static str = "SMTBranchVecBuilder";
    fn expected_length(&self) -> usize {
        molecule::NUMBER_SIZE + Self::ITEM_SIZE * self.0.len()
    }
    fn write<W: ::molecule::io::Write>(&self, writer: &mut W) -> ::molecule::io::Result<()> {
        writer.write_all(&molecule::pack_number(self.0.len() as molecule::Number))?;
        for inner in &self.0[..] {
            writer.write_all(inner.as_slice())?;
        }
        Ok(())
    }
    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        SMTBranchVec::new_unchecked(inner.into())
    }
}
pub struct SMTBranchVecIterator(SMTBranchVec, usize, usize);
impl ::core::iter::Iterator for SMTBranchVecIterator {
    type Item = SMTBranch;
    fn next(&mut self) -> Option<Self::Item> {
        if self.1 >= self.2 {
            None
        } else {
            let ret = self.0.get_unchecked(self.1);
            self.1 += 1;
            Some(ret)
        }
    }
}
impl ::core::iter::ExactSizeIterator for SMTBranchVecIterator {
    fn len(&self) -> usize {
        self.2 - self.1
    }
}
impl ::core::iter::IntoIterator for SMTBranchVec {
    type Item = SMTBranch;
    type IntoIter = SMTBranchVecIterator;
    fn into_iter(self) -> Self::IntoIter {
        let len = self.len();
        SMTBranchVecIterator(self, 0, len)
    }
}
impl<'r> SMTBranchVecReader<'r> {
    pub fn iter<'t>(&'t self) -> SMTBranchVecReaderIterator<'t, 'r> {
        SMTBranchVecReaderIterator(&self, 0, self.len())
    }
}
pub struct SMTBranchVecReaderIterator<'t, 'r>(&'t SMTBranchVecReader<'r>, usize, usize);
impl<'t: 'r, 'r> ::core::iter::Iterator for SMTBranchVecReaderIterator<'t, 'r> {
    type Item = SMTBranchReader<'t>;
    fn next(&mut self) -> Option<Self::Item> {
        if self.1 >= self.2 {
            None
        } else {
            let ret = self.0.get_unchecked(self.1);
            self.1 += 1;
            Some(ret)
        }
    }
}
impl<'t: 'r, 'r> ::core::iter::ExactSizeIterator for SMTBranchVecReaderIterator<'t, 'r> {
    fn len(&self) -> usize {
        self.2 - self.1
    }
}
#[derive(Clone)]
pub struct SMTProof(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for SMTProof {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for SMTProof {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for SMTProof {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "leaves_path", self.leaves_path())?;
        write!(f, ", {}: {}", "proof", self.proof())?;
        let extra_count = self.count_extra_fields();
        if extra_count != 0 {
            write!(f, ", .. ({} fields)", extra_count)?;
        }
        write!(f, " }}")
    }
}
impl ::core::default::Default for SMTProof {
    fn default() -> Self {
        let v: Vec<u8> = vec![
            20, 0, 0, 0, 12, 0, 0, 0, 16, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0,
        ];
        SMTProof::new_unchecked(v.into())
    }
}
impl SMTProof {
    pub const FIELD_COUNT: usize = 2;
    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }
    pub fn field_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }
    pub fn field_offsets(&self) -> &[[u8; 4]] {
        molecule::unpack_number_vec(&self.as_slice()[molecule::NUMBER_SIZE..])
    }
    pub fn count_extra_fields(&self) -> usize {
        self.field_count() - Self::FIELD_COUNT
    }
    pub fn has_extra_fields(&self) -> bool {
        Self::FIELD_COUNT != self.field_count()
    }
    pub fn leaves_path(&self) -> TreePathVec {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[0][..]) as usize;
        let end = molecule::unpack_number(&offsets[1][..]) as usize;
        TreePathVec::new_unchecked(self.0.slice(start, end))
    }
    pub fn proof(&self) -> SMTBranchVec {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[1][..]) as usize;
        if self.has_extra_fields() {
            let end = molecule::unpack_number(&offsets[2][..]) as usize;
            SMTBranchVec::new_unchecked(self.0.slice(start, end))
        } else {
            SMTBranchVec::new_unchecked(self.0.slice_from(start))
        }
    }
    pub fn as_reader<'r>(&'r self) -> SMTProofReader<'r> {
        SMTProofReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for SMTProof {
    type Builder = SMTProofBuilder;
    const NAME: &'static str = "SMTProof";
    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        SMTProof(data)
    }
    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }
    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }
    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        SMTProofReader::from_slice(slice).map(|reader| reader.to_entity())
    }
    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        SMTProofReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }
    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }
    fn as_builder(self) -> Self::Builder {
        Self::new_builder()
            .leaves_path(self.leaves_path())
            .proof(self.proof())
    }
}
#[derive(Clone, Copy)]
pub struct SMTProofReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for SMTProofReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for SMTProofReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for SMTProofReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "leaves_path", self.leaves_path())?;
        write!(f, ", {}: {}", "proof", self.proof())?;
        let extra_count = self.count_extra_fields();
        if extra_count != 0 {
            write!(f, ", .. ({} fields)", extra_count)?;
        }
        write!(f, " }}")
    }
}
impl<'r> SMTProofReader<'r> {
    pub const FIELD_COUNT: usize = 2;
    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }
    pub fn field_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }
    pub fn field_offsets(&self) -> &[[u8; 4]] {
        molecule::unpack_number_vec(&self.as_slice()[molecule::NUMBER_SIZE..])
    }
    pub fn count_extra_fields(&self) -> usize {
        self.field_count() - Self::FIELD_COUNT
    }
    pub fn has_extra_fields(&self) -> bool {
        Self::FIELD_COUNT != self.field_count()
    }
    pub fn leaves_path(&self) -> TreePathVecReader<'r> {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[0][..]) as usize;
        let end = molecule::unpack_number(&offsets[1][..]) as usize;
        TreePathVecReader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn proof(&self) -> SMTBranchVecReader<'r> {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[1][..]) as usize;
        if self.has_extra_fields() {
            let end = molecule::unpack_number(&offsets[2][..]) as usize;
            SMTBranchVecReader::new_unchecked(&self.as_slice()[start..end])
        } else {
            SMTBranchVecReader::new_unchecked(&self.as_slice()[start..])
        }
    }
}
impl<'r> molecule::prelude::Reader<'r> for SMTProofReader<'r> {
    type Entity = SMTProof;
    const NAME: &'static str = "SMTProofReader";
    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().into())
    }
    fn new_unchecked(slice: &'r [u8]) -> Self {
        SMTProofReader(slice)
    }
    fn as_slice(&self) -> &'r [u8] {
        self.0
    }
    fn verify(slice: &[u8], compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len < molecule::NUMBER_SIZE {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE, slice_len);
        }
        let total_size = molecule::unpack_number(slice) as usize;
        if slice_len != total_size {
            return ve!(Self, TotalSizeNotMatch, total_size, slice_len);
        }
        if slice_len == molecule::NUMBER_SIZE && Self::FIELD_COUNT == 0 {
            return Ok(());
        }
        if slice_len < molecule::NUMBER_SIZE * 2 {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE * 2, slice_len);
        }
        let offset_first = molecule::unpack_number(&slice[molecule::NUMBER_SIZE..]) as usize;
        if offset_first % 4 != 0 || offset_first < molecule::NUMBER_SIZE * 2 {
            return ve!(Self, OffsetsNotMatch);
        }
        let field_count = offset_first / 4 - 1;
        if field_count < Self::FIELD_COUNT {
            return ve!(Self, FieldCountNotMatch, Self::FIELD_COUNT, field_count);
        } else if !compatible && field_count > Self::FIELD_COUNT {
            return ve!(Self, FieldCountNotMatch, Self::FIELD_COUNT, field_count);
        };
        let header_size = molecule::NUMBER_SIZE * (field_count + 1);
        if slice_len < header_size {
            return ve!(Self, HeaderIsBroken, header_size, slice_len);
        }
        let ptr = molecule::unpack_number_vec(&slice[molecule::NUMBER_SIZE..]);
        let mut offsets: Vec<usize> = ptr[..field_count]
            .iter()
            .map(|x| molecule::unpack_number(&x[..]) as usize)
            .collect();
        offsets.push(total_size);
        if offsets.windows(2).any(|i| i[0] > i[1]) {
            return ve!(Self, OffsetsNotMatch);
        }
        TreePathVecReader::verify(&slice[offsets[0]..offsets[1]], compatible)?;
        SMTBranchVecReader::verify(&slice[offsets[1]..offsets[2]], compatible)?;
        Ok(())
    }
}
#[derive(Debug, Default)]
pub struct SMTProofBuilder {
    pub(crate) leaves_path: TreePathVec,
    pub(crate) proof: SMTBranchVec,
}
impl SMTProofBuilder {
    pub const FIELD_COUNT: usize = 2;
    pub fn leaves_path(mut self, v: TreePathVec) -> Self {
        self.leaves_path = v;
        self
    }
    pub fn proof(mut self, v: SMTBranchVec) -> Self {
        self.proof = v;
        self
    }
}
impl molecule::prelude::Builder for SMTProofBuilder {
    type Entity = SMTProof;
    const NAME: &'static str = "SMTProofBuilder";
    fn expected_length(&self) -> usize {
        molecule::NUMBER_SIZE * (Self::FIELD_COUNT + 1)
            + self.leaves_path.as_slice().len()
            + self.proof.as_slice().len()
    }
    fn write<W: ::molecule::io::Write>(&self, writer: &mut W) -> ::molecule::io::Result<()> {
        let mut total_size = molecule::NUMBER_SIZE * (Self::FIELD_COUNT + 1);
        let mut offsets = Vec::with_capacity(Self::FIELD_COUNT);
        offsets.push(total_size);
        total_size += self.leaves_path.as_slice().len();
        offsets.push(total_size);
        total_size += self.proof.as_slice().len();
        writer.write_all(&molecule::pack_number(total_size as molecule::Number))?;
        for offset in offsets.into_iter() {
            writer.write_all(&molecule::pack_number(offset as molecule::Number))?;
        }
        writer.write_all(self.leaves_path.as_slice())?;
        writer.write_all(self.proof.as_slice())?;
        Ok(())
    }
    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        SMTProof::new_unchecked(inner.into())
    }
}
#[derive(Clone)]
pub struct Account(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for Account {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for Account {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for Account {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "index", self.index())?;
        write!(f, ", {}: {}", "script", self.script())?;
        write!(f, ", {}: {}", "nonce", self.nonce())?;
        write!(f, ", {}: {}", "pubkey_hash", self.pubkey_hash())?;
        let extra_count = self.count_extra_fields();
        if extra_count != 0 {
            write!(f, ", .. ({} fields)", extra_count)?;
        }
        write!(f, " }}")
    }
}
impl ::core::default::Default for Account {
    fn default() -> Self {
        let v: Vec<u8> = vec![
            52, 0, 0, 0, 20, 0, 0, 0, 28, 0, 0, 0, 28, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ];
        Account::new_unchecked(v.into())
    }
}
impl Account {
    pub const FIELD_COUNT: usize = 4;
    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }
    pub fn field_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }
    pub fn field_offsets(&self) -> &[[u8; 4]] {
        molecule::unpack_number_vec(&self.as_slice()[molecule::NUMBER_SIZE..])
    }
    pub fn count_extra_fields(&self) -> usize {
        self.field_count() - Self::FIELD_COUNT
    }
    pub fn has_extra_fields(&self) -> bool {
        Self::FIELD_COUNT != self.field_count()
    }
    pub fn index(&self) -> Uint64 {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[0][..]) as usize;
        let end = molecule::unpack_number(&offsets[1][..]) as usize;
        Uint64::new_unchecked(self.0.slice(start, end))
    }
    pub fn script(&self) -> AccountScriptOpt {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[1][..]) as usize;
        let end = molecule::unpack_number(&offsets[2][..]) as usize;
        AccountScriptOpt::new_unchecked(self.0.slice(start, end))
    }
    pub fn nonce(&self) -> Uint32 {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[2][..]) as usize;
        let end = molecule::unpack_number(&offsets[3][..]) as usize;
        Uint32::new_unchecked(self.0.slice(start, end))
    }
    pub fn pubkey_hash(&self) -> Byte20 {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[3][..]) as usize;
        if self.has_extra_fields() {
            let end = molecule::unpack_number(&offsets[4][..]) as usize;
            Byte20::new_unchecked(self.0.slice(start, end))
        } else {
            Byte20::new_unchecked(self.0.slice_from(start))
        }
    }
    pub fn as_reader<'r>(&'r self) -> AccountReader<'r> {
        AccountReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for Account {
    type Builder = AccountBuilder;
    const NAME: &'static str = "Account";
    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        Account(data)
    }
    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }
    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }
    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        AccountReader::from_slice(slice).map(|reader| reader.to_entity())
    }
    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        AccountReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }
    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }
    fn as_builder(self) -> Self::Builder {
        Self::new_builder()
            .index(self.index())
            .script(self.script())
            .nonce(self.nonce())
            .pubkey_hash(self.pubkey_hash())
    }
}
#[derive(Clone, Copy)]
pub struct AccountReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for AccountReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for AccountReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for AccountReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "index", self.index())?;
        write!(f, ", {}: {}", "script", self.script())?;
        write!(f, ", {}: {}", "nonce", self.nonce())?;
        write!(f, ", {}: {}", "pubkey_hash", self.pubkey_hash())?;
        let extra_count = self.count_extra_fields();
        if extra_count != 0 {
            write!(f, ", .. ({} fields)", extra_count)?;
        }
        write!(f, " }}")
    }
}
impl<'r> AccountReader<'r> {
    pub const FIELD_COUNT: usize = 4;
    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }
    pub fn field_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }
    pub fn field_offsets(&self) -> &[[u8; 4]] {
        molecule::unpack_number_vec(&self.as_slice()[molecule::NUMBER_SIZE..])
    }
    pub fn count_extra_fields(&self) -> usize {
        self.field_count() - Self::FIELD_COUNT
    }
    pub fn has_extra_fields(&self) -> bool {
        Self::FIELD_COUNT != self.field_count()
    }
    pub fn index(&self) -> Uint64Reader<'r> {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[0][..]) as usize;
        let end = molecule::unpack_number(&offsets[1][..]) as usize;
        Uint64Reader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn script(&self) -> AccountScriptOptReader<'r> {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[1][..]) as usize;
        let end = molecule::unpack_number(&offsets[2][..]) as usize;
        AccountScriptOptReader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn nonce(&self) -> Uint32Reader<'r> {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[2][..]) as usize;
        let end = molecule::unpack_number(&offsets[3][..]) as usize;
        Uint32Reader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn pubkey_hash(&self) -> Byte20Reader<'r> {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[3][..]) as usize;
        if self.has_extra_fields() {
            let end = molecule::unpack_number(&offsets[4][..]) as usize;
            Byte20Reader::new_unchecked(&self.as_slice()[start..end])
        } else {
            Byte20Reader::new_unchecked(&self.as_slice()[start..])
        }
    }
}
impl<'r> molecule::prelude::Reader<'r> for AccountReader<'r> {
    type Entity = Account;
    const NAME: &'static str = "AccountReader";
    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().into())
    }
    fn new_unchecked(slice: &'r [u8]) -> Self {
        AccountReader(slice)
    }
    fn as_slice(&self) -> &'r [u8] {
        self.0
    }
    fn verify(slice: &[u8], compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len < molecule::NUMBER_SIZE {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE, slice_len);
        }
        let total_size = molecule::unpack_number(slice) as usize;
        if slice_len != total_size {
            return ve!(Self, TotalSizeNotMatch, total_size, slice_len);
        }
        if slice_len == molecule::NUMBER_SIZE && Self::FIELD_COUNT == 0 {
            return Ok(());
        }
        if slice_len < molecule::NUMBER_SIZE * 2 {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE * 2, slice_len);
        }
        let offset_first = molecule::unpack_number(&slice[molecule::NUMBER_SIZE..]) as usize;
        if offset_first % 4 != 0 || offset_first < molecule::NUMBER_SIZE * 2 {
            return ve!(Self, OffsetsNotMatch);
        }
        let field_count = offset_first / 4 - 1;
        if field_count < Self::FIELD_COUNT {
            return ve!(Self, FieldCountNotMatch, Self::FIELD_COUNT, field_count);
        } else if !compatible && field_count > Self::FIELD_COUNT {
            return ve!(Self, FieldCountNotMatch, Self::FIELD_COUNT, field_count);
        };
        let header_size = molecule::NUMBER_SIZE * (field_count + 1);
        if slice_len < header_size {
            return ve!(Self, HeaderIsBroken, header_size, slice_len);
        }
        let ptr = molecule::unpack_number_vec(&slice[molecule::NUMBER_SIZE..]);
        let mut offsets: Vec<usize> = ptr[..field_count]
            .iter()
            .map(|x| molecule::unpack_number(&x[..]) as usize)
            .collect();
        offsets.push(total_size);
        if offsets.windows(2).any(|i| i[0] > i[1]) {
            return ve!(Self, OffsetsNotMatch);
        }
        Uint64Reader::verify(&slice[offsets[0]..offsets[1]], compatible)?;
        AccountScriptOptReader::verify(&slice[offsets[1]..offsets[2]], compatible)?;
        Uint32Reader::verify(&slice[offsets[2]..offsets[3]], compatible)?;
        Byte20Reader::verify(&slice[offsets[3]..offsets[4]], compatible)?;
        Ok(())
    }
}
#[derive(Debug, Default)]
pub struct AccountBuilder {
    pub(crate) index: Uint64,
    pub(crate) script: AccountScriptOpt,
    pub(crate) nonce: Uint32,
    pub(crate) pubkey_hash: Byte20,
}
impl AccountBuilder {
    pub const FIELD_COUNT: usize = 4;
    pub fn index(mut self, v: Uint64) -> Self {
        self.index = v;
        self
    }
    pub fn script(mut self, v: AccountScriptOpt) -> Self {
        self.script = v;
        self
    }
    pub fn nonce(mut self, v: Uint32) -> Self {
        self.nonce = v;
        self
    }
    pub fn pubkey_hash(mut self, v: Byte20) -> Self {
        self.pubkey_hash = v;
        self
    }
}
impl molecule::prelude::Builder for AccountBuilder {
    type Entity = Account;
    const NAME: &'static str = "AccountBuilder";
    fn expected_length(&self) -> usize {
        molecule::NUMBER_SIZE * (Self::FIELD_COUNT + 1)
            + self.index.as_slice().len()
            + self.script.as_slice().len()
            + self.nonce.as_slice().len()
            + self.pubkey_hash.as_slice().len()
    }
    fn write<W: ::molecule::io::Write>(&self, writer: &mut W) -> ::molecule::io::Result<()> {
        let mut total_size = molecule::NUMBER_SIZE * (Self::FIELD_COUNT + 1);
        let mut offsets = Vec::with_capacity(Self::FIELD_COUNT);
        offsets.push(total_size);
        total_size += self.index.as_slice().len();
        offsets.push(total_size);
        total_size += self.script.as_slice().len();
        offsets.push(total_size);
        total_size += self.nonce.as_slice().len();
        offsets.push(total_size);
        total_size += self.pubkey_hash.as_slice().len();
        writer.write_all(&molecule::pack_number(total_size as molecule::Number))?;
        for offset in offsets.into_iter() {
            writer.write_all(&molecule::pack_number(offset as molecule::Number))?;
        }
        writer.write_all(self.index.as_slice())?;
        writer.write_all(self.script.as_slice())?;
        writer.write_all(self.nonce.as_slice())?;
        writer.write_all(self.pubkey_hash.as_slice())?;
        Ok(())
    }
    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        Account::new_unchecked(inner.into())
    }
}
#[derive(Clone)]
pub struct Payment(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for Payment {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for Payment {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for Payment {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}(", Self::NAME)?;
        self.to_enum().display_inner(f)?;
        write!(f, ")")
    }
}
impl ::core::default::Default for Payment {
    fn default() -> Self {
        let v: Vec<u8> = vec![0, 0, 0, 0, 0, 0, 0, 0];
        Payment::new_unchecked(v.into())
    }
}
impl Payment {
    pub const ITEM_COUNT: usize = 2;
    pub fn item_id(&self) -> molecule::Number {
        molecule::unpack_number(self.as_slice())
    }
    pub fn to_enum(&self) -> PaymentUnion {
        let inner = self.0.slice_from(molecule::NUMBER_SIZE);
        match self.item_id() {
            0 => Uint32::new_unchecked(inner).into(),
            1 => UDTPayment::new_unchecked(inner).into(),
            _ => panic!("{}: invalid data", Self::NAME),
        }
    }
    pub fn as_reader<'r>(&'r self) -> PaymentReader<'r> {
        PaymentReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for Payment {
    type Builder = PaymentBuilder;
    const NAME: &'static str = "Payment";
    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        Payment(data)
    }
    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }
    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }
    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        PaymentReader::from_slice(slice).map(|reader| reader.to_entity())
    }
    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        PaymentReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }
    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }
    fn as_builder(self) -> Self::Builder {
        Self::new_builder().set(self.to_enum())
    }
}
#[derive(Clone, Copy)]
pub struct PaymentReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for PaymentReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for PaymentReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for PaymentReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}(", Self::NAME)?;
        self.to_enum().display_inner(f)?;
        write!(f, ")")
    }
}
impl<'r> PaymentReader<'r> {
    pub const ITEM_COUNT: usize = 2;
    pub fn item_id(&self) -> molecule::Number {
        molecule::unpack_number(self.as_slice())
    }
    pub fn to_enum(&self) -> PaymentUnionReader<'r> {
        let inner = &self.as_slice()[molecule::NUMBER_SIZE..];
        match self.item_id() {
            0 => Uint32Reader::new_unchecked(inner).into(),
            1 => UDTPaymentReader::new_unchecked(inner).into(),
            _ => panic!("{}: invalid data", Self::NAME),
        }
    }
}
impl<'r> molecule::prelude::Reader<'r> for PaymentReader<'r> {
    type Entity = Payment;
    const NAME: &'static str = "PaymentReader";
    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().into())
    }
    fn new_unchecked(slice: &'r [u8]) -> Self {
        PaymentReader(slice)
    }
    fn as_slice(&self) -> &'r [u8] {
        self.0
    }
    fn verify(slice: &[u8], compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len < molecule::NUMBER_SIZE {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE, slice_len);
        }
        let item_id = molecule::unpack_number(slice);
        let inner_slice = &slice[molecule::NUMBER_SIZE..];
        match item_id {
            0 => Uint32Reader::verify(inner_slice, compatible),
            1 => UDTPaymentReader::verify(inner_slice, compatible),
            _ => ve!(Self, UnknownItem, Self::ITEM_COUNT, item_id),
        }?;
        Ok(())
    }
}
#[derive(Debug, Default)]
pub struct PaymentBuilder(pub(crate) PaymentUnion);
impl PaymentBuilder {
    pub const ITEM_COUNT: usize = 2;
    pub fn set<I>(mut self, v: I) -> Self
    where
        I: ::core::convert::Into<PaymentUnion>,
    {
        self.0 = v.into();
        self
    }
}
impl molecule::prelude::Builder for PaymentBuilder {
    type Entity = Payment;
    const NAME: &'static str = "PaymentBuilder";
    fn expected_length(&self) -> usize {
        molecule::NUMBER_SIZE + self.0.as_slice().len()
    }
    fn write<W: ::molecule::io::Write>(&self, writer: &mut W) -> ::molecule::io::Result<()> {
        writer.write_all(&molecule::pack_number(self.0.item_id()))?;
        writer.write_all(self.0.as_slice())
    }
    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        Payment::new_unchecked(inner.into())
    }
}
#[derive(Debug, Clone)]
pub enum PaymentUnion {
    Uint32(Uint32),
    UDTPayment(UDTPayment),
}
#[derive(Debug, Clone, Copy)]
pub enum PaymentUnionReader<'r> {
    Uint32(Uint32Reader<'r>),
    UDTPayment(UDTPaymentReader<'r>),
}
impl ::core::default::Default for PaymentUnion {
    fn default() -> Self {
        PaymentUnion::Uint32(::core::default::Default::default())
    }
}
impl ::core::fmt::Display for PaymentUnion {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        match self {
            PaymentUnion::Uint32(ref item) => {
                write!(f, "{}::{}({})", Self::NAME, Uint32::NAME, item)
            }
            PaymentUnion::UDTPayment(ref item) => {
                write!(f, "{}::{}({})", Self::NAME, UDTPayment::NAME, item)
            }
        }
    }
}
impl<'r> ::core::fmt::Display for PaymentUnionReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        match self {
            PaymentUnionReader::Uint32(ref item) => {
                write!(f, "{}::{}({})", Self::NAME, Uint32::NAME, item)
            }
            PaymentUnionReader::UDTPayment(ref item) => {
                write!(f, "{}::{}({})", Self::NAME, UDTPayment::NAME, item)
            }
        }
    }
}
impl PaymentUnion {
    pub(crate) fn display_inner(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        match self {
            PaymentUnion::Uint32(ref item) => write!(f, "{}", item),
            PaymentUnion::UDTPayment(ref item) => write!(f, "{}", item),
        }
    }
}
impl<'r> PaymentUnionReader<'r> {
    pub(crate) fn display_inner(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        match self {
            PaymentUnionReader::Uint32(ref item) => write!(f, "{}", item),
            PaymentUnionReader::UDTPayment(ref item) => write!(f, "{}", item),
        }
    }
}
impl ::core::convert::From<Uint32> for PaymentUnion {
    fn from(item: Uint32) -> Self {
        PaymentUnion::Uint32(item)
    }
}
impl ::core::convert::From<UDTPayment> for PaymentUnion {
    fn from(item: UDTPayment) -> Self {
        PaymentUnion::UDTPayment(item)
    }
}
impl<'r> ::core::convert::From<Uint32Reader<'r>> for PaymentUnionReader<'r> {
    fn from(item: Uint32Reader<'r>) -> Self {
        PaymentUnionReader::Uint32(item)
    }
}
impl<'r> ::core::convert::From<UDTPaymentReader<'r>> for PaymentUnionReader<'r> {
    fn from(item: UDTPaymentReader<'r>) -> Self {
        PaymentUnionReader::UDTPayment(item)
    }
}
impl PaymentUnion {
    pub const NAME: &'static str = "PaymentUnion";
    pub fn as_bytes(&self) -> molecule::bytes::Bytes {
        match self {
            PaymentUnion::Uint32(item) => item.as_bytes(),
            PaymentUnion::UDTPayment(item) => item.as_bytes(),
        }
    }
    pub fn as_slice(&self) -> &[u8] {
        match self {
            PaymentUnion::Uint32(item) => item.as_slice(),
            PaymentUnion::UDTPayment(item) => item.as_slice(),
        }
    }
    pub fn item_id(&self) -> molecule::Number {
        match self {
            PaymentUnion::Uint32(_) => 0,
            PaymentUnion::UDTPayment(_) => 1,
        }
    }
    pub fn item_name(&self) -> &str {
        match self {
            PaymentUnion::Uint32(_) => "Uint32",
            PaymentUnion::UDTPayment(_) => "UDTPayment",
        }
    }
    pub fn as_reader<'r>(&'r self) -> PaymentUnionReader<'r> {
        match self {
            PaymentUnion::Uint32(item) => item.as_reader().into(),
            PaymentUnion::UDTPayment(item) => item.as_reader().into(),
        }
    }
}
impl<'r> PaymentUnionReader<'r> {
    pub const NAME: &'r str = "PaymentUnionReader";
    pub fn as_slice(&self) -> &'r [u8] {
        match self {
            PaymentUnionReader::Uint32(item) => item.as_slice(),
            PaymentUnionReader::UDTPayment(item) => item.as_slice(),
        }
    }
    pub fn item_id(&self) -> molecule::Number {
        match self {
            PaymentUnionReader::Uint32(_) => 0,
            PaymentUnionReader::UDTPayment(_) => 1,
        }
    }
    pub fn item_name(&self) -> &str {
        match self {
            PaymentUnionReader::Uint32(_) => "Uint32",
            PaymentUnionReader::UDTPayment(_) => "UDTPayment",
        }
    }
}
#[derive(Clone)]
pub struct UDTPayment(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for UDTPayment {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for UDTPayment {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for UDTPayment {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "type_hash", self.type_hash())?;
        write!(f, ", {}: {}", "amount", self.amount())?;
        write!(f, " }}")
    }
}
impl ::core::default::Default for UDTPayment {
    fn default() -> Self {
        let v: Vec<u8> = vec![
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0,
        ];
        UDTPayment::new_unchecked(v.into())
    }
}
impl UDTPayment {
    pub const TOTAL_SIZE: usize = 36;
    pub const FIELD_SIZE: [usize; 2] = [32, 4];
    pub const FIELD_COUNT: usize = 2;
    pub fn type_hash(&self) -> Byte32 {
        Byte32::new_unchecked(self.0.slice(0, 32))
    }
    pub fn amount(&self) -> Uint32 {
        Uint32::new_unchecked(self.0.slice(32, 36))
    }
    pub fn as_reader<'r>(&'r self) -> UDTPaymentReader<'r> {
        UDTPaymentReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for UDTPayment {
    type Builder = UDTPaymentBuilder;
    const NAME: &'static str = "UDTPayment";
    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        UDTPayment(data)
    }
    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }
    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }
    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        UDTPaymentReader::from_slice(slice).map(|reader| reader.to_entity())
    }
    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        UDTPaymentReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }
    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }
    fn as_builder(self) -> Self::Builder {
        Self::new_builder()
            .type_hash(self.type_hash())
            .amount(self.amount())
    }
}
#[derive(Clone, Copy)]
pub struct UDTPaymentReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for UDTPaymentReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for UDTPaymentReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for UDTPaymentReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "type_hash", self.type_hash())?;
        write!(f, ", {}: {}", "amount", self.amount())?;
        write!(f, " }}")
    }
}
impl<'r> UDTPaymentReader<'r> {
    pub const TOTAL_SIZE: usize = 36;
    pub const FIELD_SIZE: [usize; 2] = [32, 4];
    pub const FIELD_COUNT: usize = 2;
    pub fn type_hash(&self) -> Byte32Reader<'r> {
        Byte32Reader::new_unchecked(&self.as_slice()[0..32])
    }
    pub fn amount(&self) -> Uint32Reader<'r> {
        Uint32Reader::new_unchecked(&self.as_slice()[32..36])
    }
}
impl<'r> molecule::prelude::Reader<'r> for UDTPaymentReader<'r> {
    type Entity = UDTPayment;
    const NAME: &'static str = "UDTPaymentReader";
    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().into())
    }
    fn new_unchecked(slice: &'r [u8]) -> Self {
        UDTPaymentReader(slice)
    }
    fn as_slice(&self) -> &'r [u8] {
        self.0
    }
    fn verify(slice: &[u8], _compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len != Self::TOTAL_SIZE {
            return ve!(Self, TotalSizeNotMatch, Self::TOTAL_SIZE, slice_len);
        }
        Ok(())
    }
}
#[derive(Debug, Default)]
pub struct UDTPaymentBuilder {
    pub(crate) type_hash: Byte32,
    pub(crate) amount: Uint32,
}
impl UDTPaymentBuilder {
    pub const TOTAL_SIZE: usize = 36;
    pub const FIELD_SIZE: [usize; 2] = [32, 4];
    pub const FIELD_COUNT: usize = 2;
    pub fn type_hash(mut self, v: Byte32) -> Self {
        self.type_hash = v;
        self
    }
    pub fn amount(mut self, v: Uint32) -> Self {
        self.amount = v;
        self
    }
}
impl molecule::prelude::Builder for UDTPaymentBuilder {
    type Entity = UDTPayment;
    const NAME: &'static str = "UDTPaymentBuilder";
    fn expected_length(&self) -> usize {
        Self::TOTAL_SIZE
    }
    fn write<W: ::molecule::io::Write>(&self, writer: &mut W) -> ::molecule::io::Result<()> {
        writer.write_all(self.type_hash.as_slice())?;
        writer.write_all(self.amount.as_slice())?;
        Ok(())
    }
    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        UDTPayment::new_unchecked(inner.into())
    }
}
#[derive(Clone)]
pub struct Tx(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for Tx {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for Tx {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for Tx {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "sender_index", self.sender_index())?;
        write!(f, ", {}: {}", "to_index", self.to_index())?;
        write!(f, ", {}: {}", "nonce", self.nonce())?;
        write!(f, ", {}: {}", "amount", self.amount())?;
        write!(f, ", {}: {}", "fee", self.fee())?;
        write!(f, ", {}: {}", "args", self.args())?;
        write!(f, ", {}: {}", "witness", self.witness())?;
        let extra_count = self.count_extra_fields();
        if extra_count != 0 {
            write!(f, ", .. ({} fields)", extra_count)?;
        }
        write!(f, " }}")
    }
}
impl ::core::default::Default for Tx {
    fn default() -> Self {
        let v: Vec<u8> = vec![
            76, 0, 0, 0, 32, 0, 0, 0, 40, 0, 0, 0, 48, 0, 0, 0, 52, 0, 0, 0, 60, 0, 0, 0, 68, 0, 0,
            0, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ];
        Tx::new_unchecked(v.into())
    }
}
impl Tx {
    pub const FIELD_COUNT: usize = 7;
    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }
    pub fn field_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }
    pub fn field_offsets(&self) -> &[[u8; 4]] {
        molecule::unpack_number_vec(&self.as_slice()[molecule::NUMBER_SIZE..])
    }
    pub fn count_extra_fields(&self) -> usize {
        self.field_count() - Self::FIELD_COUNT
    }
    pub fn has_extra_fields(&self) -> bool {
        Self::FIELD_COUNT != self.field_count()
    }
    pub fn sender_index(&self) -> Uint64 {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[0][..]) as usize;
        let end = molecule::unpack_number(&offsets[1][..]) as usize;
        Uint64::new_unchecked(self.0.slice(start, end))
    }
    pub fn to_index(&self) -> Uint64 {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[1][..]) as usize;
        let end = molecule::unpack_number(&offsets[2][..]) as usize;
        Uint64::new_unchecked(self.0.slice(start, end))
    }
    pub fn nonce(&self) -> Uint32 {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[2][..]) as usize;
        let end = molecule::unpack_number(&offsets[3][..]) as usize;
        Uint32::new_unchecked(self.0.slice(start, end))
    }
    pub fn amount(&self) -> Payment {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[3][..]) as usize;
        let end = molecule::unpack_number(&offsets[4][..]) as usize;
        Payment::new_unchecked(self.0.slice(start, end))
    }
    pub fn fee(&self) -> Payment {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[4][..]) as usize;
        let end = molecule::unpack_number(&offsets[5][..]) as usize;
        Payment::new_unchecked(self.0.slice(start, end))
    }
    pub fn args(&self) -> Bytes {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[5][..]) as usize;
        let end = molecule::unpack_number(&offsets[6][..]) as usize;
        Bytes::new_unchecked(self.0.slice(start, end))
    }
    pub fn witness(&self) -> Bytes {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[6][..]) as usize;
        if self.has_extra_fields() {
            let end = molecule::unpack_number(&offsets[7][..]) as usize;
            Bytes::new_unchecked(self.0.slice(start, end))
        } else {
            Bytes::new_unchecked(self.0.slice_from(start))
        }
    }
    pub fn as_reader<'r>(&'r self) -> TxReader<'r> {
        TxReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for Tx {
    type Builder = TxBuilder;
    const NAME: &'static str = "Tx";
    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        Tx(data)
    }
    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }
    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }
    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        TxReader::from_slice(slice).map(|reader| reader.to_entity())
    }
    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        TxReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }
    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }
    fn as_builder(self) -> Self::Builder {
        Self::new_builder()
            .sender_index(self.sender_index())
            .to_index(self.to_index())
            .nonce(self.nonce())
            .amount(self.amount())
            .fee(self.fee())
            .args(self.args())
            .witness(self.witness())
    }
}
#[derive(Clone, Copy)]
pub struct TxReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for TxReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for TxReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for TxReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "sender_index", self.sender_index())?;
        write!(f, ", {}: {}", "to_index", self.to_index())?;
        write!(f, ", {}: {}", "nonce", self.nonce())?;
        write!(f, ", {}: {}", "amount", self.amount())?;
        write!(f, ", {}: {}", "fee", self.fee())?;
        write!(f, ", {}: {}", "args", self.args())?;
        write!(f, ", {}: {}", "witness", self.witness())?;
        let extra_count = self.count_extra_fields();
        if extra_count != 0 {
            write!(f, ", .. ({} fields)", extra_count)?;
        }
        write!(f, " }}")
    }
}
impl<'r> TxReader<'r> {
    pub const FIELD_COUNT: usize = 7;
    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }
    pub fn field_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }
    pub fn field_offsets(&self) -> &[[u8; 4]] {
        molecule::unpack_number_vec(&self.as_slice()[molecule::NUMBER_SIZE..])
    }
    pub fn count_extra_fields(&self) -> usize {
        self.field_count() - Self::FIELD_COUNT
    }
    pub fn has_extra_fields(&self) -> bool {
        Self::FIELD_COUNT != self.field_count()
    }
    pub fn sender_index(&self) -> Uint64Reader<'r> {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[0][..]) as usize;
        let end = molecule::unpack_number(&offsets[1][..]) as usize;
        Uint64Reader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn to_index(&self) -> Uint64Reader<'r> {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[1][..]) as usize;
        let end = molecule::unpack_number(&offsets[2][..]) as usize;
        Uint64Reader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn nonce(&self) -> Uint32Reader<'r> {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[2][..]) as usize;
        let end = molecule::unpack_number(&offsets[3][..]) as usize;
        Uint32Reader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn amount(&self) -> PaymentReader<'r> {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[3][..]) as usize;
        let end = molecule::unpack_number(&offsets[4][..]) as usize;
        PaymentReader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn fee(&self) -> PaymentReader<'r> {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[4][..]) as usize;
        let end = molecule::unpack_number(&offsets[5][..]) as usize;
        PaymentReader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn args(&self) -> BytesReader<'r> {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[5][..]) as usize;
        let end = molecule::unpack_number(&offsets[6][..]) as usize;
        BytesReader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn witness(&self) -> BytesReader<'r> {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[6][..]) as usize;
        if self.has_extra_fields() {
            let end = molecule::unpack_number(&offsets[7][..]) as usize;
            BytesReader::new_unchecked(&self.as_slice()[start..end])
        } else {
            BytesReader::new_unchecked(&self.as_slice()[start..])
        }
    }
}
impl<'r> molecule::prelude::Reader<'r> for TxReader<'r> {
    type Entity = Tx;
    const NAME: &'static str = "TxReader";
    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().into())
    }
    fn new_unchecked(slice: &'r [u8]) -> Self {
        TxReader(slice)
    }
    fn as_slice(&self) -> &'r [u8] {
        self.0
    }
    fn verify(slice: &[u8], compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len < molecule::NUMBER_SIZE {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE, slice_len);
        }
        let total_size = molecule::unpack_number(slice) as usize;
        if slice_len != total_size {
            return ve!(Self, TotalSizeNotMatch, total_size, slice_len);
        }
        if slice_len == molecule::NUMBER_SIZE && Self::FIELD_COUNT == 0 {
            return Ok(());
        }
        if slice_len < molecule::NUMBER_SIZE * 2 {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE * 2, slice_len);
        }
        let offset_first = molecule::unpack_number(&slice[molecule::NUMBER_SIZE..]) as usize;
        if offset_first % 4 != 0 || offset_first < molecule::NUMBER_SIZE * 2 {
            return ve!(Self, OffsetsNotMatch);
        }
        let field_count = offset_first / 4 - 1;
        if field_count < Self::FIELD_COUNT {
            return ve!(Self, FieldCountNotMatch, Self::FIELD_COUNT, field_count);
        } else if !compatible && field_count > Self::FIELD_COUNT {
            return ve!(Self, FieldCountNotMatch, Self::FIELD_COUNT, field_count);
        };
        let header_size = molecule::NUMBER_SIZE * (field_count + 1);
        if slice_len < header_size {
            return ve!(Self, HeaderIsBroken, header_size, slice_len);
        }
        let ptr = molecule::unpack_number_vec(&slice[molecule::NUMBER_SIZE..]);
        let mut offsets: Vec<usize> = ptr[..field_count]
            .iter()
            .map(|x| molecule::unpack_number(&x[..]) as usize)
            .collect();
        offsets.push(total_size);
        if offsets.windows(2).any(|i| i[0] > i[1]) {
            return ve!(Self, OffsetsNotMatch);
        }
        Uint64Reader::verify(&slice[offsets[0]..offsets[1]], compatible)?;
        Uint64Reader::verify(&slice[offsets[1]..offsets[2]], compatible)?;
        Uint32Reader::verify(&slice[offsets[2]..offsets[3]], compatible)?;
        PaymentReader::verify(&slice[offsets[3]..offsets[4]], compatible)?;
        PaymentReader::verify(&slice[offsets[4]..offsets[5]], compatible)?;
        BytesReader::verify(&slice[offsets[5]..offsets[6]], compatible)?;
        BytesReader::verify(&slice[offsets[6]..offsets[7]], compatible)?;
        Ok(())
    }
}
#[derive(Debug, Default)]
pub struct TxBuilder {
    pub(crate) sender_index: Uint64,
    pub(crate) to_index: Uint64,
    pub(crate) nonce: Uint32,
    pub(crate) amount: Payment,
    pub(crate) fee: Payment,
    pub(crate) args: Bytes,
    pub(crate) witness: Bytes,
}
impl TxBuilder {
    pub const FIELD_COUNT: usize = 7;
    pub fn sender_index(mut self, v: Uint64) -> Self {
        self.sender_index = v;
        self
    }
    pub fn to_index(mut self, v: Uint64) -> Self {
        self.to_index = v;
        self
    }
    pub fn nonce(mut self, v: Uint32) -> Self {
        self.nonce = v;
        self
    }
    pub fn amount(mut self, v: Payment) -> Self {
        self.amount = v;
        self
    }
    pub fn fee(mut self, v: Payment) -> Self {
        self.fee = v;
        self
    }
    pub fn args(mut self, v: Bytes) -> Self {
        self.args = v;
        self
    }
    pub fn witness(mut self, v: Bytes) -> Self {
        self.witness = v;
        self
    }
}
impl molecule::prelude::Builder for TxBuilder {
    type Entity = Tx;
    const NAME: &'static str = "TxBuilder";
    fn expected_length(&self) -> usize {
        molecule::NUMBER_SIZE * (Self::FIELD_COUNT + 1)
            + self.sender_index.as_slice().len()
            + self.to_index.as_slice().len()
            + self.nonce.as_slice().len()
            + self.amount.as_slice().len()
            + self.fee.as_slice().len()
            + self.args.as_slice().len()
            + self.witness.as_slice().len()
    }
    fn write<W: ::molecule::io::Write>(&self, writer: &mut W) -> ::molecule::io::Result<()> {
        let mut total_size = molecule::NUMBER_SIZE * (Self::FIELD_COUNT + 1);
        let mut offsets = Vec::with_capacity(Self::FIELD_COUNT);
        offsets.push(total_size);
        total_size += self.sender_index.as_slice().len();
        offsets.push(total_size);
        total_size += self.to_index.as_slice().len();
        offsets.push(total_size);
        total_size += self.nonce.as_slice().len();
        offsets.push(total_size);
        total_size += self.amount.as_slice().len();
        offsets.push(total_size);
        total_size += self.fee.as_slice().len();
        offsets.push(total_size);
        total_size += self.args.as_slice().len();
        offsets.push(total_size);
        total_size += self.witness.as_slice().len();
        writer.write_all(&molecule::pack_number(total_size as molecule::Number))?;
        for offset in offsets.into_iter() {
            writer.write_all(&molecule::pack_number(offset as molecule::Number))?;
        }
        writer.write_all(self.sender_index.as_slice())?;
        writer.write_all(self.to_index.as_slice())?;
        writer.write_all(self.nonce.as_slice())?;
        writer.write_all(self.amount.as_slice())?;
        writer.write_all(self.fee.as_slice())?;
        writer.write_all(self.args.as_slice())?;
        writer.write_all(self.witness.as_slice())?;
        Ok(())
    }
    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        Tx::new_unchecked(inner.into())
    }
}
#[derive(Clone)]
pub struct TxVec(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for TxVec {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for TxVec {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for TxVec {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} [", Self::NAME)?;
        for i in 0..self.len() {
            if i == 0 {
                write!(f, "{}", self.get_unchecked(i))?;
            } else {
                write!(f, ", {}", self.get_unchecked(i))?;
            }
        }
        write!(f, "]")
    }
}
impl ::core::default::Default for TxVec {
    fn default() -> Self {
        let v: Vec<u8> = vec![4, 0, 0, 0];
        TxVec::new_unchecked(v.into())
    }
}
impl TxVec {
    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }
    pub fn item_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }
    pub fn item_offsets(&self) -> &[[u8; 4]] {
        molecule::unpack_number_vec(&self.as_slice()[molecule::NUMBER_SIZE..])
    }
    pub fn len(&self) -> usize {
        self.item_count()
    }
    pub fn is_empty(&self) -> bool {
        self.len() == 0
    }
    pub fn get(&self, idx: usize) -> Option<Tx> {
        if idx >= self.len() {
            None
        } else {
            Some(self.get_unchecked(idx))
        }
    }
    pub fn get_unchecked(&self, idx: usize) -> Tx {
        let offsets = self.item_offsets();
        let start = molecule::unpack_number(&offsets[idx][..]) as usize;
        if idx == self.len() - 1 {
            Tx::new_unchecked(self.0.slice_from(start))
        } else {
            let end = molecule::unpack_number(&offsets[idx + 1][..]) as usize;
            Tx::new_unchecked(self.0.slice(start, end))
        }
    }
    pub fn as_reader<'r>(&'r self) -> TxVecReader<'r> {
        TxVecReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for TxVec {
    type Builder = TxVecBuilder;
    const NAME: &'static str = "TxVec";
    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        TxVec(data)
    }
    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }
    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }
    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        TxVecReader::from_slice(slice).map(|reader| reader.to_entity())
    }
    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        TxVecReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }
    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }
    fn as_builder(self) -> Self::Builder {
        Self::new_builder().extend(self.into_iter())
    }
}
#[derive(Clone, Copy)]
pub struct TxVecReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for TxVecReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for TxVecReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for TxVecReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} [", Self::NAME)?;
        for i in 0..self.len() {
            if i == 0 {
                write!(f, "{}", self.get_unchecked(i))?;
            } else {
                write!(f, ", {}", self.get_unchecked(i))?;
            }
        }
        write!(f, "]")
    }
}
impl<'r> TxVecReader<'r> {
    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }
    pub fn item_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }
    pub fn item_offsets(&self) -> &[[u8; 4]] {
        molecule::unpack_number_vec(&self.as_slice()[molecule::NUMBER_SIZE..])
    }
    pub fn len(&self) -> usize {
        self.item_count()
    }
    pub fn is_empty(&self) -> bool {
        self.len() == 0
    }
    pub fn get(&self, idx: usize) -> Option<TxReader<'r>> {
        if idx >= self.len() {
            None
        } else {
            Some(self.get_unchecked(idx))
        }
    }
    pub fn get_unchecked(&self, idx: usize) -> TxReader<'r> {
        let offsets = self.item_offsets();
        let start = molecule::unpack_number(&offsets[idx][..]) as usize;
        if idx == self.len() - 1 {
            TxReader::new_unchecked(&self.as_slice()[start..])
        } else {
            let end = molecule::unpack_number(&offsets[idx + 1][..]) as usize;
            TxReader::new_unchecked(&self.as_slice()[start..end])
        }
    }
}
impl<'r> molecule::prelude::Reader<'r> for TxVecReader<'r> {
    type Entity = TxVec;
    const NAME: &'static str = "TxVecReader";
    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().into())
    }
    fn new_unchecked(slice: &'r [u8]) -> Self {
        TxVecReader(slice)
    }
    fn as_slice(&self) -> &'r [u8] {
        self.0
    }
    fn verify(slice: &[u8], compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len < molecule::NUMBER_SIZE {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE, slice_len);
        }
        let total_size = molecule::unpack_number(slice) as usize;
        if slice_len != total_size {
            return ve!(Self, TotalSizeNotMatch, total_size, slice_len);
        }
        if slice_len == molecule::NUMBER_SIZE {
            return Ok(());
        }
        if slice_len < molecule::NUMBER_SIZE * 2 {
            return ve!(
                Self,
                TotalSizeNotMatch,
                molecule::NUMBER_SIZE * 2,
                slice_len
            );
        }
        let offset_first = molecule::unpack_number(&slice[molecule::NUMBER_SIZE..]) as usize;
        if offset_first % 4 != 0 || offset_first < molecule::NUMBER_SIZE * 2 {
            return ve!(Self, OffsetsNotMatch);
        }
        let item_count = offset_first / 4 - 1;
        let header_size = molecule::NUMBER_SIZE * (item_count + 1);
        if slice_len < header_size {
            return ve!(Self, HeaderIsBroken, header_size, slice_len);
        }
        let ptr = molecule::unpack_number_vec(&slice[molecule::NUMBER_SIZE..]);
        let mut offsets: Vec<usize> = ptr[..item_count]
            .iter()
            .map(|x| molecule::unpack_number(&x[..]) as usize)
            .collect();
        offsets.push(total_size);
        if offsets.windows(2).any(|i| i[0] > i[1]) {
            return ve!(Self, OffsetsNotMatch);
        }
        for pair in offsets.windows(2) {
            let start = pair[0];
            let end = pair[1];
            TxReader::verify(&slice[start..end], compatible)?;
        }
        Ok(())
    }
}
#[derive(Debug, Default)]
pub struct TxVecBuilder(pub(crate) Vec<Tx>);
impl TxVecBuilder {
    pub fn set(mut self, v: Vec<Tx>) -> Self {
        self.0 = v;
        self
    }
    pub fn push(mut self, v: Tx) -> Self {
        self.0.push(v);
        self
    }
    pub fn extend<T: ::core::iter::IntoIterator<Item = Tx>>(mut self, iter: T) -> Self {
        for elem in iter {
            self.0.push(elem);
        }
        self
    }
}
impl molecule::prelude::Builder for TxVecBuilder {
    type Entity = TxVec;
    const NAME: &'static str = "TxVecBuilder";
    fn expected_length(&self) -> usize {
        molecule::NUMBER_SIZE * (self.0.len() + 1)
            + self
                .0
                .iter()
                .map(|inner| inner.as_slice().len())
                .sum::<usize>()
    }
    fn write<W: ::molecule::io::Write>(&self, writer: &mut W) -> ::molecule::io::Result<()> {
        let item_count = self.0.len();
        if item_count == 0 {
            writer.write_all(&molecule::pack_number(
                molecule::NUMBER_SIZE as molecule::Number,
            ))?;
        } else {
            let (total_size, offsets) = self.0.iter().fold(
                (
                    molecule::NUMBER_SIZE * (item_count + 1),
                    Vec::with_capacity(item_count),
                ),
                |(start, mut offsets), inner| {
                    offsets.push(start);
                    (start + inner.as_slice().len(), offsets)
                },
            );
            writer.write_all(&molecule::pack_number(total_size as molecule::Number))?;
            for offset in offsets.into_iter() {
                writer.write_all(&molecule::pack_number(offset as molecule::Number))?;
            }
            for inner in self.0.iter() {
                writer.write_all(inner.as_slice())?;
            }
        }
        Ok(())
    }
    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        TxVec::new_unchecked(inner.into())
    }
}
pub struct TxVecIterator(TxVec, usize, usize);
impl ::core::iter::Iterator for TxVecIterator {
    type Item = Tx;
    fn next(&mut self) -> Option<Self::Item> {
        if self.1 >= self.2 {
            None
        } else {
            let ret = self.0.get_unchecked(self.1);
            self.1 += 1;
            Some(ret)
        }
    }
}
impl ::core::iter::ExactSizeIterator for TxVecIterator {
    fn len(&self) -> usize {
        self.2 - self.1
    }
}
impl ::core::iter::IntoIterator for TxVec {
    type Item = Tx;
    type IntoIter = TxVecIterator;
    fn into_iter(self) -> Self::IntoIter {
        let len = self.len();
        TxVecIterator(self, 0, len)
    }
}
impl<'r> TxVecReader<'r> {
    pub fn iter<'t>(&'t self) -> TxVecReaderIterator<'t, 'r> {
        TxVecReaderIterator(&self, 0, self.len())
    }
}
pub struct TxVecReaderIterator<'t, 'r>(&'t TxVecReader<'r>, usize, usize);
impl<'t: 'r, 'r> ::core::iter::Iterator for TxVecReaderIterator<'t, 'r> {
    type Item = TxReader<'t>;
    fn next(&mut self) -> Option<Self::Item> {
        if self.1 >= self.2 {
            None
        } else {
            let ret = self.0.get_unchecked(self.1);
            self.1 += 1;
            Some(ret)
        }
    }
}
impl<'t: 'r, 'r> ::core::iter::ExactSizeIterator for TxVecReaderIterator<'t, 'r> {
    fn len(&self) -> usize {
        self.2 - self.1
    }
}
#[derive(Clone)]
pub struct AgBlock(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for AgBlock {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for AgBlock {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for AgBlock {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "number", self.number())?;
        write!(f, ", {}: {}", "tx_root", self.tx_root())?;
        write!(f, ", {}: {}", "txs_count", self.txs_count())?;
        write!(f, ", {}: {}", "prev_account_root", self.prev_account_root())?;
        write!(
            f,
            ", {}: {}",
            "prev_account_count",
            self.prev_account_count()
        )?;
        write!(f, ", {}: {}", "account_root", self.account_root())?;
        write!(f, ", {}: {}", "ag_sig", self.ag_sig())?;
        write!(f, ", {}: {}", "ag_index", self.ag_index())?;
        let extra_count = self.count_extra_fields();
        if extra_count != 0 {
            write!(f, ", .. ({} fields)", extra_count)?;
        }
        write!(f, " }}")
    }
}
impl ::core::default::Default for AgBlock {
    fn default() -> Self {
        let v: Vec<u8> = vec![
            225, 0, 0, 0, 36, 0, 0, 0, 44, 0, 0, 0, 76, 0, 0, 0, 80, 0, 0, 0, 112, 0, 0, 0, 120, 0,
            0, 0, 152, 0, 0, 0, 217, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ];
        AgBlock::new_unchecked(v.into())
    }
}
impl AgBlock {
    pub const FIELD_COUNT: usize = 8;
    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }
    pub fn field_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }
    pub fn field_offsets(&self) -> &[[u8; 4]] {
        molecule::unpack_number_vec(&self.as_slice()[molecule::NUMBER_SIZE..])
    }
    pub fn count_extra_fields(&self) -> usize {
        self.field_count() - Self::FIELD_COUNT
    }
    pub fn has_extra_fields(&self) -> bool {
        Self::FIELD_COUNT != self.field_count()
    }
    pub fn number(&self) -> Uint64 {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[0][..]) as usize;
        let end = molecule::unpack_number(&offsets[1][..]) as usize;
        Uint64::new_unchecked(self.0.slice(start, end))
    }
    pub fn tx_root(&self) -> Byte32 {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[1][..]) as usize;
        let end = molecule::unpack_number(&offsets[2][..]) as usize;
        Byte32::new_unchecked(self.0.slice(start, end))
    }
    pub fn txs_count(&self) -> Uint32 {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[2][..]) as usize;
        let end = molecule::unpack_number(&offsets[3][..]) as usize;
        Uint32::new_unchecked(self.0.slice(start, end))
    }
    pub fn prev_account_root(&self) -> Byte32 {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[3][..]) as usize;
        let end = molecule::unpack_number(&offsets[4][..]) as usize;
        Byte32::new_unchecked(self.0.slice(start, end))
    }
    pub fn prev_account_count(&self) -> Uint64 {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[4][..]) as usize;
        let end = molecule::unpack_number(&offsets[5][..]) as usize;
        Uint64::new_unchecked(self.0.slice(start, end))
    }
    pub fn account_root(&self) -> Byte32 {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[5][..]) as usize;
        let end = molecule::unpack_number(&offsets[6][..]) as usize;
        Byte32::new_unchecked(self.0.slice(start, end))
    }
    pub fn ag_sig(&self) -> Byte65 {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[6][..]) as usize;
        let end = molecule::unpack_number(&offsets[7][..]) as usize;
        Byte65::new_unchecked(self.0.slice(start, end))
    }
    pub fn ag_index(&self) -> Uint64 {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[7][..]) as usize;
        if self.has_extra_fields() {
            let end = molecule::unpack_number(&offsets[8][..]) as usize;
            Uint64::new_unchecked(self.0.slice(start, end))
        } else {
            Uint64::new_unchecked(self.0.slice_from(start))
        }
    }
    pub fn as_reader<'r>(&'r self) -> AgBlockReader<'r> {
        AgBlockReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for AgBlock {
    type Builder = AgBlockBuilder;
    const NAME: &'static str = "AgBlock";
    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        AgBlock(data)
    }
    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }
    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }
    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        AgBlockReader::from_slice(slice).map(|reader| reader.to_entity())
    }
    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        AgBlockReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }
    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }
    fn as_builder(self) -> Self::Builder {
        Self::new_builder()
            .number(self.number())
            .tx_root(self.tx_root())
            .txs_count(self.txs_count())
            .prev_account_root(self.prev_account_root())
            .prev_account_count(self.prev_account_count())
            .account_root(self.account_root())
            .ag_sig(self.ag_sig())
            .ag_index(self.ag_index())
    }
}
#[derive(Clone, Copy)]
pub struct AgBlockReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for AgBlockReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for AgBlockReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for AgBlockReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "number", self.number())?;
        write!(f, ", {}: {}", "tx_root", self.tx_root())?;
        write!(f, ", {}: {}", "txs_count", self.txs_count())?;
        write!(f, ", {}: {}", "prev_account_root", self.prev_account_root())?;
        write!(
            f,
            ", {}: {}",
            "prev_account_count",
            self.prev_account_count()
        )?;
        write!(f, ", {}: {}", "account_root", self.account_root())?;
        write!(f, ", {}: {}", "ag_sig", self.ag_sig())?;
        write!(f, ", {}: {}", "ag_index", self.ag_index())?;
        let extra_count = self.count_extra_fields();
        if extra_count != 0 {
            write!(f, ", .. ({} fields)", extra_count)?;
        }
        write!(f, " }}")
    }
}
impl<'r> AgBlockReader<'r> {
    pub const FIELD_COUNT: usize = 8;
    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }
    pub fn field_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }
    pub fn field_offsets(&self) -> &[[u8; 4]] {
        molecule::unpack_number_vec(&self.as_slice()[molecule::NUMBER_SIZE..])
    }
    pub fn count_extra_fields(&self) -> usize {
        self.field_count() - Self::FIELD_COUNT
    }
    pub fn has_extra_fields(&self) -> bool {
        Self::FIELD_COUNT != self.field_count()
    }
    pub fn number(&self) -> Uint64Reader<'r> {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[0][..]) as usize;
        let end = molecule::unpack_number(&offsets[1][..]) as usize;
        Uint64Reader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn tx_root(&self) -> Byte32Reader<'r> {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[1][..]) as usize;
        let end = molecule::unpack_number(&offsets[2][..]) as usize;
        Byte32Reader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn txs_count(&self) -> Uint32Reader<'r> {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[2][..]) as usize;
        let end = molecule::unpack_number(&offsets[3][..]) as usize;
        Uint32Reader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn prev_account_root(&self) -> Byte32Reader<'r> {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[3][..]) as usize;
        let end = molecule::unpack_number(&offsets[4][..]) as usize;
        Byte32Reader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn prev_account_count(&self) -> Uint64Reader<'r> {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[4][..]) as usize;
        let end = molecule::unpack_number(&offsets[5][..]) as usize;
        Uint64Reader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn account_root(&self) -> Byte32Reader<'r> {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[5][..]) as usize;
        let end = molecule::unpack_number(&offsets[6][..]) as usize;
        Byte32Reader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn ag_sig(&self) -> Byte65Reader<'r> {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[6][..]) as usize;
        let end = molecule::unpack_number(&offsets[7][..]) as usize;
        Byte65Reader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn ag_index(&self) -> Uint64Reader<'r> {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[7][..]) as usize;
        if self.has_extra_fields() {
            let end = molecule::unpack_number(&offsets[8][..]) as usize;
            Uint64Reader::new_unchecked(&self.as_slice()[start..end])
        } else {
            Uint64Reader::new_unchecked(&self.as_slice()[start..])
        }
    }
}
impl<'r> molecule::prelude::Reader<'r> for AgBlockReader<'r> {
    type Entity = AgBlock;
    const NAME: &'static str = "AgBlockReader";
    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().into())
    }
    fn new_unchecked(slice: &'r [u8]) -> Self {
        AgBlockReader(slice)
    }
    fn as_slice(&self) -> &'r [u8] {
        self.0
    }
    fn verify(slice: &[u8], compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len < molecule::NUMBER_SIZE {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE, slice_len);
        }
        let total_size = molecule::unpack_number(slice) as usize;
        if slice_len != total_size {
            return ve!(Self, TotalSizeNotMatch, total_size, slice_len);
        }
        if slice_len == molecule::NUMBER_SIZE && Self::FIELD_COUNT == 0 {
            return Ok(());
        }
        if slice_len < molecule::NUMBER_SIZE * 2 {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE * 2, slice_len);
        }
        let offset_first = molecule::unpack_number(&slice[molecule::NUMBER_SIZE..]) as usize;
        if offset_first % 4 != 0 || offset_first < molecule::NUMBER_SIZE * 2 {
            return ve!(Self, OffsetsNotMatch);
        }
        let field_count = offset_first / 4 - 1;
        if field_count < Self::FIELD_COUNT {
            return ve!(Self, FieldCountNotMatch, Self::FIELD_COUNT, field_count);
        } else if !compatible && field_count > Self::FIELD_COUNT {
            return ve!(Self, FieldCountNotMatch, Self::FIELD_COUNT, field_count);
        };
        let header_size = molecule::NUMBER_SIZE * (field_count + 1);
        if slice_len < header_size {
            return ve!(Self, HeaderIsBroken, header_size, slice_len);
        }
        let ptr = molecule::unpack_number_vec(&slice[molecule::NUMBER_SIZE..]);
        let mut offsets: Vec<usize> = ptr[..field_count]
            .iter()
            .map(|x| molecule::unpack_number(&x[..]) as usize)
            .collect();
        offsets.push(total_size);
        if offsets.windows(2).any(|i| i[0] > i[1]) {
            return ve!(Self, OffsetsNotMatch);
        }
        Uint64Reader::verify(&slice[offsets[0]..offsets[1]], compatible)?;
        Byte32Reader::verify(&slice[offsets[1]..offsets[2]], compatible)?;
        Uint32Reader::verify(&slice[offsets[2]..offsets[3]], compatible)?;
        Byte32Reader::verify(&slice[offsets[3]..offsets[4]], compatible)?;
        Uint64Reader::verify(&slice[offsets[4]..offsets[5]], compatible)?;
        Byte32Reader::verify(&slice[offsets[5]..offsets[6]], compatible)?;
        Byte65Reader::verify(&slice[offsets[6]..offsets[7]], compatible)?;
        Uint64Reader::verify(&slice[offsets[7]..offsets[8]], compatible)?;
        Ok(())
    }
}
#[derive(Debug, Default)]
pub struct AgBlockBuilder {
    pub(crate) number: Uint64,
    pub(crate) tx_root: Byte32,
    pub(crate) txs_count: Uint32,
    pub(crate) prev_account_root: Byte32,
    pub(crate) prev_account_count: Uint64,
    pub(crate) account_root: Byte32,
    pub(crate) ag_sig: Byte65,
    pub(crate) ag_index: Uint64,
}
impl AgBlockBuilder {
    pub const FIELD_COUNT: usize = 8;
    pub fn number(mut self, v: Uint64) -> Self {
        self.number = v;
        self
    }
    pub fn tx_root(mut self, v: Byte32) -> Self {
        self.tx_root = v;
        self
    }
    pub fn txs_count(mut self, v: Uint32) -> Self {
        self.txs_count = v;
        self
    }
    pub fn prev_account_root(mut self, v: Byte32) -> Self {
        self.prev_account_root = v;
        self
    }
    pub fn prev_account_count(mut self, v: Uint64) -> Self {
        self.prev_account_count = v;
        self
    }
    pub fn account_root(mut self, v: Byte32) -> Self {
        self.account_root = v;
        self
    }
    pub fn ag_sig(mut self, v: Byte65) -> Self {
        self.ag_sig = v;
        self
    }
    pub fn ag_index(mut self, v: Uint64) -> Self {
        self.ag_index = v;
        self
    }
}
impl molecule::prelude::Builder for AgBlockBuilder {
    type Entity = AgBlock;
    const NAME: &'static str = "AgBlockBuilder";
    fn expected_length(&self) -> usize {
        molecule::NUMBER_SIZE * (Self::FIELD_COUNT + 1)
            + self.number.as_slice().len()
            + self.tx_root.as_slice().len()
            + self.txs_count.as_slice().len()
            + self.prev_account_root.as_slice().len()
            + self.prev_account_count.as_slice().len()
            + self.account_root.as_slice().len()
            + self.ag_sig.as_slice().len()
            + self.ag_index.as_slice().len()
    }
    fn write<W: ::molecule::io::Write>(&self, writer: &mut W) -> ::molecule::io::Result<()> {
        let mut total_size = molecule::NUMBER_SIZE * (Self::FIELD_COUNT + 1);
        let mut offsets = Vec::with_capacity(Self::FIELD_COUNT);
        offsets.push(total_size);
        total_size += self.number.as_slice().len();
        offsets.push(total_size);
        total_size += self.tx_root.as_slice().len();
        offsets.push(total_size);
        total_size += self.txs_count.as_slice().len();
        offsets.push(total_size);
        total_size += self.prev_account_root.as_slice().len();
        offsets.push(total_size);
        total_size += self.prev_account_count.as_slice().len();
        offsets.push(total_size);
        total_size += self.account_root.as_slice().len();
        offsets.push(total_size);
        total_size += self.ag_sig.as_slice().len();
        offsets.push(total_size);
        total_size += self.ag_index.as_slice().len();
        writer.write_all(&molecule::pack_number(total_size as molecule::Number))?;
        for offset in offsets.into_iter() {
            writer.write_all(&molecule::pack_number(offset as molecule::Number))?;
        }
        writer.write_all(self.number.as_slice())?;
        writer.write_all(self.tx_root.as_slice())?;
        writer.write_all(self.txs_count.as_slice())?;
        writer.write_all(self.prev_account_root.as_slice())?;
        writer.write_all(self.prev_account_count.as_slice())?;
        writer.write_all(self.account_root.as_slice())?;
        writer.write_all(self.ag_sig.as_slice())?;
        writer.write_all(self.ag_index.as_slice())?;
        Ok(())
    }
    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        AgBlock::new_unchecked(inner.into())
    }
}
#[derive(Clone)]
pub struct Action(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for Action {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for Action {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for Action {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}(", Self::NAME)?;
        self.to_enum().display_inner(f)?;
        write!(f, ")")
    }
}
impl ::core::default::Default for Action {
    fn default() -> Self {
        let v: Vec<u8> = vec![
            0, 0, 0, 0, 84, 0, 0, 0, 12, 0, 0, 0, 64, 0, 0, 0, 52, 0, 0, 0, 20, 0, 0, 0, 28, 0, 0,
            0, 28, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 12, 0, 0, 0, 16, 0, 0, 0, 4, 0, 0,
            0, 0, 0, 0, 0,
        ];
        Action::new_unchecked(v.into())
    }
}
impl Action {
    pub const ITEM_COUNT: usize = 4;
    pub fn item_id(&self) -> molecule::Number {
        molecule::unpack_number(self.as_slice())
    }
    pub fn to_enum(&self) -> ActionUnion {
        let inner = self.0.slice_from(molecule::NUMBER_SIZE);
        match self.item_id() {
            0 => Register::new_unchecked(inner).into(),
            1 => Deposit::new_unchecked(inner).into(),
            2 => SubmitBlock::new_unchecked(inner).into(),
            3 => RevertBlock::new_unchecked(inner).into(),
            _ => panic!("{}: invalid data", Self::NAME),
        }
    }
    pub fn as_reader<'r>(&'r self) -> ActionReader<'r> {
        ActionReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for Action {
    type Builder = ActionBuilder;
    const NAME: &'static str = "Action";
    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        Action(data)
    }
    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }
    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }
    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        ActionReader::from_slice(slice).map(|reader| reader.to_entity())
    }
    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        ActionReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }
    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }
    fn as_builder(self) -> Self::Builder {
        Self::new_builder().set(self.to_enum())
    }
}
#[derive(Clone, Copy)]
pub struct ActionReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for ActionReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for ActionReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for ActionReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}(", Self::NAME)?;
        self.to_enum().display_inner(f)?;
        write!(f, ")")
    }
}
impl<'r> ActionReader<'r> {
    pub const ITEM_COUNT: usize = 4;
    pub fn item_id(&self) -> molecule::Number {
        molecule::unpack_number(self.as_slice())
    }
    pub fn to_enum(&self) -> ActionUnionReader<'r> {
        let inner = &self.as_slice()[molecule::NUMBER_SIZE..];
        match self.item_id() {
            0 => RegisterReader::new_unchecked(inner).into(),
            1 => DepositReader::new_unchecked(inner).into(),
            2 => SubmitBlockReader::new_unchecked(inner).into(),
            3 => RevertBlockReader::new_unchecked(inner).into(),
            _ => panic!("{}: invalid data", Self::NAME),
        }
    }
}
impl<'r> molecule::prelude::Reader<'r> for ActionReader<'r> {
    type Entity = Action;
    const NAME: &'static str = "ActionReader";
    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().into())
    }
    fn new_unchecked(slice: &'r [u8]) -> Self {
        ActionReader(slice)
    }
    fn as_slice(&self) -> &'r [u8] {
        self.0
    }
    fn verify(slice: &[u8], compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len < molecule::NUMBER_SIZE {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE, slice_len);
        }
        let item_id = molecule::unpack_number(slice);
        let inner_slice = &slice[molecule::NUMBER_SIZE..];
        match item_id {
            0 => RegisterReader::verify(inner_slice, compatible),
            1 => DepositReader::verify(inner_slice, compatible),
            2 => SubmitBlockReader::verify(inner_slice, compatible),
            3 => RevertBlockReader::verify(inner_slice, compatible),
            _ => ve!(Self, UnknownItem, Self::ITEM_COUNT, item_id),
        }?;
        Ok(())
    }
}
#[derive(Debug, Default)]
pub struct ActionBuilder(pub(crate) ActionUnion);
impl ActionBuilder {
    pub const ITEM_COUNT: usize = 4;
    pub fn set<I>(mut self, v: I) -> Self
    where
        I: ::core::convert::Into<ActionUnion>,
    {
        self.0 = v.into();
        self
    }
}
impl molecule::prelude::Builder for ActionBuilder {
    type Entity = Action;
    const NAME: &'static str = "ActionBuilder";
    fn expected_length(&self) -> usize {
        molecule::NUMBER_SIZE + self.0.as_slice().len()
    }
    fn write<W: ::molecule::io::Write>(&self, writer: &mut W) -> ::molecule::io::Result<()> {
        writer.write_all(&molecule::pack_number(self.0.item_id()))?;
        writer.write_all(self.0.as_slice())
    }
    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        Action::new_unchecked(inner.into())
    }
}
#[derive(Debug, Clone)]
pub enum ActionUnion {
    Register(Register),
    Deposit(Deposit),
    SubmitBlock(SubmitBlock),
    RevertBlock(RevertBlock),
}
#[derive(Debug, Clone, Copy)]
pub enum ActionUnionReader<'r> {
    Register(RegisterReader<'r>),
    Deposit(DepositReader<'r>),
    SubmitBlock(SubmitBlockReader<'r>),
    RevertBlock(RevertBlockReader<'r>),
}
impl ::core::default::Default for ActionUnion {
    fn default() -> Self {
        ActionUnion::Register(::core::default::Default::default())
    }
}
impl ::core::fmt::Display for ActionUnion {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        match self {
            ActionUnion::Register(ref item) => {
                write!(f, "{}::{}({})", Self::NAME, Register::NAME, item)
            }
            ActionUnion::Deposit(ref item) => {
                write!(f, "{}::{}({})", Self::NAME, Deposit::NAME, item)
            }
            ActionUnion::SubmitBlock(ref item) => {
                write!(f, "{}::{}({})", Self::NAME, SubmitBlock::NAME, item)
            }
            ActionUnion::RevertBlock(ref item) => {
                write!(f, "{}::{}({})", Self::NAME, RevertBlock::NAME, item)
            }
        }
    }
}
impl<'r> ::core::fmt::Display for ActionUnionReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        match self {
            ActionUnionReader::Register(ref item) => {
                write!(f, "{}::{}({})", Self::NAME, Register::NAME, item)
            }
            ActionUnionReader::Deposit(ref item) => {
                write!(f, "{}::{}({})", Self::NAME, Deposit::NAME, item)
            }
            ActionUnionReader::SubmitBlock(ref item) => {
                write!(f, "{}::{}({})", Self::NAME, SubmitBlock::NAME, item)
            }
            ActionUnionReader::RevertBlock(ref item) => {
                write!(f, "{}::{}({})", Self::NAME, RevertBlock::NAME, item)
            }
        }
    }
}
impl ActionUnion {
    pub(crate) fn display_inner(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        match self {
            ActionUnion::Register(ref item) => write!(f, "{}", item),
            ActionUnion::Deposit(ref item) => write!(f, "{}", item),
            ActionUnion::SubmitBlock(ref item) => write!(f, "{}", item),
            ActionUnion::RevertBlock(ref item) => write!(f, "{}", item),
        }
    }
}
impl<'r> ActionUnionReader<'r> {
    pub(crate) fn display_inner(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        match self {
            ActionUnionReader::Register(ref item) => write!(f, "{}", item),
            ActionUnionReader::Deposit(ref item) => write!(f, "{}", item),
            ActionUnionReader::SubmitBlock(ref item) => write!(f, "{}", item),
            ActionUnionReader::RevertBlock(ref item) => write!(f, "{}", item),
        }
    }
}
impl ::core::convert::From<Register> for ActionUnion {
    fn from(item: Register) -> Self {
        ActionUnion::Register(item)
    }
}
impl ::core::convert::From<Deposit> for ActionUnion {
    fn from(item: Deposit) -> Self {
        ActionUnion::Deposit(item)
    }
}
impl ::core::convert::From<SubmitBlock> for ActionUnion {
    fn from(item: SubmitBlock) -> Self {
        ActionUnion::SubmitBlock(item)
    }
}
impl ::core::convert::From<RevertBlock> for ActionUnion {
    fn from(item: RevertBlock) -> Self {
        ActionUnion::RevertBlock(item)
    }
}
impl<'r> ::core::convert::From<RegisterReader<'r>> for ActionUnionReader<'r> {
    fn from(item: RegisterReader<'r>) -> Self {
        ActionUnionReader::Register(item)
    }
}
impl<'r> ::core::convert::From<DepositReader<'r>> for ActionUnionReader<'r> {
    fn from(item: DepositReader<'r>) -> Self {
        ActionUnionReader::Deposit(item)
    }
}
impl<'r> ::core::convert::From<SubmitBlockReader<'r>> for ActionUnionReader<'r> {
    fn from(item: SubmitBlockReader<'r>) -> Self {
        ActionUnionReader::SubmitBlock(item)
    }
}
impl<'r> ::core::convert::From<RevertBlockReader<'r>> for ActionUnionReader<'r> {
    fn from(item: RevertBlockReader<'r>) -> Self {
        ActionUnionReader::RevertBlock(item)
    }
}
impl ActionUnion {
    pub const NAME: &'static str = "ActionUnion";
    pub fn as_bytes(&self) -> molecule::bytes::Bytes {
        match self {
            ActionUnion::Register(item) => item.as_bytes(),
            ActionUnion::Deposit(item) => item.as_bytes(),
            ActionUnion::SubmitBlock(item) => item.as_bytes(),
            ActionUnion::RevertBlock(item) => item.as_bytes(),
        }
    }
    pub fn as_slice(&self) -> &[u8] {
        match self {
            ActionUnion::Register(item) => item.as_slice(),
            ActionUnion::Deposit(item) => item.as_slice(),
            ActionUnion::SubmitBlock(item) => item.as_slice(),
            ActionUnion::RevertBlock(item) => item.as_slice(),
        }
    }
    pub fn item_id(&self) -> molecule::Number {
        match self {
            ActionUnion::Register(_) => 0,
            ActionUnion::Deposit(_) => 1,
            ActionUnion::SubmitBlock(_) => 2,
            ActionUnion::RevertBlock(_) => 3,
        }
    }
    pub fn item_name(&self) -> &str {
        match self {
            ActionUnion::Register(_) => "Register",
            ActionUnion::Deposit(_) => "Deposit",
            ActionUnion::SubmitBlock(_) => "SubmitBlock",
            ActionUnion::RevertBlock(_) => "RevertBlock",
        }
    }
    pub fn as_reader<'r>(&'r self) -> ActionUnionReader<'r> {
        match self {
            ActionUnion::Register(item) => item.as_reader().into(),
            ActionUnion::Deposit(item) => item.as_reader().into(),
            ActionUnion::SubmitBlock(item) => item.as_reader().into(),
            ActionUnion::RevertBlock(item) => item.as_reader().into(),
        }
    }
}
impl<'r> ActionUnionReader<'r> {
    pub const NAME: &'r str = "ActionUnionReader";
    pub fn as_slice(&self) -> &'r [u8] {
        match self {
            ActionUnionReader::Register(item) => item.as_slice(),
            ActionUnionReader::Deposit(item) => item.as_slice(),
            ActionUnionReader::SubmitBlock(item) => item.as_slice(),
            ActionUnionReader::RevertBlock(item) => item.as_slice(),
        }
    }
    pub fn item_id(&self) -> molecule::Number {
        match self {
            ActionUnionReader::Register(_) => 0,
            ActionUnionReader::Deposit(_) => 1,
            ActionUnionReader::SubmitBlock(_) => 2,
            ActionUnionReader::RevertBlock(_) => 3,
        }
    }
    pub fn item_name(&self) -> &str {
        match self {
            ActionUnionReader::Register(_) => "Register",
            ActionUnionReader::Deposit(_) => "Deposit",
            ActionUnionReader::SubmitBlock(_) => "SubmitBlock",
            ActionUnionReader::RevertBlock(_) => "RevertBlock",
        }
    }
}
#[derive(Clone)]
pub struct Register(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for Register {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for Register {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for Register {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "account", self.account())?;
        write!(f, ", {}: {}", "proof", self.proof())?;
        let extra_count = self.count_extra_fields();
        if extra_count != 0 {
            write!(f, ", .. ({} fields)", extra_count)?;
        }
        write!(f, " }}")
    }
}
impl ::core::default::Default for Register {
    fn default() -> Self {
        let v: Vec<u8> = vec![
            84, 0, 0, 0, 12, 0, 0, 0, 64, 0, 0, 0, 52, 0, 0, 0, 20, 0, 0, 0, 28, 0, 0, 0, 28, 0, 0,
            0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 12, 0, 0, 0, 16, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0,
        ];
        Register::new_unchecked(v.into())
    }
}
impl Register {
    pub const FIELD_COUNT: usize = 2;
    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }
    pub fn field_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }
    pub fn field_offsets(&self) -> &[[u8; 4]] {
        molecule::unpack_number_vec(&self.as_slice()[molecule::NUMBER_SIZE..])
    }
    pub fn count_extra_fields(&self) -> usize {
        self.field_count() - Self::FIELD_COUNT
    }
    pub fn has_extra_fields(&self) -> bool {
        Self::FIELD_COUNT != self.field_count()
    }
    pub fn account(&self) -> Account {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[0][..]) as usize;
        let end = molecule::unpack_number(&offsets[1][..]) as usize;
        Account::new_unchecked(self.0.slice(start, end))
    }
    pub fn proof(&self) -> SMTProof {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[1][..]) as usize;
        if self.has_extra_fields() {
            let end = molecule::unpack_number(&offsets[2][..]) as usize;
            SMTProof::new_unchecked(self.0.slice(start, end))
        } else {
            SMTProof::new_unchecked(self.0.slice_from(start))
        }
    }
    pub fn as_reader<'r>(&'r self) -> RegisterReader<'r> {
        RegisterReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for Register {
    type Builder = RegisterBuilder;
    const NAME: &'static str = "Register";
    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        Register(data)
    }
    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }
    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }
    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        RegisterReader::from_slice(slice).map(|reader| reader.to_entity())
    }
    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        RegisterReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }
    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }
    fn as_builder(self) -> Self::Builder {
        Self::new_builder()
            .account(self.account())
            .proof(self.proof())
    }
}
#[derive(Clone, Copy)]
pub struct RegisterReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for RegisterReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for RegisterReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for RegisterReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "account", self.account())?;
        write!(f, ", {}: {}", "proof", self.proof())?;
        let extra_count = self.count_extra_fields();
        if extra_count != 0 {
            write!(f, ", .. ({} fields)", extra_count)?;
        }
        write!(f, " }}")
    }
}
impl<'r> RegisterReader<'r> {
    pub const FIELD_COUNT: usize = 2;
    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }
    pub fn field_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }
    pub fn field_offsets(&self) -> &[[u8; 4]] {
        molecule::unpack_number_vec(&self.as_slice()[molecule::NUMBER_SIZE..])
    }
    pub fn count_extra_fields(&self) -> usize {
        self.field_count() - Self::FIELD_COUNT
    }
    pub fn has_extra_fields(&self) -> bool {
        Self::FIELD_COUNT != self.field_count()
    }
    pub fn account(&self) -> AccountReader<'r> {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[0][..]) as usize;
        let end = molecule::unpack_number(&offsets[1][..]) as usize;
        AccountReader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn proof(&self) -> SMTProofReader<'r> {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[1][..]) as usize;
        if self.has_extra_fields() {
            let end = molecule::unpack_number(&offsets[2][..]) as usize;
            SMTProofReader::new_unchecked(&self.as_slice()[start..end])
        } else {
            SMTProofReader::new_unchecked(&self.as_slice()[start..])
        }
    }
}
impl<'r> molecule::prelude::Reader<'r> for RegisterReader<'r> {
    type Entity = Register;
    const NAME: &'static str = "RegisterReader";
    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().into())
    }
    fn new_unchecked(slice: &'r [u8]) -> Self {
        RegisterReader(slice)
    }
    fn as_slice(&self) -> &'r [u8] {
        self.0
    }
    fn verify(slice: &[u8], compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len < molecule::NUMBER_SIZE {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE, slice_len);
        }
        let total_size = molecule::unpack_number(slice) as usize;
        if slice_len != total_size {
            return ve!(Self, TotalSizeNotMatch, total_size, slice_len);
        }
        if slice_len == molecule::NUMBER_SIZE && Self::FIELD_COUNT == 0 {
            return Ok(());
        }
        if slice_len < molecule::NUMBER_SIZE * 2 {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE * 2, slice_len);
        }
        let offset_first = molecule::unpack_number(&slice[molecule::NUMBER_SIZE..]) as usize;
        if offset_first % 4 != 0 || offset_first < molecule::NUMBER_SIZE * 2 {
            return ve!(Self, OffsetsNotMatch);
        }
        let field_count = offset_first / 4 - 1;
        if field_count < Self::FIELD_COUNT {
            return ve!(Self, FieldCountNotMatch, Self::FIELD_COUNT, field_count);
        } else if !compatible && field_count > Self::FIELD_COUNT {
            return ve!(Self, FieldCountNotMatch, Self::FIELD_COUNT, field_count);
        };
        let header_size = molecule::NUMBER_SIZE * (field_count + 1);
        if slice_len < header_size {
            return ve!(Self, HeaderIsBroken, header_size, slice_len);
        }
        let ptr = molecule::unpack_number_vec(&slice[molecule::NUMBER_SIZE..]);
        let mut offsets: Vec<usize> = ptr[..field_count]
            .iter()
            .map(|x| molecule::unpack_number(&x[..]) as usize)
            .collect();
        offsets.push(total_size);
        if offsets.windows(2).any(|i| i[0] > i[1]) {
            return ve!(Self, OffsetsNotMatch);
        }
        AccountReader::verify(&slice[offsets[0]..offsets[1]], compatible)?;
        SMTProofReader::verify(&slice[offsets[1]..offsets[2]], compatible)?;
        Ok(())
    }
}
#[derive(Debug, Default)]
pub struct RegisterBuilder {
    pub(crate) account: Account,
    pub(crate) proof: SMTProof,
}
impl RegisterBuilder {
    pub const FIELD_COUNT: usize = 2;
    pub fn account(mut self, v: Account) -> Self {
        self.account = v;
        self
    }
    pub fn proof(mut self, v: SMTProof) -> Self {
        self.proof = v;
        self
    }
}
impl molecule::prelude::Builder for RegisterBuilder {
    type Entity = Register;
    const NAME: &'static str = "RegisterBuilder";
    fn expected_length(&self) -> usize {
        molecule::NUMBER_SIZE * (Self::FIELD_COUNT + 1)
            + self.account.as_slice().len()
            + self.proof.as_slice().len()
    }
    fn write<W: ::molecule::io::Write>(&self, writer: &mut W) -> ::molecule::io::Result<()> {
        let mut total_size = molecule::NUMBER_SIZE * (Self::FIELD_COUNT + 1);
        let mut offsets = Vec::with_capacity(Self::FIELD_COUNT);
        offsets.push(total_size);
        total_size += self.account.as_slice().len();
        offsets.push(total_size);
        total_size += self.proof.as_slice().len();
        writer.write_all(&molecule::pack_number(total_size as molecule::Number))?;
        for offset in offsets.into_iter() {
            writer.write_all(&molecule::pack_number(offset as molecule::Number))?;
        }
        writer.write_all(self.account.as_slice())?;
        writer.write_all(self.proof.as_slice())?;
        Ok(())
    }
    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        Register::new_unchecked(inner.into())
    }
}
#[derive(Clone)]
pub struct Deposit(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for Deposit {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for Deposit {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for Deposit {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "account", self.account())?;
        write!(f, ", {}: {}", "token_kv", self.token_kv())?;
        write!(f, ", {}: {}", "proof", self.proof())?;
        let extra_count = self.count_extra_fields();
        if extra_count != 0 {
            write!(f, ", .. ({} fields)", extra_count)?;
        }
        write!(f, " }}")
    }
}
impl ::core::default::Default for Deposit {
    fn default() -> Self {
        let v: Vec<u8> = vec![
            92, 0, 0, 0, 16, 0, 0, 0, 68, 0, 0, 0, 72, 0, 0, 0, 52, 0, 0, 0, 20, 0, 0, 0, 28, 0, 0,
            0, 28, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 12, 0, 0, 0, 16, 0, 0,
            0, 4, 0, 0, 0, 0, 0, 0, 0,
        ];
        Deposit::new_unchecked(v.into())
    }
}
impl Deposit {
    pub const FIELD_COUNT: usize = 3;
    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }
    pub fn field_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }
    pub fn field_offsets(&self) -> &[[u8; 4]] {
        molecule::unpack_number_vec(&self.as_slice()[molecule::NUMBER_SIZE..])
    }
    pub fn count_extra_fields(&self) -> usize {
        self.field_count() - Self::FIELD_COUNT
    }
    pub fn has_extra_fields(&self) -> bool {
        Self::FIELD_COUNT != self.field_count()
    }
    pub fn account(&self) -> Account {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[0][..]) as usize;
        let end = molecule::unpack_number(&offsets[1][..]) as usize;
        Account::new_unchecked(self.0.slice(start, end))
    }
    pub fn token_kv(&self) -> KeyValueMap {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[1][..]) as usize;
        let end = molecule::unpack_number(&offsets[2][..]) as usize;
        KeyValueMap::new_unchecked(self.0.slice(start, end))
    }
    pub fn proof(&self) -> SMTProof {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[2][..]) as usize;
        if self.has_extra_fields() {
            let end = molecule::unpack_number(&offsets[3][..]) as usize;
            SMTProof::new_unchecked(self.0.slice(start, end))
        } else {
            SMTProof::new_unchecked(self.0.slice_from(start))
        }
    }
    pub fn as_reader<'r>(&'r self) -> DepositReader<'r> {
        DepositReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for Deposit {
    type Builder = DepositBuilder;
    const NAME: &'static str = "Deposit";
    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        Deposit(data)
    }
    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }
    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }
    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        DepositReader::from_slice(slice).map(|reader| reader.to_entity())
    }
    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        DepositReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }
    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }
    fn as_builder(self) -> Self::Builder {
        Self::new_builder()
            .account(self.account())
            .token_kv(self.token_kv())
            .proof(self.proof())
    }
}
#[derive(Clone, Copy)]
pub struct DepositReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for DepositReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for DepositReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for DepositReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "account", self.account())?;
        write!(f, ", {}: {}", "token_kv", self.token_kv())?;
        write!(f, ", {}: {}", "proof", self.proof())?;
        let extra_count = self.count_extra_fields();
        if extra_count != 0 {
            write!(f, ", .. ({} fields)", extra_count)?;
        }
        write!(f, " }}")
    }
}
impl<'r> DepositReader<'r> {
    pub const FIELD_COUNT: usize = 3;
    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }
    pub fn field_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }
    pub fn field_offsets(&self) -> &[[u8; 4]] {
        molecule::unpack_number_vec(&self.as_slice()[molecule::NUMBER_SIZE..])
    }
    pub fn count_extra_fields(&self) -> usize {
        self.field_count() - Self::FIELD_COUNT
    }
    pub fn has_extra_fields(&self) -> bool {
        Self::FIELD_COUNT != self.field_count()
    }
    pub fn account(&self) -> AccountReader<'r> {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[0][..]) as usize;
        let end = molecule::unpack_number(&offsets[1][..]) as usize;
        AccountReader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn token_kv(&self) -> KeyValueMapReader<'r> {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[1][..]) as usize;
        let end = molecule::unpack_number(&offsets[2][..]) as usize;
        KeyValueMapReader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn proof(&self) -> SMTProofReader<'r> {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[2][..]) as usize;
        if self.has_extra_fields() {
            let end = molecule::unpack_number(&offsets[3][..]) as usize;
            SMTProofReader::new_unchecked(&self.as_slice()[start..end])
        } else {
            SMTProofReader::new_unchecked(&self.as_slice()[start..])
        }
    }
}
impl<'r> molecule::prelude::Reader<'r> for DepositReader<'r> {
    type Entity = Deposit;
    const NAME: &'static str = "DepositReader";
    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().into())
    }
    fn new_unchecked(slice: &'r [u8]) -> Self {
        DepositReader(slice)
    }
    fn as_slice(&self) -> &'r [u8] {
        self.0
    }
    fn verify(slice: &[u8], compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len < molecule::NUMBER_SIZE {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE, slice_len);
        }
        let total_size = molecule::unpack_number(slice) as usize;
        if slice_len != total_size {
            return ve!(Self, TotalSizeNotMatch, total_size, slice_len);
        }
        if slice_len == molecule::NUMBER_SIZE && Self::FIELD_COUNT == 0 {
            return Ok(());
        }
        if slice_len < molecule::NUMBER_SIZE * 2 {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE * 2, slice_len);
        }
        let offset_first = molecule::unpack_number(&slice[molecule::NUMBER_SIZE..]) as usize;
        if offset_first % 4 != 0 || offset_first < molecule::NUMBER_SIZE * 2 {
            return ve!(Self, OffsetsNotMatch);
        }
        let field_count = offset_first / 4 - 1;
        if field_count < Self::FIELD_COUNT {
            return ve!(Self, FieldCountNotMatch, Self::FIELD_COUNT, field_count);
        } else if !compatible && field_count > Self::FIELD_COUNT {
            return ve!(Self, FieldCountNotMatch, Self::FIELD_COUNT, field_count);
        };
        let header_size = molecule::NUMBER_SIZE * (field_count + 1);
        if slice_len < header_size {
            return ve!(Self, HeaderIsBroken, header_size, slice_len);
        }
        let ptr = molecule::unpack_number_vec(&slice[molecule::NUMBER_SIZE..]);
        let mut offsets: Vec<usize> = ptr[..field_count]
            .iter()
            .map(|x| molecule::unpack_number(&x[..]) as usize)
            .collect();
        offsets.push(total_size);
        if offsets.windows(2).any(|i| i[0] > i[1]) {
            return ve!(Self, OffsetsNotMatch);
        }
        AccountReader::verify(&slice[offsets[0]..offsets[1]], compatible)?;
        KeyValueMapReader::verify(&slice[offsets[1]..offsets[2]], compatible)?;
        SMTProofReader::verify(&slice[offsets[2]..offsets[3]], compatible)?;
        Ok(())
    }
}
#[derive(Debug, Default)]
pub struct DepositBuilder {
    pub(crate) account: Account,
    pub(crate) token_kv: KeyValueMap,
    pub(crate) proof: SMTProof,
}
impl DepositBuilder {
    pub const FIELD_COUNT: usize = 3;
    pub fn account(mut self, v: Account) -> Self {
        self.account = v;
        self
    }
    pub fn token_kv(mut self, v: KeyValueMap) -> Self {
        self.token_kv = v;
        self
    }
    pub fn proof(mut self, v: SMTProof) -> Self {
        self.proof = v;
        self
    }
}
impl molecule::prelude::Builder for DepositBuilder {
    type Entity = Deposit;
    const NAME: &'static str = "DepositBuilder";
    fn expected_length(&self) -> usize {
        molecule::NUMBER_SIZE * (Self::FIELD_COUNT + 1)
            + self.account.as_slice().len()
            + self.token_kv.as_slice().len()
            + self.proof.as_slice().len()
    }
    fn write<W: ::molecule::io::Write>(&self, writer: &mut W) -> ::molecule::io::Result<()> {
        let mut total_size = molecule::NUMBER_SIZE * (Self::FIELD_COUNT + 1);
        let mut offsets = Vec::with_capacity(Self::FIELD_COUNT);
        offsets.push(total_size);
        total_size += self.account.as_slice().len();
        offsets.push(total_size);
        total_size += self.token_kv.as_slice().len();
        offsets.push(total_size);
        total_size += self.proof.as_slice().len();
        writer.write_all(&molecule::pack_number(total_size as molecule::Number))?;
        for offset in offsets.into_iter() {
            writer.write_all(&molecule::pack_number(offset as molecule::Number))?;
        }
        writer.write_all(self.account.as_slice())?;
        writer.write_all(self.token_kv.as_slice())?;
        writer.write_all(self.proof.as_slice())?;
        Ok(())
    }
    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        Deposit::new_unchecked(inner.into())
    }
}
#[derive(Clone)]
pub struct SubmitBlock(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for SubmitBlock {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for SubmitBlock {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for SubmitBlock {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "txs", self.txs())?;
        write!(f, ", {}: {}", "block", self.block())?;
        write!(f, ", {}: {}", "last_block_hash", self.last_block_hash())?;
        write!(f, ", {}: {}", "block_proof", self.block_proof())?;
        write!(f, ", {}: {}", "ag_account", self.ag_account())?;
        write!(f, ", {}: {}", "token_kv", self.token_kv())?;
        write!(f, ", {}: {}", "account_proof", self.account_proof())?;
        let extra_count = self.count_extra_fields();
        if extra_count != 0 {
            write!(f, ", .. ({} fields)", extra_count)?;
        }
        write!(f, " }}")
    }
}
impl ::core::default::Default for SubmitBlock {
    fn default() -> Self {
        let v: Vec<u8> = vec![
            117, 1, 0, 0, 32, 0, 0, 0, 36, 0, 0, 0, 5, 1, 0, 0, 37, 1, 0, 0, 41, 1, 0, 0, 93, 1, 0,
            0, 97, 1, 0, 0, 4, 0, 0, 0, 225, 0, 0, 0, 36, 0, 0, 0, 44, 0, 0, 0, 76, 0, 0, 0, 80, 0,
            0, 0, 112, 0, 0, 0, 120, 0, 0, 0, 152, 0, 0, 0, 217, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52, 0, 0, 0, 20, 0, 0, 0, 28, 0, 0, 0, 28, 0,
            0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 12, 0, 0, 0, 16, 0, 0, 0, 4, 0, 0,
            0, 0, 0, 0, 0,
        ];
        SubmitBlock::new_unchecked(v.into())
    }
}
impl SubmitBlock {
    pub const FIELD_COUNT: usize = 7;
    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }
    pub fn field_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }
    pub fn field_offsets(&self) -> &[[u8; 4]] {
        molecule::unpack_number_vec(&self.as_slice()[molecule::NUMBER_SIZE..])
    }
    pub fn count_extra_fields(&self) -> usize {
        self.field_count() - Self::FIELD_COUNT
    }
    pub fn has_extra_fields(&self) -> bool {
        Self::FIELD_COUNT != self.field_count()
    }
    pub fn txs(&self) -> TxVec {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[0][..]) as usize;
        let end = molecule::unpack_number(&offsets[1][..]) as usize;
        TxVec::new_unchecked(self.0.slice(start, end))
    }
    pub fn block(&self) -> AgBlock {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[1][..]) as usize;
        let end = molecule::unpack_number(&offsets[2][..]) as usize;
        AgBlock::new_unchecked(self.0.slice(start, end))
    }
    pub fn last_block_hash(&self) -> Byte32 {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[2][..]) as usize;
        let end = molecule::unpack_number(&offsets[3][..]) as usize;
        Byte32::new_unchecked(self.0.slice(start, end))
    }
    pub fn block_proof(&self) -> Byte32Vec {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[3][..]) as usize;
        let end = molecule::unpack_number(&offsets[4][..]) as usize;
        Byte32Vec::new_unchecked(self.0.slice(start, end))
    }
    pub fn ag_account(&self) -> Account {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[4][..]) as usize;
        let end = molecule::unpack_number(&offsets[5][..]) as usize;
        Account::new_unchecked(self.0.slice(start, end))
    }
    pub fn token_kv(&self) -> KeyValueMap {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[5][..]) as usize;
        let end = molecule::unpack_number(&offsets[6][..]) as usize;
        KeyValueMap::new_unchecked(self.0.slice(start, end))
    }
    pub fn account_proof(&self) -> SMTProof {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[6][..]) as usize;
        if self.has_extra_fields() {
            let end = molecule::unpack_number(&offsets[7][..]) as usize;
            SMTProof::new_unchecked(self.0.slice(start, end))
        } else {
            SMTProof::new_unchecked(self.0.slice_from(start))
        }
    }
    pub fn as_reader<'r>(&'r self) -> SubmitBlockReader<'r> {
        SubmitBlockReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for SubmitBlock {
    type Builder = SubmitBlockBuilder;
    const NAME: &'static str = "SubmitBlock";
    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        SubmitBlock(data)
    }
    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }
    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }
    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        SubmitBlockReader::from_slice(slice).map(|reader| reader.to_entity())
    }
    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        SubmitBlockReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }
    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }
    fn as_builder(self) -> Self::Builder {
        Self::new_builder()
            .txs(self.txs())
            .block(self.block())
            .last_block_hash(self.last_block_hash())
            .block_proof(self.block_proof())
            .ag_account(self.ag_account())
            .token_kv(self.token_kv())
            .account_proof(self.account_proof())
    }
}
#[derive(Clone, Copy)]
pub struct SubmitBlockReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for SubmitBlockReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for SubmitBlockReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for SubmitBlockReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "txs", self.txs())?;
        write!(f, ", {}: {}", "block", self.block())?;
        write!(f, ", {}: {}", "last_block_hash", self.last_block_hash())?;
        write!(f, ", {}: {}", "block_proof", self.block_proof())?;
        write!(f, ", {}: {}", "ag_account", self.ag_account())?;
        write!(f, ", {}: {}", "token_kv", self.token_kv())?;
        write!(f, ", {}: {}", "account_proof", self.account_proof())?;
        let extra_count = self.count_extra_fields();
        if extra_count != 0 {
            write!(f, ", .. ({} fields)", extra_count)?;
        }
        write!(f, " }}")
    }
}
impl<'r> SubmitBlockReader<'r> {
    pub const FIELD_COUNT: usize = 7;
    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }
    pub fn field_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }
    pub fn field_offsets(&self) -> &[[u8; 4]] {
        molecule::unpack_number_vec(&self.as_slice()[molecule::NUMBER_SIZE..])
    }
    pub fn count_extra_fields(&self) -> usize {
        self.field_count() - Self::FIELD_COUNT
    }
    pub fn has_extra_fields(&self) -> bool {
        Self::FIELD_COUNT != self.field_count()
    }
    pub fn txs(&self) -> TxVecReader<'r> {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[0][..]) as usize;
        let end = molecule::unpack_number(&offsets[1][..]) as usize;
        TxVecReader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn block(&self) -> AgBlockReader<'r> {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[1][..]) as usize;
        let end = molecule::unpack_number(&offsets[2][..]) as usize;
        AgBlockReader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn last_block_hash(&self) -> Byte32Reader<'r> {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[2][..]) as usize;
        let end = molecule::unpack_number(&offsets[3][..]) as usize;
        Byte32Reader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn block_proof(&self) -> Byte32VecReader<'r> {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[3][..]) as usize;
        let end = molecule::unpack_number(&offsets[4][..]) as usize;
        Byte32VecReader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn ag_account(&self) -> AccountReader<'r> {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[4][..]) as usize;
        let end = molecule::unpack_number(&offsets[5][..]) as usize;
        AccountReader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn token_kv(&self) -> KeyValueMapReader<'r> {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[5][..]) as usize;
        let end = molecule::unpack_number(&offsets[6][..]) as usize;
        KeyValueMapReader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn account_proof(&self) -> SMTProofReader<'r> {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[6][..]) as usize;
        if self.has_extra_fields() {
            let end = molecule::unpack_number(&offsets[7][..]) as usize;
            SMTProofReader::new_unchecked(&self.as_slice()[start..end])
        } else {
            SMTProofReader::new_unchecked(&self.as_slice()[start..])
        }
    }
}
impl<'r> molecule::prelude::Reader<'r> for SubmitBlockReader<'r> {
    type Entity = SubmitBlock;
    const NAME: &'static str = "SubmitBlockReader";
    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().into())
    }
    fn new_unchecked(slice: &'r [u8]) -> Self {
        SubmitBlockReader(slice)
    }
    fn as_slice(&self) -> &'r [u8] {
        self.0
    }
    fn verify(slice: &[u8], compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len < molecule::NUMBER_SIZE {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE, slice_len);
        }
        let total_size = molecule::unpack_number(slice) as usize;
        if slice_len != total_size {
            return ve!(Self, TotalSizeNotMatch, total_size, slice_len);
        }
        if slice_len == molecule::NUMBER_SIZE && Self::FIELD_COUNT == 0 {
            return Ok(());
        }
        if slice_len < molecule::NUMBER_SIZE * 2 {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE * 2, slice_len);
        }
        let offset_first = molecule::unpack_number(&slice[molecule::NUMBER_SIZE..]) as usize;
        if offset_first % 4 != 0 || offset_first < molecule::NUMBER_SIZE * 2 {
            return ve!(Self, OffsetsNotMatch);
        }
        let field_count = offset_first / 4 - 1;
        if field_count < Self::FIELD_COUNT {
            return ve!(Self, FieldCountNotMatch, Self::FIELD_COUNT, field_count);
        } else if !compatible && field_count > Self::FIELD_COUNT {
            return ve!(Self, FieldCountNotMatch, Self::FIELD_COUNT, field_count);
        };
        let header_size = molecule::NUMBER_SIZE * (field_count + 1);
        if slice_len < header_size {
            return ve!(Self, HeaderIsBroken, header_size, slice_len);
        }
        let ptr = molecule::unpack_number_vec(&slice[molecule::NUMBER_SIZE..]);
        let mut offsets: Vec<usize> = ptr[..field_count]
            .iter()
            .map(|x| molecule::unpack_number(&x[..]) as usize)
            .collect();
        offsets.push(total_size);
        if offsets.windows(2).any(|i| i[0] > i[1]) {
            return ve!(Self, OffsetsNotMatch);
        }
        TxVecReader::verify(&slice[offsets[0]..offsets[1]], compatible)?;
        AgBlockReader::verify(&slice[offsets[1]..offsets[2]], compatible)?;
        Byte32Reader::verify(&slice[offsets[2]..offsets[3]], compatible)?;
        Byte32VecReader::verify(&slice[offsets[3]..offsets[4]], compatible)?;
        AccountReader::verify(&slice[offsets[4]..offsets[5]], compatible)?;
        KeyValueMapReader::verify(&slice[offsets[5]..offsets[6]], compatible)?;
        SMTProofReader::verify(&slice[offsets[6]..offsets[7]], compatible)?;
        Ok(())
    }
}
#[derive(Debug, Default)]
pub struct SubmitBlockBuilder {
    pub(crate) txs: TxVec,
    pub(crate) block: AgBlock,
    pub(crate) last_block_hash: Byte32,
    pub(crate) block_proof: Byte32Vec,
    pub(crate) ag_account: Account,
    pub(crate) token_kv: KeyValueMap,
    pub(crate) account_proof: SMTProof,
}
impl SubmitBlockBuilder {
    pub const FIELD_COUNT: usize = 7;
    pub fn txs(mut self, v: TxVec) -> Self {
        self.txs = v;
        self
    }
    pub fn block(mut self, v: AgBlock) -> Self {
        self.block = v;
        self
    }
    pub fn last_block_hash(mut self, v: Byte32) -> Self {
        self.last_block_hash = v;
        self
    }
    pub fn block_proof(mut self, v: Byte32Vec) -> Self {
        self.block_proof = v;
        self
    }
    pub fn ag_account(mut self, v: Account) -> Self {
        self.ag_account = v;
        self
    }
    pub fn token_kv(mut self, v: KeyValueMap) -> Self {
        self.token_kv = v;
        self
    }
    pub fn account_proof(mut self, v: SMTProof) -> Self {
        self.account_proof = v;
        self
    }
}
impl molecule::prelude::Builder for SubmitBlockBuilder {
    type Entity = SubmitBlock;
    const NAME: &'static str = "SubmitBlockBuilder";
    fn expected_length(&self) -> usize {
        molecule::NUMBER_SIZE * (Self::FIELD_COUNT + 1)
            + self.txs.as_slice().len()
            + self.block.as_slice().len()
            + self.last_block_hash.as_slice().len()
            + self.block_proof.as_slice().len()
            + self.ag_account.as_slice().len()
            + self.token_kv.as_slice().len()
            + self.account_proof.as_slice().len()
    }
    fn write<W: ::molecule::io::Write>(&self, writer: &mut W) -> ::molecule::io::Result<()> {
        let mut total_size = molecule::NUMBER_SIZE * (Self::FIELD_COUNT + 1);
        let mut offsets = Vec::with_capacity(Self::FIELD_COUNT);
        offsets.push(total_size);
        total_size += self.txs.as_slice().len();
        offsets.push(total_size);
        total_size += self.block.as_slice().len();
        offsets.push(total_size);
        total_size += self.last_block_hash.as_slice().len();
        offsets.push(total_size);
        total_size += self.block_proof.as_slice().len();
        offsets.push(total_size);
        total_size += self.ag_account.as_slice().len();
        offsets.push(total_size);
        total_size += self.token_kv.as_slice().len();
        offsets.push(total_size);
        total_size += self.account_proof.as_slice().len();
        writer.write_all(&molecule::pack_number(total_size as molecule::Number))?;
        for offset in offsets.into_iter() {
            writer.write_all(&molecule::pack_number(offset as molecule::Number))?;
        }
        writer.write_all(self.txs.as_slice())?;
        writer.write_all(self.block.as_slice())?;
        writer.write_all(self.last_block_hash.as_slice())?;
        writer.write_all(self.block_proof.as_slice())?;
        writer.write_all(self.ag_account.as_slice())?;
        writer.write_all(self.token_kv.as_slice())?;
        writer.write_all(self.account_proof.as_slice())?;
        Ok(())
    }
    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        SubmitBlock::new_unchecked(inner.into())
    }
}
#[derive(Clone)]
pub struct AccountVec(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for AccountVec {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for AccountVec {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for AccountVec {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} [", Self::NAME)?;
        for i in 0..self.len() {
            if i == 0 {
                write!(f, "{}", self.get_unchecked(i))?;
            } else {
                write!(f, ", {}", self.get_unchecked(i))?;
            }
        }
        write!(f, "]")
    }
}
impl ::core::default::Default for AccountVec {
    fn default() -> Self {
        let v: Vec<u8> = vec![4, 0, 0, 0];
        AccountVec::new_unchecked(v.into())
    }
}
impl AccountVec {
    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }
    pub fn item_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }
    pub fn item_offsets(&self) -> &[[u8; 4]] {
        molecule::unpack_number_vec(&self.as_slice()[molecule::NUMBER_SIZE..])
    }
    pub fn len(&self) -> usize {
        self.item_count()
    }
    pub fn is_empty(&self) -> bool {
        self.len() == 0
    }
    pub fn get(&self, idx: usize) -> Option<Account> {
        if idx >= self.len() {
            None
        } else {
            Some(self.get_unchecked(idx))
        }
    }
    pub fn get_unchecked(&self, idx: usize) -> Account {
        let offsets = self.item_offsets();
        let start = molecule::unpack_number(&offsets[idx][..]) as usize;
        if idx == self.len() - 1 {
            Account::new_unchecked(self.0.slice_from(start))
        } else {
            let end = molecule::unpack_number(&offsets[idx + 1][..]) as usize;
            Account::new_unchecked(self.0.slice(start, end))
        }
    }
    pub fn as_reader<'r>(&'r self) -> AccountVecReader<'r> {
        AccountVecReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for AccountVec {
    type Builder = AccountVecBuilder;
    const NAME: &'static str = "AccountVec";
    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        AccountVec(data)
    }
    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }
    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }
    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        AccountVecReader::from_slice(slice).map(|reader| reader.to_entity())
    }
    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        AccountVecReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }
    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }
    fn as_builder(self) -> Self::Builder {
        Self::new_builder().extend(self.into_iter())
    }
}
#[derive(Clone, Copy)]
pub struct AccountVecReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for AccountVecReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for AccountVecReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for AccountVecReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} [", Self::NAME)?;
        for i in 0..self.len() {
            if i == 0 {
                write!(f, "{}", self.get_unchecked(i))?;
            } else {
                write!(f, ", {}", self.get_unchecked(i))?;
            }
        }
        write!(f, "]")
    }
}
impl<'r> AccountVecReader<'r> {
    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }
    pub fn item_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }
    pub fn item_offsets(&self) -> &[[u8; 4]] {
        molecule::unpack_number_vec(&self.as_slice()[molecule::NUMBER_SIZE..])
    }
    pub fn len(&self) -> usize {
        self.item_count()
    }
    pub fn is_empty(&self) -> bool {
        self.len() == 0
    }
    pub fn get(&self, idx: usize) -> Option<AccountReader<'r>> {
        if idx >= self.len() {
            None
        } else {
            Some(self.get_unchecked(idx))
        }
    }
    pub fn get_unchecked(&self, idx: usize) -> AccountReader<'r> {
        let offsets = self.item_offsets();
        let start = molecule::unpack_number(&offsets[idx][..]) as usize;
        if idx == self.len() - 1 {
            AccountReader::new_unchecked(&self.as_slice()[start..])
        } else {
            let end = molecule::unpack_number(&offsets[idx + 1][..]) as usize;
            AccountReader::new_unchecked(&self.as_slice()[start..end])
        }
    }
}
impl<'r> molecule::prelude::Reader<'r> for AccountVecReader<'r> {
    type Entity = AccountVec;
    const NAME: &'static str = "AccountVecReader";
    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().into())
    }
    fn new_unchecked(slice: &'r [u8]) -> Self {
        AccountVecReader(slice)
    }
    fn as_slice(&self) -> &'r [u8] {
        self.0
    }
    fn verify(slice: &[u8], compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len < molecule::NUMBER_SIZE {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE, slice_len);
        }
        let total_size = molecule::unpack_number(slice) as usize;
        if slice_len != total_size {
            return ve!(Self, TotalSizeNotMatch, total_size, slice_len);
        }
        if slice_len == molecule::NUMBER_SIZE {
            return Ok(());
        }
        if slice_len < molecule::NUMBER_SIZE * 2 {
            return ve!(
                Self,
                TotalSizeNotMatch,
                molecule::NUMBER_SIZE * 2,
                slice_len
            );
        }
        let offset_first = molecule::unpack_number(&slice[molecule::NUMBER_SIZE..]) as usize;
        if offset_first % 4 != 0 || offset_first < molecule::NUMBER_SIZE * 2 {
            return ve!(Self, OffsetsNotMatch);
        }
        let item_count = offset_first / 4 - 1;
        let header_size = molecule::NUMBER_SIZE * (item_count + 1);
        if slice_len < header_size {
            return ve!(Self, HeaderIsBroken, header_size, slice_len);
        }
        let ptr = molecule::unpack_number_vec(&slice[molecule::NUMBER_SIZE..]);
        let mut offsets: Vec<usize> = ptr[..item_count]
            .iter()
            .map(|x| molecule::unpack_number(&x[..]) as usize)
            .collect();
        offsets.push(total_size);
        if offsets.windows(2).any(|i| i[0] > i[1]) {
            return ve!(Self, OffsetsNotMatch);
        }
        for pair in offsets.windows(2) {
            let start = pair[0];
            let end = pair[1];
            AccountReader::verify(&slice[start..end], compatible)?;
        }
        Ok(())
    }
}
#[derive(Debug, Default)]
pub struct AccountVecBuilder(pub(crate) Vec<Account>);
impl AccountVecBuilder {
    pub fn set(mut self, v: Vec<Account>) -> Self {
        self.0 = v;
        self
    }
    pub fn push(mut self, v: Account) -> Self {
        self.0.push(v);
        self
    }
    pub fn extend<T: ::core::iter::IntoIterator<Item = Account>>(mut self, iter: T) -> Self {
        for elem in iter {
            self.0.push(elem);
        }
        self
    }
}
impl molecule::prelude::Builder for AccountVecBuilder {
    type Entity = AccountVec;
    const NAME: &'static str = "AccountVecBuilder";
    fn expected_length(&self) -> usize {
        molecule::NUMBER_SIZE * (self.0.len() + 1)
            + self
                .0
                .iter()
                .map(|inner| inner.as_slice().len())
                .sum::<usize>()
    }
    fn write<W: ::molecule::io::Write>(&self, writer: &mut W) -> ::molecule::io::Result<()> {
        let item_count = self.0.len();
        if item_count == 0 {
            writer.write_all(&molecule::pack_number(
                molecule::NUMBER_SIZE as molecule::Number,
            ))?;
        } else {
            let (total_size, offsets) = self.0.iter().fold(
                (
                    molecule::NUMBER_SIZE * (item_count + 1),
                    Vec::with_capacity(item_count),
                ),
                |(start, mut offsets), inner| {
                    offsets.push(start);
                    (start + inner.as_slice().len(), offsets)
                },
            );
            writer.write_all(&molecule::pack_number(total_size as molecule::Number))?;
            for offset in offsets.into_iter() {
                writer.write_all(&molecule::pack_number(offset as molecule::Number))?;
            }
            for inner in self.0.iter() {
                writer.write_all(inner.as_slice())?;
            }
        }
        Ok(())
    }
    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        AccountVec::new_unchecked(inner.into())
    }
}
pub struct AccountVecIterator(AccountVec, usize, usize);
impl ::core::iter::Iterator for AccountVecIterator {
    type Item = Account;
    fn next(&mut self) -> Option<Self::Item> {
        if self.1 >= self.2 {
            None
        } else {
            let ret = self.0.get_unchecked(self.1);
            self.1 += 1;
            Some(ret)
        }
    }
}
impl ::core::iter::ExactSizeIterator for AccountVecIterator {
    fn len(&self) -> usize {
        self.2 - self.1
    }
}
impl ::core::iter::IntoIterator for AccountVec {
    type Item = Account;
    type IntoIter = AccountVecIterator;
    fn into_iter(self) -> Self::IntoIter {
        let len = self.len();
        AccountVecIterator(self, 0, len)
    }
}
impl<'r> AccountVecReader<'r> {
    pub fn iter<'t>(&'t self) -> AccountVecReaderIterator<'t, 'r> {
        AccountVecReaderIterator(&self, 0, self.len())
    }
}
pub struct AccountVecReaderIterator<'t, 'r>(&'t AccountVecReader<'r>, usize, usize);
impl<'t: 'r, 'r> ::core::iter::Iterator for AccountVecReaderIterator<'t, 'r> {
    type Item = AccountReader<'t>;
    fn next(&mut self) -> Option<Self::Item> {
        if self.1 >= self.2 {
            None
        } else {
            let ret = self.0.get_unchecked(self.1);
            self.1 += 1;
            Some(ret)
        }
    }
}
impl<'t: 'r, 'r> ::core::iter::ExactSizeIterator for AccountVecReaderIterator<'t, 'r> {
    fn len(&self) -> usize {
        self.2 - self.1
    }
}
#[derive(Clone)]
pub struct KeyValueMapVec(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for KeyValueMapVec {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for KeyValueMapVec {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for KeyValueMapVec {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} [", Self::NAME)?;
        for i in 0..self.len() {
            if i == 0 {
                write!(f, "{}", self.get_unchecked(i))?;
            } else {
                write!(f, ", {}", self.get_unchecked(i))?;
            }
        }
        write!(f, "]")
    }
}
impl ::core::default::Default for KeyValueMapVec {
    fn default() -> Self {
        let v: Vec<u8> = vec![4, 0, 0, 0];
        KeyValueMapVec::new_unchecked(v.into())
    }
}
impl KeyValueMapVec {
    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }
    pub fn item_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }
    pub fn item_offsets(&self) -> &[[u8; 4]] {
        molecule::unpack_number_vec(&self.as_slice()[molecule::NUMBER_SIZE..])
    }
    pub fn len(&self) -> usize {
        self.item_count()
    }
    pub fn is_empty(&self) -> bool {
        self.len() == 0
    }
    pub fn get(&self, idx: usize) -> Option<KeyValueMap> {
        if idx >= self.len() {
            None
        } else {
            Some(self.get_unchecked(idx))
        }
    }
    pub fn get_unchecked(&self, idx: usize) -> KeyValueMap {
        let offsets = self.item_offsets();
        let start = molecule::unpack_number(&offsets[idx][..]) as usize;
        if idx == self.len() - 1 {
            KeyValueMap::new_unchecked(self.0.slice_from(start))
        } else {
            let end = molecule::unpack_number(&offsets[idx + 1][..]) as usize;
            KeyValueMap::new_unchecked(self.0.slice(start, end))
        }
    }
    pub fn as_reader<'r>(&'r self) -> KeyValueMapVecReader<'r> {
        KeyValueMapVecReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for KeyValueMapVec {
    type Builder = KeyValueMapVecBuilder;
    const NAME: &'static str = "KeyValueMapVec";
    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        KeyValueMapVec(data)
    }
    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }
    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }
    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        KeyValueMapVecReader::from_slice(slice).map(|reader| reader.to_entity())
    }
    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        KeyValueMapVecReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }
    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }
    fn as_builder(self) -> Self::Builder {
        Self::new_builder().extend(self.into_iter())
    }
}
#[derive(Clone, Copy)]
pub struct KeyValueMapVecReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for KeyValueMapVecReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for KeyValueMapVecReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for KeyValueMapVecReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} [", Self::NAME)?;
        for i in 0..self.len() {
            if i == 0 {
                write!(f, "{}", self.get_unchecked(i))?;
            } else {
                write!(f, ", {}", self.get_unchecked(i))?;
            }
        }
        write!(f, "]")
    }
}
impl<'r> KeyValueMapVecReader<'r> {
    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }
    pub fn item_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }
    pub fn item_offsets(&self) -> &[[u8; 4]] {
        molecule::unpack_number_vec(&self.as_slice()[molecule::NUMBER_SIZE..])
    }
    pub fn len(&self) -> usize {
        self.item_count()
    }
    pub fn is_empty(&self) -> bool {
        self.len() == 0
    }
    pub fn get(&self, idx: usize) -> Option<KeyValueMapReader<'r>> {
        if idx >= self.len() {
            None
        } else {
            Some(self.get_unchecked(idx))
        }
    }
    pub fn get_unchecked(&self, idx: usize) -> KeyValueMapReader<'r> {
        let offsets = self.item_offsets();
        let start = molecule::unpack_number(&offsets[idx][..]) as usize;
        if idx == self.len() - 1 {
            KeyValueMapReader::new_unchecked(&self.as_slice()[start..])
        } else {
            let end = molecule::unpack_number(&offsets[idx + 1][..]) as usize;
            KeyValueMapReader::new_unchecked(&self.as_slice()[start..end])
        }
    }
}
impl<'r> molecule::prelude::Reader<'r> for KeyValueMapVecReader<'r> {
    type Entity = KeyValueMapVec;
    const NAME: &'static str = "KeyValueMapVecReader";
    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().into())
    }
    fn new_unchecked(slice: &'r [u8]) -> Self {
        KeyValueMapVecReader(slice)
    }
    fn as_slice(&self) -> &'r [u8] {
        self.0
    }
    fn verify(slice: &[u8], compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len < molecule::NUMBER_SIZE {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE, slice_len);
        }
        let total_size = molecule::unpack_number(slice) as usize;
        if slice_len != total_size {
            return ve!(Self, TotalSizeNotMatch, total_size, slice_len);
        }
        if slice_len == molecule::NUMBER_SIZE {
            return Ok(());
        }
        if slice_len < molecule::NUMBER_SIZE * 2 {
            return ve!(
                Self,
                TotalSizeNotMatch,
                molecule::NUMBER_SIZE * 2,
                slice_len
            );
        }
        let offset_first = molecule::unpack_number(&slice[molecule::NUMBER_SIZE..]) as usize;
        if offset_first % 4 != 0 || offset_first < molecule::NUMBER_SIZE * 2 {
            return ve!(Self, OffsetsNotMatch);
        }
        let item_count = offset_first / 4 - 1;
        let header_size = molecule::NUMBER_SIZE * (item_count + 1);
        if slice_len < header_size {
            return ve!(Self, HeaderIsBroken, header_size, slice_len);
        }
        let ptr = molecule::unpack_number_vec(&slice[molecule::NUMBER_SIZE..]);
        let mut offsets: Vec<usize> = ptr[..item_count]
            .iter()
            .map(|x| molecule::unpack_number(&x[..]) as usize)
            .collect();
        offsets.push(total_size);
        if offsets.windows(2).any(|i| i[0] > i[1]) {
            return ve!(Self, OffsetsNotMatch);
        }
        for pair in offsets.windows(2) {
            let start = pair[0];
            let end = pair[1];
            KeyValueMapReader::verify(&slice[start..end], compatible)?;
        }
        Ok(())
    }
}
#[derive(Debug, Default)]
pub struct KeyValueMapVecBuilder(pub(crate) Vec<KeyValueMap>);
impl KeyValueMapVecBuilder {
    pub fn set(mut self, v: Vec<KeyValueMap>) -> Self {
        self.0 = v;
        self
    }
    pub fn push(mut self, v: KeyValueMap) -> Self {
        self.0.push(v);
        self
    }
    pub fn extend<T: ::core::iter::IntoIterator<Item = KeyValueMap>>(mut self, iter: T) -> Self {
        for elem in iter {
            self.0.push(elem);
        }
        self
    }
}
impl molecule::prelude::Builder for KeyValueMapVecBuilder {
    type Entity = KeyValueMapVec;
    const NAME: &'static str = "KeyValueMapVecBuilder";
    fn expected_length(&self) -> usize {
        molecule::NUMBER_SIZE * (self.0.len() + 1)
            + self
                .0
                .iter()
                .map(|inner| inner.as_slice().len())
                .sum::<usize>()
    }
    fn write<W: ::molecule::io::Write>(&self, writer: &mut W) -> ::molecule::io::Result<()> {
        let item_count = self.0.len();
        if item_count == 0 {
            writer.write_all(&molecule::pack_number(
                molecule::NUMBER_SIZE as molecule::Number,
            ))?;
        } else {
            let (total_size, offsets) = self.0.iter().fold(
                (
                    molecule::NUMBER_SIZE * (item_count + 1),
                    Vec::with_capacity(item_count),
                ),
                |(start, mut offsets), inner| {
                    offsets.push(start);
                    (start + inner.as_slice().len(), offsets)
                },
            );
            writer.write_all(&molecule::pack_number(total_size as molecule::Number))?;
            for offset in offsets.into_iter() {
                writer.write_all(&molecule::pack_number(offset as molecule::Number))?;
            }
            for inner in self.0.iter() {
                writer.write_all(inner.as_slice())?;
            }
        }
        Ok(())
    }
    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        KeyValueMapVec::new_unchecked(inner.into())
    }
}
pub struct KeyValueMapVecIterator(KeyValueMapVec, usize, usize);
impl ::core::iter::Iterator for KeyValueMapVecIterator {
    type Item = KeyValueMap;
    fn next(&mut self) -> Option<Self::Item> {
        if self.1 >= self.2 {
            None
        } else {
            let ret = self.0.get_unchecked(self.1);
            self.1 += 1;
            Some(ret)
        }
    }
}
impl ::core::iter::ExactSizeIterator for KeyValueMapVecIterator {
    fn len(&self) -> usize {
        self.2 - self.1
    }
}
impl ::core::iter::IntoIterator for KeyValueMapVec {
    type Item = KeyValueMap;
    type IntoIter = KeyValueMapVecIterator;
    fn into_iter(self) -> Self::IntoIter {
        let len = self.len();
        KeyValueMapVecIterator(self, 0, len)
    }
}
impl<'r> KeyValueMapVecReader<'r> {
    pub fn iter<'t>(&'t self) -> KeyValueMapVecReaderIterator<'t, 'r> {
        KeyValueMapVecReaderIterator(&self, 0, self.len())
    }
}
pub struct KeyValueMapVecReaderIterator<'t, 'r>(&'t KeyValueMapVecReader<'r>, usize, usize);
impl<'t: 'r, 'r> ::core::iter::Iterator for KeyValueMapVecReaderIterator<'t, 'r> {
    type Item = KeyValueMapReader<'t>;
    fn next(&mut self) -> Option<Self::Item> {
        if self.1 >= self.2 {
            None
        } else {
            let ret = self.0.get_unchecked(self.1);
            self.1 += 1;
            Some(ret)
        }
    }
}
impl<'t: 'r, 'r> ::core::iter::ExactSizeIterator for KeyValueMapVecReaderIterator<'t, 'r> {
    fn len(&self) -> usize {
        self.2 - self.1
    }
}
#[derive(Clone)]
pub struct RevertBlock(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for RevertBlock {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for RevertBlock {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for RevertBlock {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(
            f,
            "{}: {}",
            "challenge_cell_data_hash",
            self.challenge_cell_data_hash()
        )?;
        write!(f, ", {}: {}", "block_proof", self.block_proof())?;
        write!(f, ", {}: {}", "ag_account", self.ag_account())?;
        write!(
            f,
            ", {}: {}",
            "challenger_account",
            self.challenger_account()
        )?;
        write!(
            f,
            ", {}: {}",
            "aggregator_token_kv",
            self.aggregator_token_kv()
        )?;
        write!(
            f,
            ", {}: {}",
            "challenger_token_kv",
            self.challenger_token_kv()
        )?;
        write!(f, ", {}: {}", "accounts_proof", self.accounts_proof())?;
        let extra_count = self.count_extra_fields();
        if extra_count != 0 {
            write!(f, ", .. ({} fields)", extra_count)?;
        }
        write!(f, " }}")
    }
}
impl ::core::default::Default for RevertBlock {
    fn default() -> Self {
        let v: Vec<u8> = vec![
            200, 0, 0, 0, 32, 0, 0, 0, 64, 0, 0, 0, 68, 0, 0, 0, 120, 0, 0, 0, 172, 0, 0, 0, 176,
            0, 0, 0, 180, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52, 0, 0, 0, 20, 0, 0, 0, 28, 0, 0, 0, 28,
            0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52, 0, 0, 0, 20, 0, 0, 0, 28, 0, 0, 0, 28, 0, 0, 0, 32,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 12, 0, 0, 0, 16, 0, 0, 0, 4, 0,
            0, 0, 0, 0, 0, 0,
        ];
        RevertBlock::new_unchecked(v.into())
    }
}
impl RevertBlock {
    pub const FIELD_COUNT: usize = 7;
    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }
    pub fn field_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }
    pub fn field_offsets(&self) -> &[[u8; 4]] {
        molecule::unpack_number_vec(&self.as_slice()[molecule::NUMBER_SIZE..])
    }
    pub fn count_extra_fields(&self) -> usize {
        self.field_count() - Self::FIELD_COUNT
    }
    pub fn has_extra_fields(&self) -> bool {
        Self::FIELD_COUNT != self.field_count()
    }
    pub fn challenge_cell_data_hash(&self) -> Byte32 {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[0][..]) as usize;
        let end = molecule::unpack_number(&offsets[1][..]) as usize;
        Byte32::new_unchecked(self.0.slice(start, end))
    }
    pub fn block_proof(&self) -> Byte32Vec {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[1][..]) as usize;
        let end = molecule::unpack_number(&offsets[2][..]) as usize;
        Byte32Vec::new_unchecked(self.0.slice(start, end))
    }
    pub fn ag_account(&self) -> Account {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[2][..]) as usize;
        let end = molecule::unpack_number(&offsets[3][..]) as usize;
        Account::new_unchecked(self.0.slice(start, end))
    }
    pub fn challenger_account(&self) -> Account {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[3][..]) as usize;
        let end = molecule::unpack_number(&offsets[4][..]) as usize;
        Account::new_unchecked(self.0.slice(start, end))
    }
    pub fn aggregator_token_kv(&self) -> KeyValueMap {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[4][..]) as usize;
        let end = molecule::unpack_number(&offsets[5][..]) as usize;
        KeyValueMap::new_unchecked(self.0.slice(start, end))
    }
    pub fn challenger_token_kv(&self) -> KeyValueMap {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[5][..]) as usize;
        let end = molecule::unpack_number(&offsets[6][..]) as usize;
        KeyValueMap::new_unchecked(self.0.slice(start, end))
    }
    pub fn accounts_proof(&self) -> SMTProof {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[6][..]) as usize;
        if self.has_extra_fields() {
            let end = molecule::unpack_number(&offsets[7][..]) as usize;
            SMTProof::new_unchecked(self.0.slice(start, end))
        } else {
            SMTProof::new_unchecked(self.0.slice_from(start))
        }
    }
    pub fn as_reader<'r>(&'r self) -> RevertBlockReader<'r> {
        RevertBlockReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for RevertBlock {
    type Builder = RevertBlockBuilder;
    const NAME: &'static str = "RevertBlock";
    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        RevertBlock(data)
    }
    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }
    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }
    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        RevertBlockReader::from_slice(slice).map(|reader| reader.to_entity())
    }
    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        RevertBlockReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }
    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }
    fn as_builder(self) -> Self::Builder {
        Self::new_builder()
            .challenge_cell_data_hash(self.challenge_cell_data_hash())
            .block_proof(self.block_proof())
            .ag_account(self.ag_account())
            .challenger_account(self.challenger_account())
            .aggregator_token_kv(self.aggregator_token_kv())
            .challenger_token_kv(self.challenger_token_kv())
            .accounts_proof(self.accounts_proof())
    }
}
#[derive(Clone, Copy)]
pub struct RevertBlockReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for RevertBlockReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for RevertBlockReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for RevertBlockReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(
            f,
            "{}: {}",
            "challenge_cell_data_hash",
            self.challenge_cell_data_hash()
        )?;
        write!(f, ", {}: {}", "block_proof", self.block_proof())?;
        write!(f, ", {}: {}", "ag_account", self.ag_account())?;
        write!(
            f,
            ", {}: {}",
            "challenger_account",
            self.challenger_account()
        )?;
        write!(
            f,
            ", {}: {}",
            "aggregator_token_kv",
            self.aggregator_token_kv()
        )?;
        write!(
            f,
            ", {}: {}",
            "challenger_token_kv",
            self.challenger_token_kv()
        )?;
        write!(f, ", {}: {}", "accounts_proof", self.accounts_proof())?;
        let extra_count = self.count_extra_fields();
        if extra_count != 0 {
            write!(f, ", .. ({} fields)", extra_count)?;
        }
        write!(f, " }}")
    }
}
impl<'r> RevertBlockReader<'r> {
    pub const FIELD_COUNT: usize = 7;
    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }
    pub fn field_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }
    pub fn field_offsets(&self) -> &[[u8; 4]] {
        molecule::unpack_number_vec(&self.as_slice()[molecule::NUMBER_SIZE..])
    }
    pub fn count_extra_fields(&self) -> usize {
        self.field_count() - Self::FIELD_COUNT
    }
    pub fn has_extra_fields(&self) -> bool {
        Self::FIELD_COUNT != self.field_count()
    }
    pub fn challenge_cell_data_hash(&self) -> Byte32Reader<'r> {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[0][..]) as usize;
        let end = molecule::unpack_number(&offsets[1][..]) as usize;
        Byte32Reader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn block_proof(&self) -> Byte32VecReader<'r> {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[1][..]) as usize;
        let end = molecule::unpack_number(&offsets[2][..]) as usize;
        Byte32VecReader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn ag_account(&self) -> AccountReader<'r> {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[2][..]) as usize;
        let end = molecule::unpack_number(&offsets[3][..]) as usize;
        AccountReader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn challenger_account(&self) -> AccountReader<'r> {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[3][..]) as usize;
        let end = molecule::unpack_number(&offsets[4][..]) as usize;
        AccountReader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn aggregator_token_kv(&self) -> KeyValueMapReader<'r> {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[4][..]) as usize;
        let end = molecule::unpack_number(&offsets[5][..]) as usize;
        KeyValueMapReader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn challenger_token_kv(&self) -> KeyValueMapReader<'r> {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[5][..]) as usize;
        let end = molecule::unpack_number(&offsets[6][..]) as usize;
        KeyValueMapReader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn accounts_proof(&self) -> SMTProofReader<'r> {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[6][..]) as usize;
        if self.has_extra_fields() {
            let end = molecule::unpack_number(&offsets[7][..]) as usize;
            SMTProofReader::new_unchecked(&self.as_slice()[start..end])
        } else {
            SMTProofReader::new_unchecked(&self.as_slice()[start..])
        }
    }
}
impl<'r> molecule::prelude::Reader<'r> for RevertBlockReader<'r> {
    type Entity = RevertBlock;
    const NAME: &'static str = "RevertBlockReader";
    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().into())
    }
    fn new_unchecked(slice: &'r [u8]) -> Self {
        RevertBlockReader(slice)
    }
    fn as_slice(&self) -> &'r [u8] {
        self.0
    }
    fn verify(slice: &[u8], compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len < molecule::NUMBER_SIZE {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE, slice_len);
        }
        let total_size = molecule::unpack_number(slice) as usize;
        if slice_len != total_size {
            return ve!(Self, TotalSizeNotMatch, total_size, slice_len);
        }
        if slice_len == molecule::NUMBER_SIZE && Self::FIELD_COUNT == 0 {
            return Ok(());
        }
        if slice_len < molecule::NUMBER_SIZE * 2 {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE * 2, slice_len);
        }
        let offset_first = molecule::unpack_number(&slice[molecule::NUMBER_SIZE..]) as usize;
        if offset_first % 4 != 0 || offset_first < molecule::NUMBER_SIZE * 2 {
            return ve!(Self, OffsetsNotMatch);
        }
        let field_count = offset_first / 4 - 1;
        if field_count < Self::FIELD_COUNT {
            return ve!(Self, FieldCountNotMatch, Self::FIELD_COUNT, field_count);
        } else if !compatible && field_count > Self::FIELD_COUNT {
            return ve!(Self, FieldCountNotMatch, Self::FIELD_COUNT, field_count);
        };
        let header_size = molecule::NUMBER_SIZE * (field_count + 1);
        if slice_len < header_size {
            return ve!(Self, HeaderIsBroken, header_size, slice_len);
        }
        let ptr = molecule::unpack_number_vec(&slice[molecule::NUMBER_SIZE..]);
        let mut offsets: Vec<usize> = ptr[..field_count]
            .iter()
            .map(|x| molecule::unpack_number(&x[..]) as usize)
            .collect();
        offsets.push(total_size);
        if offsets.windows(2).any(|i| i[0] > i[1]) {
            return ve!(Self, OffsetsNotMatch);
        }
        Byte32Reader::verify(&slice[offsets[0]..offsets[1]], compatible)?;
        Byte32VecReader::verify(&slice[offsets[1]..offsets[2]], compatible)?;
        AccountReader::verify(&slice[offsets[2]..offsets[3]], compatible)?;
        AccountReader::verify(&slice[offsets[3]..offsets[4]], compatible)?;
        KeyValueMapReader::verify(&slice[offsets[4]..offsets[5]], compatible)?;
        KeyValueMapReader::verify(&slice[offsets[5]..offsets[6]], compatible)?;
        SMTProofReader::verify(&slice[offsets[6]..offsets[7]], compatible)?;
        Ok(())
    }
}
#[derive(Debug, Default)]
pub struct RevertBlockBuilder {
    pub(crate) challenge_cell_data_hash: Byte32,
    pub(crate) block_proof: Byte32Vec,
    pub(crate) ag_account: Account,
    pub(crate) challenger_account: Account,
    pub(crate) aggregator_token_kv: KeyValueMap,
    pub(crate) challenger_token_kv: KeyValueMap,
    pub(crate) accounts_proof: SMTProof,
}
impl RevertBlockBuilder {
    pub const FIELD_COUNT: usize = 7;
    pub fn challenge_cell_data_hash(mut self, v: Byte32) -> Self {
        self.challenge_cell_data_hash = v;
        self
    }
    pub fn block_proof(mut self, v: Byte32Vec) -> Self {
        self.block_proof = v;
        self
    }
    pub fn ag_account(mut self, v: Account) -> Self {
        self.ag_account = v;
        self
    }
    pub fn challenger_account(mut self, v: Account) -> Self {
        self.challenger_account = v;
        self
    }
    pub fn aggregator_token_kv(mut self, v: KeyValueMap) -> Self {
        self.aggregator_token_kv = v;
        self
    }
    pub fn challenger_token_kv(mut self, v: KeyValueMap) -> Self {
        self.challenger_token_kv = v;
        self
    }
    pub fn accounts_proof(mut self, v: SMTProof) -> Self {
        self.accounts_proof = v;
        self
    }
}
impl molecule::prelude::Builder for RevertBlockBuilder {
    type Entity = RevertBlock;
    const NAME: &'static str = "RevertBlockBuilder";
    fn expected_length(&self) -> usize {
        molecule::NUMBER_SIZE * (Self::FIELD_COUNT + 1)
            + self.challenge_cell_data_hash.as_slice().len()
            + self.block_proof.as_slice().len()
            + self.ag_account.as_slice().len()
            + self.challenger_account.as_slice().len()
            + self.aggregator_token_kv.as_slice().len()
            + self.challenger_token_kv.as_slice().len()
            + self.accounts_proof.as_slice().len()
    }
    fn write<W: ::molecule::io::Write>(&self, writer: &mut W) -> ::molecule::io::Result<()> {
        let mut total_size = molecule::NUMBER_SIZE * (Self::FIELD_COUNT + 1);
        let mut offsets = Vec::with_capacity(Self::FIELD_COUNT);
        offsets.push(total_size);
        total_size += self.challenge_cell_data_hash.as_slice().len();
        offsets.push(total_size);
        total_size += self.block_proof.as_slice().len();
        offsets.push(total_size);
        total_size += self.ag_account.as_slice().len();
        offsets.push(total_size);
        total_size += self.challenger_account.as_slice().len();
        offsets.push(total_size);
        total_size += self.aggregator_token_kv.as_slice().len();
        offsets.push(total_size);
        total_size += self.challenger_token_kv.as_slice().len();
        offsets.push(total_size);
        total_size += self.accounts_proof.as_slice().len();
        writer.write_all(&molecule::pack_number(total_size as molecule::Number))?;
        for offset in offsets.into_iter() {
            writer.write_all(&molecule::pack_number(offset as molecule::Number))?;
        }
        writer.write_all(self.challenge_cell_data_hash.as_slice())?;
        writer.write_all(self.block_proof.as_slice())?;
        writer.write_all(self.ag_account.as_slice())?;
        writer.write_all(self.challenger_account.as_slice())?;
        writer.write_all(self.aggregator_token_kv.as_slice())?;
        writer.write_all(self.challenger_token_kv.as_slice())?;
        writer.write_all(self.accounts_proof.as_slice())?;
        Ok(())
    }
    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        RevertBlock::new_unchecked(inner.into())
    }
}
#[derive(Clone)]
pub struct ChallengeArgs(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for ChallengeArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for ChallengeArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for ChallengeArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "main_type_hash", self.main_type_hash())?;
        write!(
            f,
            ", {}: {}",
            "withdraw_lock_hash",
            self.withdraw_lock_hash()
        )?;
        write!(f, " }}")
    }
}
impl ::core::default::Default for ChallengeArgs {
    fn default() -> Self {
        let v: Vec<u8> = vec![
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0,
        ];
        ChallengeArgs::new_unchecked(v.into())
    }
}
impl ChallengeArgs {
    pub const TOTAL_SIZE: usize = 64;
    pub const FIELD_SIZE: [usize; 2] = [32, 32];
    pub const FIELD_COUNT: usize = 2;
    pub fn main_type_hash(&self) -> Byte32 {
        Byte32::new_unchecked(self.0.slice(0, 32))
    }
    pub fn withdraw_lock_hash(&self) -> Byte32 {
        Byte32::new_unchecked(self.0.slice(32, 64))
    }
    pub fn as_reader<'r>(&'r self) -> ChallengeArgsReader<'r> {
        ChallengeArgsReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for ChallengeArgs {
    type Builder = ChallengeArgsBuilder;
    const NAME: &'static str = "ChallengeArgs";
    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        ChallengeArgs(data)
    }
    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }
    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }
    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        ChallengeArgsReader::from_slice(slice).map(|reader| reader.to_entity())
    }
    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        ChallengeArgsReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }
    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }
    fn as_builder(self) -> Self::Builder {
        Self::new_builder()
            .main_type_hash(self.main_type_hash())
            .withdraw_lock_hash(self.withdraw_lock_hash())
    }
}
#[derive(Clone, Copy)]
pub struct ChallengeArgsReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for ChallengeArgsReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for ChallengeArgsReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for ChallengeArgsReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "main_type_hash", self.main_type_hash())?;
        write!(
            f,
            ", {}: {}",
            "withdraw_lock_hash",
            self.withdraw_lock_hash()
        )?;
        write!(f, " }}")
    }
}
impl<'r> ChallengeArgsReader<'r> {
    pub const TOTAL_SIZE: usize = 64;
    pub const FIELD_SIZE: [usize; 2] = [32, 32];
    pub const FIELD_COUNT: usize = 2;
    pub fn main_type_hash(&self) -> Byte32Reader<'r> {
        Byte32Reader::new_unchecked(&self.as_slice()[0..32])
    }
    pub fn withdraw_lock_hash(&self) -> Byte32Reader<'r> {
        Byte32Reader::new_unchecked(&self.as_slice()[32..64])
    }
}
impl<'r> molecule::prelude::Reader<'r> for ChallengeArgsReader<'r> {
    type Entity = ChallengeArgs;
    const NAME: &'static str = "ChallengeArgsReader";
    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().into())
    }
    fn new_unchecked(slice: &'r [u8]) -> Self {
        ChallengeArgsReader(slice)
    }
    fn as_slice(&self) -> &'r [u8] {
        self.0
    }
    fn verify(slice: &[u8], _compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len != Self::TOTAL_SIZE {
            return ve!(Self, TotalSizeNotMatch, Self::TOTAL_SIZE, slice_len);
        }
        Ok(())
    }
}
#[derive(Debug, Default)]
pub struct ChallengeArgsBuilder {
    pub(crate) main_type_hash: Byte32,
    pub(crate) withdraw_lock_hash: Byte32,
}
impl ChallengeArgsBuilder {
    pub const TOTAL_SIZE: usize = 64;
    pub const FIELD_SIZE: [usize; 2] = [32, 32];
    pub const FIELD_COUNT: usize = 2;
    pub fn main_type_hash(mut self, v: Byte32) -> Self {
        self.main_type_hash = v;
        self
    }
    pub fn withdraw_lock_hash(mut self, v: Byte32) -> Self {
        self.withdraw_lock_hash = v;
        self
    }
}
impl molecule::prelude::Builder for ChallengeArgsBuilder {
    type Entity = ChallengeArgs;
    const NAME: &'static str = "ChallengeArgsBuilder";
    fn expected_length(&self) -> usize {
        Self::TOTAL_SIZE
    }
    fn write<W: ::molecule::io::Write>(&self, writer: &mut W) -> ::molecule::io::Result<()> {
        writer.write_all(self.main_type_hash.as_slice())?;
        writer.write_all(self.withdraw_lock_hash.as_slice())?;
        Ok(())
    }
    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        ChallengeArgs::new_unchecked(inner.into())
    }
}
#[derive(Clone)]
pub struct ChallengeContext(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for ChallengeContext {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for ChallengeContext {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for ChallengeContext {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "block", self.block())?;
        write!(f, ", {}: {}", "txs", self.txs())?;
        write!(f, ", {}: {}", "challenger_index", self.challenger_index())?;
        let extra_count = self.count_extra_fields();
        if extra_count != 0 {
            write!(f, ", .. ({} fields)", extra_count)?;
        }
        write!(f, " }}")
    }
}
impl ::core::default::Default for ChallengeContext {
    fn default() -> Self {
        let v: Vec<u8> = vec![
            253, 0, 0, 0, 16, 0, 0, 0, 241, 0, 0, 0, 245, 0, 0, 0, 225, 0, 0, 0, 36, 0, 0, 0, 44,
            0, 0, 0, 76, 0, 0, 0, 80, 0, 0, 0, 112, 0, 0, 0, 120, 0, 0, 0, 152, 0, 0, 0, 217, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ];
        ChallengeContext::new_unchecked(v.into())
    }
}
impl ChallengeContext {
    pub const FIELD_COUNT: usize = 3;
    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }
    pub fn field_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }
    pub fn field_offsets(&self) -> &[[u8; 4]] {
        molecule::unpack_number_vec(&self.as_slice()[molecule::NUMBER_SIZE..])
    }
    pub fn count_extra_fields(&self) -> usize {
        self.field_count() - Self::FIELD_COUNT
    }
    pub fn has_extra_fields(&self) -> bool {
        Self::FIELD_COUNT != self.field_count()
    }
    pub fn block(&self) -> AgBlock {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[0][..]) as usize;
        let end = molecule::unpack_number(&offsets[1][..]) as usize;
        AgBlock::new_unchecked(self.0.slice(start, end))
    }
    pub fn txs(&self) -> TxVec {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[1][..]) as usize;
        let end = molecule::unpack_number(&offsets[2][..]) as usize;
        TxVec::new_unchecked(self.0.slice(start, end))
    }
    pub fn challenger_index(&self) -> Uint64 {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[2][..]) as usize;
        if self.has_extra_fields() {
            let end = molecule::unpack_number(&offsets[3][..]) as usize;
            Uint64::new_unchecked(self.0.slice(start, end))
        } else {
            Uint64::new_unchecked(self.0.slice_from(start))
        }
    }
    pub fn as_reader<'r>(&'r self) -> ChallengeContextReader<'r> {
        ChallengeContextReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for ChallengeContext {
    type Builder = ChallengeContextBuilder;
    const NAME: &'static str = "ChallengeContext";
    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        ChallengeContext(data)
    }
    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }
    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }
    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        ChallengeContextReader::from_slice(slice).map(|reader| reader.to_entity())
    }
    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        ChallengeContextReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }
    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }
    fn as_builder(self) -> Self::Builder {
        Self::new_builder()
            .block(self.block())
            .txs(self.txs())
            .challenger_index(self.challenger_index())
    }
}
#[derive(Clone, Copy)]
pub struct ChallengeContextReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for ChallengeContextReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for ChallengeContextReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for ChallengeContextReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "block", self.block())?;
        write!(f, ", {}: {}", "txs", self.txs())?;
        write!(f, ", {}: {}", "challenger_index", self.challenger_index())?;
        let extra_count = self.count_extra_fields();
        if extra_count != 0 {
            write!(f, ", .. ({} fields)", extra_count)?;
        }
        write!(f, " }}")
    }
}
impl<'r> ChallengeContextReader<'r> {
    pub const FIELD_COUNT: usize = 3;
    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }
    pub fn field_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }
    pub fn field_offsets(&self) -> &[[u8; 4]] {
        molecule::unpack_number_vec(&self.as_slice()[molecule::NUMBER_SIZE..])
    }
    pub fn count_extra_fields(&self) -> usize {
        self.field_count() - Self::FIELD_COUNT
    }
    pub fn has_extra_fields(&self) -> bool {
        Self::FIELD_COUNT != self.field_count()
    }
    pub fn block(&self) -> AgBlockReader<'r> {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[0][..]) as usize;
        let end = molecule::unpack_number(&offsets[1][..]) as usize;
        AgBlockReader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn txs(&self) -> TxVecReader<'r> {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[1][..]) as usize;
        let end = molecule::unpack_number(&offsets[2][..]) as usize;
        TxVecReader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn challenger_index(&self) -> Uint64Reader<'r> {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[2][..]) as usize;
        if self.has_extra_fields() {
            let end = molecule::unpack_number(&offsets[3][..]) as usize;
            Uint64Reader::new_unchecked(&self.as_slice()[start..end])
        } else {
            Uint64Reader::new_unchecked(&self.as_slice()[start..])
        }
    }
}
impl<'r> molecule::prelude::Reader<'r> for ChallengeContextReader<'r> {
    type Entity = ChallengeContext;
    const NAME: &'static str = "ChallengeContextReader";
    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().into())
    }
    fn new_unchecked(slice: &'r [u8]) -> Self {
        ChallengeContextReader(slice)
    }
    fn as_slice(&self) -> &'r [u8] {
        self.0
    }
    fn verify(slice: &[u8], compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len < molecule::NUMBER_SIZE {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE, slice_len);
        }
        let total_size = molecule::unpack_number(slice) as usize;
        if slice_len != total_size {
            return ve!(Self, TotalSizeNotMatch, total_size, slice_len);
        }
        if slice_len == molecule::NUMBER_SIZE && Self::FIELD_COUNT == 0 {
            return Ok(());
        }
        if slice_len < molecule::NUMBER_SIZE * 2 {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE * 2, slice_len);
        }
        let offset_first = molecule::unpack_number(&slice[molecule::NUMBER_SIZE..]) as usize;
        if offset_first % 4 != 0 || offset_first < molecule::NUMBER_SIZE * 2 {
            return ve!(Self, OffsetsNotMatch);
        }
        let field_count = offset_first / 4 - 1;
        if field_count < Self::FIELD_COUNT {
            return ve!(Self, FieldCountNotMatch, Self::FIELD_COUNT, field_count);
        } else if !compatible && field_count > Self::FIELD_COUNT {
            return ve!(Self, FieldCountNotMatch, Self::FIELD_COUNT, field_count);
        };
        let header_size = molecule::NUMBER_SIZE * (field_count + 1);
        if slice_len < header_size {
            return ve!(Self, HeaderIsBroken, header_size, slice_len);
        }
        let ptr = molecule::unpack_number_vec(&slice[molecule::NUMBER_SIZE..]);
        let mut offsets: Vec<usize> = ptr[..field_count]
            .iter()
            .map(|x| molecule::unpack_number(&x[..]) as usize)
            .collect();
        offsets.push(total_size);
        if offsets.windows(2).any(|i| i[0] > i[1]) {
            return ve!(Self, OffsetsNotMatch);
        }
        AgBlockReader::verify(&slice[offsets[0]..offsets[1]], compatible)?;
        TxVecReader::verify(&slice[offsets[1]..offsets[2]], compatible)?;
        Uint64Reader::verify(&slice[offsets[2]..offsets[3]], compatible)?;
        Ok(())
    }
}
#[derive(Debug, Default)]
pub struct ChallengeContextBuilder {
    pub(crate) block: AgBlock,
    pub(crate) txs: TxVec,
    pub(crate) challenger_index: Uint64,
}
impl ChallengeContextBuilder {
    pub const FIELD_COUNT: usize = 3;
    pub fn block(mut self, v: AgBlock) -> Self {
        self.block = v;
        self
    }
    pub fn txs(mut self, v: TxVec) -> Self {
        self.txs = v;
        self
    }
    pub fn challenger_index(mut self, v: Uint64) -> Self {
        self.challenger_index = v;
        self
    }
}
impl molecule::prelude::Builder for ChallengeContextBuilder {
    type Entity = ChallengeContext;
    const NAME: &'static str = "ChallengeContextBuilder";
    fn expected_length(&self) -> usize {
        molecule::NUMBER_SIZE * (Self::FIELD_COUNT + 1)
            + self.block.as_slice().len()
            + self.txs.as_slice().len()
            + self.challenger_index.as_slice().len()
    }
    fn write<W: ::molecule::io::Write>(&self, writer: &mut W) -> ::molecule::io::Result<()> {
        let mut total_size = molecule::NUMBER_SIZE * (Self::FIELD_COUNT + 1);
        let mut offsets = Vec::with_capacity(Self::FIELD_COUNT);
        offsets.push(total_size);
        total_size += self.block.as_slice().len();
        offsets.push(total_size);
        total_size += self.txs.as_slice().len();
        offsets.push(total_size);
        total_size += self.challenger_index.as_slice().len();
        writer.write_all(&molecule::pack_number(total_size as molecule::Number))?;
        for offset in offsets.into_iter() {
            writer.write_all(&molecule::pack_number(offset as molecule::Number))?;
        }
        writer.write_all(self.block.as_slice())?;
        writer.write_all(self.txs.as_slice())?;
        writer.write_all(self.challenger_index.as_slice())?;
        Ok(())
    }
    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        ChallengeContext::new_unchecked(inner.into())
    }
}
#[derive(Clone)]
pub struct ChallengeProof(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for ChallengeProof {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for ChallengeProof {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for ChallengeProof {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "txs_proof", self.txs_proof())?;
        let extra_count = self.count_extra_fields();
        if extra_count != 0 {
            write!(f, ", .. ({} fields)", extra_count)?;
        }
        write!(f, " }}")
    }
}
impl ::core::default::Default for ChallengeProof {
    fn default() -> Self {
        let v: Vec<u8> = vec![12, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0];
        ChallengeProof::new_unchecked(v.into())
    }
}
impl ChallengeProof {
    pub const FIELD_COUNT: usize = 1;
    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }
    pub fn field_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }
    pub fn field_offsets(&self) -> &[[u8; 4]] {
        molecule::unpack_number_vec(&self.as_slice()[molecule::NUMBER_SIZE..])
    }
    pub fn count_extra_fields(&self) -> usize {
        self.field_count() - Self::FIELD_COUNT
    }
    pub fn has_extra_fields(&self) -> bool {
        Self::FIELD_COUNT != self.field_count()
    }
    pub fn txs_proof(&self) -> Byte32Vec {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[0][..]) as usize;
        if self.has_extra_fields() {
            let end = molecule::unpack_number(&offsets[1][..]) as usize;
            Byte32Vec::new_unchecked(self.0.slice(start, end))
        } else {
            Byte32Vec::new_unchecked(self.0.slice_from(start))
        }
    }
    pub fn as_reader<'r>(&'r self) -> ChallengeProofReader<'r> {
        ChallengeProofReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for ChallengeProof {
    type Builder = ChallengeProofBuilder;
    const NAME: &'static str = "ChallengeProof";
    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        ChallengeProof(data)
    }
    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }
    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }
    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        ChallengeProofReader::from_slice(slice).map(|reader| reader.to_entity())
    }
    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        ChallengeProofReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }
    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }
    fn as_builder(self) -> Self::Builder {
        Self::new_builder().txs_proof(self.txs_proof())
    }
}
#[derive(Clone, Copy)]
pub struct ChallengeProofReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for ChallengeProofReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for ChallengeProofReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for ChallengeProofReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "txs_proof", self.txs_proof())?;
        let extra_count = self.count_extra_fields();
        if extra_count != 0 {
            write!(f, ", .. ({} fields)", extra_count)?;
        }
        write!(f, " }}")
    }
}
impl<'r> ChallengeProofReader<'r> {
    pub const FIELD_COUNT: usize = 1;
    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }
    pub fn field_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }
    pub fn field_offsets(&self) -> &[[u8; 4]] {
        molecule::unpack_number_vec(&self.as_slice()[molecule::NUMBER_SIZE..])
    }
    pub fn count_extra_fields(&self) -> usize {
        self.field_count() - Self::FIELD_COUNT
    }
    pub fn has_extra_fields(&self) -> bool {
        Self::FIELD_COUNT != self.field_count()
    }
    pub fn txs_proof(&self) -> Byte32VecReader<'r> {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[0][..]) as usize;
        if self.has_extra_fields() {
            let end = molecule::unpack_number(&offsets[1][..]) as usize;
            Byte32VecReader::new_unchecked(&self.as_slice()[start..end])
        } else {
            Byte32VecReader::new_unchecked(&self.as_slice()[start..])
        }
    }
}
impl<'r> molecule::prelude::Reader<'r> for ChallengeProofReader<'r> {
    type Entity = ChallengeProof;
    const NAME: &'static str = "ChallengeProofReader";
    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().into())
    }
    fn new_unchecked(slice: &'r [u8]) -> Self {
        ChallengeProofReader(slice)
    }
    fn as_slice(&self) -> &'r [u8] {
        self.0
    }
    fn verify(slice: &[u8], compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len < molecule::NUMBER_SIZE {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE, slice_len);
        }
        let total_size = molecule::unpack_number(slice) as usize;
        if slice_len != total_size {
            return ve!(Self, TotalSizeNotMatch, total_size, slice_len);
        }
        if slice_len == molecule::NUMBER_SIZE && Self::FIELD_COUNT == 0 {
            return Ok(());
        }
        if slice_len < molecule::NUMBER_SIZE * 2 {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE * 2, slice_len);
        }
        let offset_first = molecule::unpack_number(&slice[molecule::NUMBER_SIZE..]) as usize;
        if offset_first % 4 != 0 || offset_first < molecule::NUMBER_SIZE * 2 {
            return ve!(Self, OffsetsNotMatch);
        }
        let field_count = offset_first / 4 - 1;
        if field_count < Self::FIELD_COUNT {
            return ve!(Self, FieldCountNotMatch, Self::FIELD_COUNT, field_count);
        } else if !compatible && field_count > Self::FIELD_COUNT {
            return ve!(Self, FieldCountNotMatch, Self::FIELD_COUNT, field_count);
        };
        let header_size = molecule::NUMBER_SIZE * (field_count + 1);
        if slice_len < header_size {
            return ve!(Self, HeaderIsBroken, header_size, slice_len);
        }
        let ptr = molecule::unpack_number_vec(&slice[molecule::NUMBER_SIZE..]);
        let mut offsets: Vec<usize> = ptr[..field_count]
            .iter()
            .map(|x| molecule::unpack_number(&x[..]) as usize)
            .collect();
        offsets.push(total_size);
        if offsets.windows(2).any(|i| i[0] > i[1]) {
            return ve!(Self, OffsetsNotMatch);
        }
        Byte32VecReader::verify(&slice[offsets[0]..offsets[1]], compatible)?;
        Ok(())
    }
}
#[derive(Debug, Default)]
pub struct ChallengeProofBuilder {
    pub(crate) txs_proof: Byte32Vec,
}
impl ChallengeProofBuilder {
    pub const FIELD_COUNT: usize = 1;
    pub fn txs_proof(mut self, v: Byte32Vec) -> Self {
        self.txs_proof = v;
        self
    }
}
impl molecule::prelude::Builder for ChallengeProofBuilder {
    type Entity = ChallengeProof;
    const NAME: &'static str = "ChallengeProofBuilder";
    fn expected_length(&self) -> usize {
        molecule::NUMBER_SIZE * (Self::FIELD_COUNT + 1) + self.txs_proof.as_slice().len()
    }
    fn write<W: ::molecule::io::Write>(&self, writer: &mut W) -> ::molecule::io::Result<()> {
        let mut total_size = molecule::NUMBER_SIZE * (Self::FIELD_COUNT + 1);
        let mut offsets = Vec::with_capacity(Self::FIELD_COUNT);
        offsets.push(total_size);
        total_size += self.txs_proof.as_slice().len();
        writer.write_all(&molecule::pack_number(total_size as molecule::Number))?;
        for offset in offsets.into_iter() {
            writer.write_all(&molecule::pack_number(offset as molecule::Number))?;
        }
        writer.write_all(self.txs_proof.as_slice())?;
        Ok(())
    }
    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        ChallengeProof::new_unchecked(inner.into())
    }
}
#[derive(Clone)]
pub struct ChallengeUnlock(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for ChallengeUnlock {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for ChallengeUnlock {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for ChallengeUnlock {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}(", Self::NAME)?;
        self.to_enum().display_inner(f)?;
        write!(f, ")")
    }
}
impl ::core::default::Default for ChallengeUnlock {
    fn default() -> Self {
        let v: Vec<u8> = vec![0, 0, 0, 0, 4, 0, 0, 0];
        ChallengeUnlock::new_unchecked(v.into())
    }
}
impl ChallengeUnlock {
    pub const ITEM_COUNT: usize = 3;
    pub fn item_id(&self) -> molecule::Number {
        molecule::unpack_number(self.as_slice())
    }
    pub fn to_enum(&self) -> ChallengeUnlockUnion {
        let inner = self.0.slice_from(molecule::NUMBER_SIZE);
        match self.item_id() {
            0 => WithdrawChallenge::new_unchecked(inner).into(),
            1 => RevertBlockWithChallenge::new_unchecked(inner).into(),
            2 => InvalidChallenge::new_unchecked(inner).into(),
            _ => panic!("{}: invalid data", Self::NAME),
        }
    }
    pub fn as_reader<'r>(&'r self) -> ChallengeUnlockReader<'r> {
        ChallengeUnlockReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for ChallengeUnlock {
    type Builder = ChallengeUnlockBuilder;
    const NAME: &'static str = "ChallengeUnlock";
    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        ChallengeUnlock(data)
    }
    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }
    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }
    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        ChallengeUnlockReader::from_slice(slice).map(|reader| reader.to_entity())
    }
    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        ChallengeUnlockReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }
    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }
    fn as_builder(self) -> Self::Builder {
        Self::new_builder().set(self.to_enum())
    }
}
#[derive(Clone, Copy)]
pub struct ChallengeUnlockReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for ChallengeUnlockReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for ChallengeUnlockReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for ChallengeUnlockReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}(", Self::NAME)?;
        self.to_enum().display_inner(f)?;
        write!(f, ")")
    }
}
impl<'r> ChallengeUnlockReader<'r> {
    pub const ITEM_COUNT: usize = 3;
    pub fn item_id(&self) -> molecule::Number {
        molecule::unpack_number(self.as_slice())
    }
    pub fn to_enum(&self) -> ChallengeUnlockUnionReader<'r> {
        let inner = &self.as_slice()[molecule::NUMBER_SIZE..];
        match self.item_id() {
            0 => WithdrawChallengeReader::new_unchecked(inner).into(),
            1 => RevertBlockWithChallengeReader::new_unchecked(inner).into(),
            2 => InvalidChallengeReader::new_unchecked(inner).into(),
            _ => panic!("{}: invalid data", Self::NAME),
        }
    }
}
impl<'r> molecule::prelude::Reader<'r> for ChallengeUnlockReader<'r> {
    type Entity = ChallengeUnlock;
    const NAME: &'static str = "ChallengeUnlockReader";
    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().into())
    }
    fn new_unchecked(slice: &'r [u8]) -> Self {
        ChallengeUnlockReader(slice)
    }
    fn as_slice(&self) -> &'r [u8] {
        self.0
    }
    fn verify(slice: &[u8], compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len < molecule::NUMBER_SIZE {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE, slice_len);
        }
        let item_id = molecule::unpack_number(slice);
        let inner_slice = &slice[molecule::NUMBER_SIZE..];
        match item_id {
            0 => WithdrawChallengeReader::verify(inner_slice, compatible),
            1 => RevertBlockWithChallengeReader::verify(inner_slice, compatible),
            2 => InvalidChallengeReader::verify(inner_slice, compatible),
            _ => ve!(Self, UnknownItem, Self::ITEM_COUNT, item_id),
        }?;
        Ok(())
    }
}
#[derive(Debug, Default)]
pub struct ChallengeUnlockBuilder(pub(crate) ChallengeUnlockUnion);
impl ChallengeUnlockBuilder {
    pub const ITEM_COUNT: usize = 3;
    pub fn set<I>(mut self, v: I) -> Self
    where
        I: ::core::convert::Into<ChallengeUnlockUnion>,
    {
        self.0 = v.into();
        self
    }
}
impl molecule::prelude::Builder for ChallengeUnlockBuilder {
    type Entity = ChallengeUnlock;
    const NAME: &'static str = "ChallengeUnlockBuilder";
    fn expected_length(&self) -> usize {
        molecule::NUMBER_SIZE + self.0.as_slice().len()
    }
    fn write<W: ::molecule::io::Write>(&self, writer: &mut W) -> ::molecule::io::Result<()> {
        writer.write_all(&molecule::pack_number(self.0.item_id()))?;
        writer.write_all(self.0.as_slice())
    }
    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        ChallengeUnlock::new_unchecked(inner.into())
    }
}
#[derive(Debug, Clone)]
pub enum ChallengeUnlockUnion {
    WithdrawChallenge(WithdrawChallenge),
    RevertBlockWithChallenge(RevertBlockWithChallenge),
    InvalidChallenge(InvalidChallenge),
}
#[derive(Debug, Clone, Copy)]
pub enum ChallengeUnlockUnionReader<'r> {
    WithdrawChallenge(WithdrawChallengeReader<'r>),
    RevertBlockWithChallenge(RevertBlockWithChallengeReader<'r>),
    InvalidChallenge(InvalidChallengeReader<'r>),
}
impl ::core::default::Default for ChallengeUnlockUnion {
    fn default() -> Self {
        ChallengeUnlockUnion::WithdrawChallenge(::core::default::Default::default())
    }
}
impl ::core::fmt::Display for ChallengeUnlockUnion {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        match self {
            ChallengeUnlockUnion::WithdrawChallenge(ref item) => {
                write!(f, "{}::{}({})", Self::NAME, WithdrawChallenge::NAME, item)
            }
            ChallengeUnlockUnion::RevertBlockWithChallenge(ref item) => write!(
                f,
                "{}::{}({})",
                Self::NAME,
                RevertBlockWithChallenge::NAME,
                item
            ),
            ChallengeUnlockUnion::InvalidChallenge(ref item) => {
                write!(f, "{}::{}({})", Self::NAME, InvalidChallenge::NAME, item)
            }
        }
    }
}
impl<'r> ::core::fmt::Display for ChallengeUnlockUnionReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        match self {
            ChallengeUnlockUnionReader::WithdrawChallenge(ref item) => {
                write!(f, "{}::{}({})", Self::NAME, WithdrawChallenge::NAME, item)
            }
            ChallengeUnlockUnionReader::RevertBlockWithChallenge(ref item) => write!(
                f,
                "{}::{}({})",
                Self::NAME,
                RevertBlockWithChallenge::NAME,
                item
            ),
            ChallengeUnlockUnionReader::InvalidChallenge(ref item) => {
                write!(f, "{}::{}({})", Self::NAME, InvalidChallenge::NAME, item)
            }
        }
    }
}
impl ChallengeUnlockUnion {
    pub(crate) fn display_inner(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        match self {
            ChallengeUnlockUnion::WithdrawChallenge(ref item) => write!(f, "{}", item),
            ChallengeUnlockUnion::RevertBlockWithChallenge(ref item) => write!(f, "{}", item),
            ChallengeUnlockUnion::InvalidChallenge(ref item) => write!(f, "{}", item),
        }
    }
}
impl<'r> ChallengeUnlockUnionReader<'r> {
    pub(crate) fn display_inner(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        match self {
            ChallengeUnlockUnionReader::WithdrawChallenge(ref item) => write!(f, "{}", item),
            ChallengeUnlockUnionReader::RevertBlockWithChallenge(ref item) => write!(f, "{}", item),
            ChallengeUnlockUnionReader::InvalidChallenge(ref item) => write!(f, "{}", item),
        }
    }
}
impl ::core::convert::From<WithdrawChallenge> for ChallengeUnlockUnion {
    fn from(item: WithdrawChallenge) -> Self {
        ChallengeUnlockUnion::WithdrawChallenge(item)
    }
}
impl ::core::convert::From<RevertBlockWithChallenge> for ChallengeUnlockUnion {
    fn from(item: RevertBlockWithChallenge) -> Self {
        ChallengeUnlockUnion::RevertBlockWithChallenge(item)
    }
}
impl ::core::convert::From<InvalidChallenge> for ChallengeUnlockUnion {
    fn from(item: InvalidChallenge) -> Self {
        ChallengeUnlockUnion::InvalidChallenge(item)
    }
}
impl<'r> ::core::convert::From<WithdrawChallengeReader<'r>> for ChallengeUnlockUnionReader<'r> {
    fn from(item: WithdrawChallengeReader<'r>) -> Self {
        ChallengeUnlockUnionReader::WithdrawChallenge(item)
    }
}
impl<'r> ::core::convert::From<RevertBlockWithChallengeReader<'r>>
    for ChallengeUnlockUnionReader<'r>
{
    fn from(item: RevertBlockWithChallengeReader<'r>) -> Self {
        ChallengeUnlockUnionReader::RevertBlockWithChallenge(item)
    }
}
impl<'r> ::core::convert::From<InvalidChallengeReader<'r>> for ChallengeUnlockUnionReader<'r> {
    fn from(item: InvalidChallengeReader<'r>) -> Self {
        ChallengeUnlockUnionReader::InvalidChallenge(item)
    }
}
impl ChallengeUnlockUnion {
    pub const NAME: &'static str = "ChallengeUnlockUnion";
    pub fn as_bytes(&self) -> molecule::bytes::Bytes {
        match self {
            ChallengeUnlockUnion::WithdrawChallenge(item) => item.as_bytes(),
            ChallengeUnlockUnion::RevertBlockWithChallenge(item) => item.as_bytes(),
            ChallengeUnlockUnion::InvalidChallenge(item) => item.as_bytes(),
        }
    }
    pub fn as_slice(&self) -> &[u8] {
        match self {
            ChallengeUnlockUnion::WithdrawChallenge(item) => item.as_slice(),
            ChallengeUnlockUnion::RevertBlockWithChallenge(item) => item.as_slice(),
            ChallengeUnlockUnion::InvalidChallenge(item) => item.as_slice(),
        }
    }
    pub fn item_id(&self) -> molecule::Number {
        match self {
            ChallengeUnlockUnion::WithdrawChallenge(_) => 0,
            ChallengeUnlockUnion::RevertBlockWithChallenge(_) => 1,
            ChallengeUnlockUnion::InvalidChallenge(_) => 2,
        }
    }
    pub fn item_name(&self) -> &str {
        match self {
            ChallengeUnlockUnion::WithdrawChallenge(_) => "WithdrawChallenge",
            ChallengeUnlockUnion::RevertBlockWithChallenge(_) => "RevertBlockWithChallenge",
            ChallengeUnlockUnion::InvalidChallenge(_) => "InvalidChallenge",
        }
    }
    pub fn as_reader<'r>(&'r self) -> ChallengeUnlockUnionReader<'r> {
        match self {
            ChallengeUnlockUnion::WithdrawChallenge(item) => item.as_reader().into(),
            ChallengeUnlockUnion::RevertBlockWithChallenge(item) => item.as_reader().into(),
            ChallengeUnlockUnion::InvalidChallenge(item) => item.as_reader().into(),
        }
    }
}
impl<'r> ChallengeUnlockUnionReader<'r> {
    pub const NAME: &'r str = "ChallengeUnlockUnionReader";
    pub fn as_slice(&self) -> &'r [u8] {
        match self {
            ChallengeUnlockUnionReader::WithdrawChallenge(item) => item.as_slice(),
            ChallengeUnlockUnionReader::RevertBlockWithChallenge(item) => item.as_slice(),
            ChallengeUnlockUnionReader::InvalidChallenge(item) => item.as_slice(),
        }
    }
    pub fn item_id(&self) -> molecule::Number {
        match self {
            ChallengeUnlockUnionReader::WithdrawChallenge(_) => 0,
            ChallengeUnlockUnionReader::RevertBlockWithChallenge(_) => 1,
            ChallengeUnlockUnionReader::InvalidChallenge(_) => 2,
        }
    }
    pub fn item_name(&self) -> &str {
        match self {
            ChallengeUnlockUnionReader::WithdrawChallenge(_) => "WithdrawChallenge",
            ChallengeUnlockUnionReader::RevertBlockWithChallenge(_) => "RevertBlockWithChallenge",
            ChallengeUnlockUnionReader::InvalidChallenge(_) => "InvalidChallenge",
        }
    }
}
#[derive(Clone)]
pub struct WithdrawChallenge(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for WithdrawChallenge {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for WithdrawChallenge {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for WithdrawChallenge {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        let extra_count = self.count_extra_fields();
        if extra_count != 0 {
            write!(f, ".. ({} fields)", extra_count)?;
        }
        write!(f, " }}")
    }
}
impl ::core::default::Default for WithdrawChallenge {
    fn default() -> Self {
        let v: Vec<u8> = vec![4, 0, 0, 0];
        WithdrawChallenge::new_unchecked(v.into())
    }
}
impl WithdrawChallenge {
    pub const FIELD_COUNT: usize = 0;
    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }
    pub fn field_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }
    pub fn field_offsets(&self) -> &[[u8; 4]] {
        molecule::unpack_number_vec(&self.as_slice()[molecule::NUMBER_SIZE..])
    }
    pub fn count_extra_fields(&self) -> usize {
        self.field_count() - Self::FIELD_COUNT
    }
    pub fn has_extra_fields(&self) -> bool {
        Self::FIELD_COUNT != self.field_count()
    }
    pub fn as_reader<'r>(&'r self) -> WithdrawChallengeReader<'r> {
        WithdrawChallengeReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for WithdrawChallenge {
    type Builder = WithdrawChallengeBuilder;
    const NAME: &'static str = "WithdrawChallenge";
    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        WithdrawChallenge(data)
    }
    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }
    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }
    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        WithdrawChallengeReader::from_slice(slice).map(|reader| reader.to_entity())
    }
    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        WithdrawChallengeReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }
    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }
    fn as_builder(self) -> Self::Builder {
        Self::new_builder()
    }
}
#[derive(Clone, Copy)]
pub struct WithdrawChallengeReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for WithdrawChallengeReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for WithdrawChallengeReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for WithdrawChallengeReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        let extra_count = self.count_extra_fields();
        if extra_count != 0 {
            write!(f, ".. ({} fields)", extra_count)?;
        }
        write!(f, " }}")
    }
}
impl<'r> WithdrawChallengeReader<'r> {
    pub const FIELD_COUNT: usize = 0;
    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }
    pub fn field_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }
    pub fn field_offsets(&self) -> &[[u8; 4]] {
        molecule::unpack_number_vec(&self.as_slice()[molecule::NUMBER_SIZE..])
    }
    pub fn count_extra_fields(&self) -> usize {
        self.field_count() - Self::FIELD_COUNT
    }
    pub fn has_extra_fields(&self) -> bool {
        Self::FIELD_COUNT != self.field_count()
    }
}
impl<'r> molecule::prelude::Reader<'r> for WithdrawChallengeReader<'r> {
    type Entity = WithdrawChallenge;
    const NAME: &'static str = "WithdrawChallengeReader";
    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().into())
    }
    fn new_unchecked(slice: &'r [u8]) -> Self {
        WithdrawChallengeReader(slice)
    }
    fn as_slice(&self) -> &'r [u8] {
        self.0
    }
    fn verify(slice: &[u8], compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len < molecule::NUMBER_SIZE {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE, slice_len);
        }
        let total_size = molecule::unpack_number(slice) as usize;
        if slice_len != total_size {
            return ve!(Self, TotalSizeNotMatch, total_size, slice_len);
        }
        if slice_len > molecule::NUMBER_SIZE && !compatible {
            return ve!(Self, FieldCountNotMatch, Self::FIELD_COUNT, !0);
        }
        Ok(())
    }
}
#[derive(Debug, Default)]
pub struct WithdrawChallengeBuilder {}
impl WithdrawChallengeBuilder {
    pub const FIELD_COUNT: usize = 0;
}
impl molecule::prelude::Builder for WithdrawChallengeBuilder {
    type Entity = WithdrawChallenge;
    const NAME: &'static str = "WithdrawChallengeBuilder";
    fn expected_length(&self) -> usize {
        molecule::NUMBER_SIZE
    }
    fn write<W: ::molecule::io::Write>(&self, writer: &mut W) -> ::molecule::io::Result<()> {
        writer.write_all(&molecule::pack_number(
            molecule::NUMBER_SIZE as molecule::Number,
        ))?;
        Ok(())
    }
    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        WithdrawChallenge::new_unchecked(inner.into())
    }
}
#[derive(Clone)]
pub struct RevertBlockWithChallenge(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for RevertBlockWithChallenge {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for RevertBlockWithChallenge {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for RevertBlockWithChallenge {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        let extra_count = self.count_extra_fields();
        if extra_count != 0 {
            write!(f, ".. ({} fields)", extra_count)?;
        }
        write!(f, " }}")
    }
}
impl ::core::default::Default for RevertBlockWithChallenge {
    fn default() -> Self {
        let v: Vec<u8> = vec![4, 0, 0, 0];
        RevertBlockWithChallenge::new_unchecked(v.into())
    }
}
impl RevertBlockWithChallenge {
    pub const FIELD_COUNT: usize = 0;
    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }
    pub fn field_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }
    pub fn field_offsets(&self) -> &[[u8; 4]] {
        molecule::unpack_number_vec(&self.as_slice()[molecule::NUMBER_SIZE..])
    }
    pub fn count_extra_fields(&self) -> usize {
        self.field_count() - Self::FIELD_COUNT
    }
    pub fn has_extra_fields(&self) -> bool {
        Self::FIELD_COUNT != self.field_count()
    }
    pub fn as_reader<'r>(&'r self) -> RevertBlockWithChallengeReader<'r> {
        RevertBlockWithChallengeReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for RevertBlockWithChallenge {
    type Builder = RevertBlockWithChallengeBuilder;
    const NAME: &'static str = "RevertBlockWithChallenge";
    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        RevertBlockWithChallenge(data)
    }
    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }
    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }
    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        RevertBlockWithChallengeReader::from_slice(slice).map(|reader| reader.to_entity())
    }
    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        RevertBlockWithChallengeReader::from_compatible_slice(slice)
            .map(|reader| reader.to_entity())
    }
    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }
    fn as_builder(self) -> Self::Builder {
        Self::new_builder()
    }
}
#[derive(Clone, Copy)]
pub struct RevertBlockWithChallengeReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for RevertBlockWithChallengeReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for RevertBlockWithChallengeReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for RevertBlockWithChallengeReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        let extra_count = self.count_extra_fields();
        if extra_count != 0 {
            write!(f, ".. ({} fields)", extra_count)?;
        }
        write!(f, " }}")
    }
}
impl<'r> RevertBlockWithChallengeReader<'r> {
    pub const FIELD_COUNT: usize = 0;
    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }
    pub fn field_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }
    pub fn field_offsets(&self) -> &[[u8; 4]] {
        molecule::unpack_number_vec(&self.as_slice()[molecule::NUMBER_SIZE..])
    }
    pub fn count_extra_fields(&self) -> usize {
        self.field_count() - Self::FIELD_COUNT
    }
    pub fn has_extra_fields(&self) -> bool {
        Self::FIELD_COUNT != self.field_count()
    }
}
impl<'r> molecule::prelude::Reader<'r> for RevertBlockWithChallengeReader<'r> {
    type Entity = RevertBlockWithChallenge;
    const NAME: &'static str = "RevertBlockWithChallengeReader";
    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().into())
    }
    fn new_unchecked(slice: &'r [u8]) -> Self {
        RevertBlockWithChallengeReader(slice)
    }
    fn as_slice(&self) -> &'r [u8] {
        self.0
    }
    fn verify(slice: &[u8], compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len < molecule::NUMBER_SIZE {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE, slice_len);
        }
        let total_size = molecule::unpack_number(slice) as usize;
        if slice_len != total_size {
            return ve!(Self, TotalSizeNotMatch, total_size, slice_len);
        }
        if slice_len > molecule::NUMBER_SIZE && !compatible {
            return ve!(Self, FieldCountNotMatch, Self::FIELD_COUNT, !0);
        }
        Ok(())
    }
}
#[derive(Debug, Default)]
pub struct RevertBlockWithChallengeBuilder {}
impl RevertBlockWithChallengeBuilder {
    pub const FIELD_COUNT: usize = 0;
}
impl molecule::prelude::Builder for RevertBlockWithChallengeBuilder {
    type Entity = RevertBlockWithChallenge;
    const NAME: &'static str = "RevertBlockWithChallengeBuilder";
    fn expected_length(&self) -> usize {
        molecule::NUMBER_SIZE
    }
    fn write<W: ::molecule::io::Write>(&self, writer: &mut W) -> ::molecule::io::Result<()> {
        writer.write_all(&molecule::pack_number(
            molecule::NUMBER_SIZE as molecule::Number,
        ))?;
        Ok(())
    }
    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        RevertBlockWithChallenge::new_unchecked(inner.into())
    }
}
#[derive(Clone)]
pub struct InvalidChallenge(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for InvalidChallenge {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for InvalidChallenge {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for InvalidChallenge {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "touched_accounts", self.touched_accounts())?;
        write!(
            f,
            ", {}: {}",
            "touched_accounts_token_kv",
            self.touched_accounts_token_kv()
        )?;
        write!(
            f,
            ", {}: {}",
            "touched_accounts_proof",
            self.touched_accounts_proof()
        )?;
        let extra_count = self.count_extra_fields();
        if extra_count != 0 {
            write!(f, ", .. ({} fields)", extra_count)?;
        }
        write!(f, " }}")
    }
}
impl ::core::default::Default for InvalidChallenge {
    fn default() -> Self {
        let v: Vec<u8> = vec![
            44, 0, 0, 0, 16, 0, 0, 0, 20, 0, 0, 0, 24, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 20, 0, 0,
            0, 12, 0, 0, 0, 16, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0,
        ];
        InvalidChallenge::new_unchecked(v.into())
    }
}
impl InvalidChallenge {
    pub const FIELD_COUNT: usize = 3;
    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }
    pub fn field_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }
    pub fn field_offsets(&self) -> &[[u8; 4]] {
        molecule::unpack_number_vec(&self.as_slice()[molecule::NUMBER_SIZE..])
    }
    pub fn count_extra_fields(&self) -> usize {
        self.field_count() - Self::FIELD_COUNT
    }
    pub fn has_extra_fields(&self) -> bool {
        Self::FIELD_COUNT != self.field_count()
    }
    pub fn touched_accounts(&self) -> AccountVec {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[0][..]) as usize;
        let end = molecule::unpack_number(&offsets[1][..]) as usize;
        AccountVec::new_unchecked(self.0.slice(start, end))
    }
    pub fn touched_accounts_token_kv(&self) -> KeyValueMapVec {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[1][..]) as usize;
        let end = molecule::unpack_number(&offsets[2][..]) as usize;
        KeyValueMapVec::new_unchecked(self.0.slice(start, end))
    }
    pub fn touched_accounts_proof(&self) -> SMTProof {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[2][..]) as usize;
        if self.has_extra_fields() {
            let end = molecule::unpack_number(&offsets[3][..]) as usize;
            SMTProof::new_unchecked(self.0.slice(start, end))
        } else {
            SMTProof::new_unchecked(self.0.slice_from(start))
        }
    }
    pub fn as_reader<'r>(&'r self) -> InvalidChallengeReader<'r> {
        InvalidChallengeReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for InvalidChallenge {
    type Builder = InvalidChallengeBuilder;
    const NAME: &'static str = "InvalidChallenge";
    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        InvalidChallenge(data)
    }
    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }
    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }
    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        InvalidChallengeReader::from_slice(slice).map(|reader| reader.to_entity())
    }
    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        InvalidChallengeReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }
    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }
    fn as_builder(self) -> Self::Builder {
        Self::new_builder()
            .touched_accounts(self.touched_accounts())
            .touched_accounts_token_kv(self.touched_accounts_token_kv())
            .touched_accounts_proof(self.touched_accounts_proof())
    }
}
#[derive(Clone, Copy)]
pub struct InvalidChallengeReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for InvalidChallengeReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for InvalidChallengeReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for InvalidChallengeReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "touched_accounts", self.touched_accounts())?;
        write!(
            f,
            ", {}: {}",
            "touched_accounts_token_kv",
            self.touched_accounts_token_kv()
        )?;
        write!(
            f,
            ", {}: {}",
            "touched_accounts_proof",
            self.touched_accounts_proof()
        )?;
        let extra_count = self.count_extra_fields();
        if extra_count != 0 {
            write!(f, ", .. ({} fields)", extra_count)?;
        }
        write!(f, " }}")
    }
}
impl<'r> InvalidChallengeReader<'r> {
    pub const FIELD_COUNT: usize = 3;
    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }
    pub fn field_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }
    pub fn field_offsets(&self) -> &[[u8; 4]] {
        molecule::unpack_number_vec(&self.as_slice()[molecule::NUMBER_SIZE..])
    }
    pub fn count_extra_fields(&self) -> usize {
        self.field_count() - Self::FIELD_COUNT
    }
    pub fn has_extra_fields(&self) -> bool {
        Self::FIELD_COUNT != self.field_count()
    }
    pub fn touched_accounts(&self) -> AccountVecReader<'r> {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[0][..]) as usize;
        let end = molecule::unpack_number(&offsets[1][..]) as usize;
        AccountVecReader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn touched_accounts_token_kv(&self) -> KeyValueMapVecReader<'r> {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[1][..]) as usize;
        let end = molecule::unpack_number(&offsets[2][..]) as usize;
        KeyValueMapVecReader::new_unchecked(&self.as_slice()[start..end])
    }
    pub fn touched_accounts_proof(&self) -> SMTProofReader<'r> {
        let offsets = self.field_offsets();
        let start = molecule::unpack_number(&offsets[2][..]) as usize;
        if self.has_extra_fields() {
            let end = molecule::unpack_number(&offsets[3][..]) as usize;
            SMTProofReader::new_unchecked(&self.as_slice()[start..end])
        } else {
            SMTProofReader::new_unchecked(&self.as_slice()[start..])
        }
    }
}
impl<'r> molecule::prelude::Reader<'r> for InvalidChallengeReader<'r> {
    type Entity = InvalidChallenge;
    const NAME: &'static str = "InvalidChallengeReader";
    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().into())
    }
    fn new_unchecked(slice: &'r [u8]) -> Self {
        InvalidChallengeReader(slice)
    }
    fn as_slice(&self) -> &'r [u8] {
        self.0
    }
    fn verify(slice: &[u8], compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len < molecule::NUMBER_SIZE {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE, slice_len);
        }
        let total_size = molecule::unpack_number(slice) as usize;
        if slice_len != total_size {
            return ve!(Self, TotalSizeNotMatch, total_size, slice_len);
        }
        if slice_len == molecule::NUMBER_SIZE && Self::FIELD_COUNT == 0 {
            return Ok(());
        }
        if slice_len < molecule::NUMBER_SIZE * 2 {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE * 2, slice_len);
        }
        let offset_first = molecule::unpack_number(&slice[molecule::NUMBER_SIZE..]) as usize;
        if offset_first % 4 != 0 || offset_first < molecule::NUMBER_SIZE * 2 {
            return ve!(Self, OffsetsNotMatch);
        }
        let field_count = offset_first / 4 - 1;
        if field_count < Self::FIELD_COUNT {
            return ve!(Self, FieldCountNotMatch, Self::FIELD_COUNT, field_count);
        } else if !compatible && field_count > Self::FIELD_COUNT {
            return ve!(Self, FieldCountNotMatch, Self::FIELD_COUNT, field_count);
        };
        let header_size = molecule::NUMBER_SIZE * (field_count + 1);
        if slice_len < header_size {
            return ve!(Self, HeaderIsBroken, header_size, slice_len);
        }
        let ptr = molecule::unpack_number_vec(&slice[molecule::NUMBER_SIZE..]);
        let mut offsets: Vec<usize> = ptr[..field_count]
            .iter()
            .map(|x| molecule::unpack_number(&x[..]) as usize)
            .collect();
        offsets.push(total_size);
        if offsets.windows(2).any(|i| i[0] > i[1]) {
            return ve!(Self, OffsetsNotMatch);
        }
        AccountVecReader::verify(&slice[offsets[0]..offsets[1]], compatible)?;
        KeyValueMapVecReader::verify(&slice[offsets[1]..offsets[2]], compatible)?;
        SMTProofReader::verify(&slice[offsets[2]..offsets[3]], compatible)?;
        Ok(())
    }
}
#[derive(Debug, Default)]
pub struct InvalidChallengeBuilder {
    pub(crate) touched_accounts: AccountVec,
    pub(crate) touched_accounts_token_kv: KeyValueMapVec,
    pub(crate) touched_accounts_proof: SMTProof,
}
impl InvalidChallengeBuilder {
    pub const FIELD_COUNT: usize = 3;
    pub fn touched_accounts(mut self, v: AccountVec) -> Self {
        self.touched_accounts = v;
        self
    }
    pub fn touched_accounts_token_kv(mut self, v: KeyValueMapVec) -> Self {
        self.touched_accounts_token_kv = v;
        self
    }
    pub fn touched_accounts_proof(mut self, v: SMTProof) -> Self {
        self.touched_accounts_proof = v;
        self
    }
}
impl molecule::prelude::Builder for InvalidChallengeBuilder {
    type Entity = InvalidChallenge;
    const NAME: &'static str = "InvalidChallengeBuilder";
    fn expected_length(&self) -> usize {
        molecule::NUMBER_SIZE * (Self::FIELD_COUNT + 1)
            + self.touched_accounts.as_slice().len()
            + self.touched_accounts_token_kv.as_slice().len()
            + self.touched_accounts_proof.as_slice().len()
    }
    fn write<W: ::molecule::io::Write>(&self, writer: &mut W) -> ::molecule::io::Result<()> {
        let mut total_size = molecule::NUMBER_SIZE * (Self::FIELD_COUNT + 1);
        let mut offsets = Vec::with_capacity(Self::FIELD_COUNT);
        offsets.push(total_size);
        total_size += self.touched_accounts.as_slice().len();
        offsets.push(total_size);
        total_size += self.touched_accounts_token_kv.as_slice().len();
        offsets.push(total_size);
        total_size += self.touched_accounts_proof.as_slice().len();
        writer.write_all(&molecule::pack_number(total_size as molecule::Number))?;
        for offset in offsets.into_iter() {
            writer.write_all(&molecule::pack_number(offset as molecule::Number))?;
        }
        writer.write_all(self.touched_accounts.as_slice())?;
        writer.write_all(self.touched_accounts_token_kv.as_slice())?;
        writer.write_all(self.touched_accounts_proof.as_slice())?;
        Ok(())
    }
    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        InvalidChallenge::new_unchecked(inner.into())
    }
}
