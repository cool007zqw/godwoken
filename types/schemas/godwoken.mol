import blockchain;

/* contract types */

array Byte20 [byte; 20];

/* Global state
 * We use single Byte32 to digest global state.
 * For the purpose of dynamic accumulate and easy to verify, 
 * Mountain merkle range(MMR) is chosen as our accumulator.
 * Reference implementation: https://github.com/nervosnetwork/merkle-mountain-range
 */
struct GlobalState {
    address_root: Byte32, // H(count | merkle root of address entries)
}

struct AddressEntry {
    index: Uint32, // address index
    pubkey_hash: Byte20, // pubkey hash -> blake2b160(secp256k1 pubkey)
    nonce: Uint32, // nonce
    balance: Uint64, // balance
}

/* contract allowed actions */

union Action {
    Register,
    Deposit,
}

table Register {
    address_entry: AddressEntry,
    last_address_entry_hash: Byte32, // used for merkle proof
    mmr_size: Uint64, // MMR size
    proof: Byte32Vec, // merkle proof of old state address entry
}

struct Deposit {
    dummy: Uint32,
}
