import blockchain;

/* contract types */

array Byte20 [byte; 20];
array Byte65 [byte; 65];

/* Global state
 * We use single Byte32 to digest global state.
 * For the purpose of dynamic accumulate and easy to verify, 
 * Mountain merkle range(MMR) is chosen as our accumulator.
 * Reference implementation: https://github.com/nervosnetwork/merkle-mountain-range
 */
struct GlobalState {
    account_root: Byte32, // merkle root of accounts
    block_root: Byte32, // merkle root of blocks
    account_count: Uint64,
    block_count: Uint64,
}

table AccountScript {
    code_hash: Byte32,
    args: Bytes,
}

option AccountScriptOpt (AccountScript);

struct KeyValue {
    key: Byte32,
    value: Uint64,
}

vector KeyValueMap <KeyValue>;

vector TreePath <byte>;
vector TreePathVec <TreePath>;
struct SMTBranch {
    node: Byte32,
    height: byte,
}

vector SMTBranchVec <SMTBranch>;

table SMTProof {
    leaves_path: TreePathVec,
    proof: SMTBranchVec,
}

table Account {
    index: Uint64, // address index
    script: AccountScriptOpt, // account's code
    nonce: Uint32, // nonce
    pubkey_hash: Byte20, // pubkey hash
}

/* Payment
 * support describe UDT or native token
 */
union Payment {
    Uint32,
    UDTPayment,
}

struct UDTPayment {
    type_hash: Byte32,
    amount: Uint32,
}

table Tx {
    sender_index: Uint64,
    to_index: Uint64,
    nonce: Uint32, // nonce
    amount: Payment, // amount
    fee: Payment, // fee
    args: Bytes, // pass args to contract
    witness: Bytes, // tx's signature
}

vector TxVec <Tx>;

/* Aggregated block */
table AgBlock {
    number: Uint64, // block number
    tx_root: Byte32,
    txs_count: Uint32,
    prev_account_root: Byte32, // account root before this block
    account_count: Uint64,
    account_root: Byte32, // account root after this block
    ag_sig: Byte65, // Aggregator's signature
    ag_index: Uint64, // Aggregator's index
}

/* contract allowed actions */

union Action {
    Register,
    Deposit,
    SubmitBlock,
    RevertBlock,
}

/* Register a new account */
table Register {
    account: Account,
    proof: SMTProof, // non inclusion merkle proof of account
}

/* Deposit coins */
table Deposit {
    account: Account, // Account contains old state.
    token_kv: KeyValueMap,
    proof: SMTProof, // merkle proof for account
}

/* Submit aggregator block */
table SubmitBlock {
    txs: TxVec,
    block: AgBlock,
    last_block_hash: Byte32, // last blocks hash
    block_proof: Byte32Vec, // merkle proof of block_root
    ag_account: Account, // aggregator's account
    token_kv: KeyValueMap, // aggregator's kv map
    account_proof: SMTProof, // merkle proof of account_root
}


vector AccountVec <Account>;
vector KeyValueMapVec <KeyValueMap>;

/* Revert a block */
table RevertBlock {
    challenge_cell_data_hash: Byte32, // data_hash of challenge cell
    block_proof: Byte32Vec, // merkle proof of block exists
    ag_account: Account,
    challenger_account: Account,
    aggregator_token_kv: KeyValueMap, // kv
    challenger_token_kv: KeyValueMap, // kv
    accounts_proof: SMTProof, // merkle proof (before this block)
}

/* Challenge contract */
struct ChallengeArgs {
    main_type_hash: Byte32, // main contract's type_hash
    withdraw_lock_hash: Byte32,
}

table ChallengeContext {
    block: AgBlock, // invalid block
    txs: TxVec, // transactions
    challenger_index: Uint64, // reward will send to this account
}

table ChallengeProof {
    txs_proof: Byte32Vec, // merkle proof txs exists
}

union ChallengeUnlock {
    WithdrawChallenge,
    RevertBlockWithChallenge,
    InvalidChallenge,
}

/* withdraw challenge request */
table WithdrawChallenge{}

/* use challenge cell as proof in main contract */
table RevertBlockWithChallenge{}

/* invalid the challenge cell and get bond */
table InvalidChallenge{
    touched_accounts: AccountVec, // touch accounts previous state
    touched_accounts_token_kv: KeyValueMapVec, // kv
    touched_accounts_proof: SMTProof, // inclusion proof of touched accounts
}
