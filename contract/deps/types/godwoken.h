// Generated by Molecule 0.4.2

#include "molecule_reader.h"
#include "molecule_builder.h"

#ifndef GODWOKEN_H
#define GODWOKEN_H

#ifdef __cplusplus
#define _CPP_BEGIN extern "C" {
#define _CPP_END }
_CPP_BEGIN
#endif /* __cplusplus */

#include "blockchain.h"

/*
 * Reader APIs
 */

#define         MolReader_Byte20_verify(s, c)                   mol_verify_fixed_size(s, 20)
#define         MolReader_Byte20_get_nth0(s)                    mol_slice_by_offset(s, 0, 1)
#define         MolReader_Byte20_get_nth1(s)                    mol_slice_by_offset(s, 1, 1)
#define         MolReader_Byte20_get_nth2(s)                    mol_slice_by_offset(s, 2, 1)
#define         MolReader_Byte20_get_nth3(s)                    mol_slice_by_offset(s, 3, 1)
#define         MolReader_Byte20_get_nth4(s)                    mol_slice_by_offset(s, 4, 1)
#define         MolReader_Byte20_get_nth5(s)                    mol_slice_by_offset(s, 5, 1)
#define         MolReader_Byte20_get_nth6(s)                    mol_slice_by_offset(s, 6, 1)
#define         MolReader_Byte20_get_nth7(s)                    mol_slice_by_offset(s, 7, 1)
#define         MolReader_Byte20_get_nth8(s)                    mol_slice_by_offset(s, 8, 1)
#define         MolReader_Byte20_get_nth9(s)                    mol_slice_by_offset(s, 9, 1)
#define         MolReader_Byte20_get_nth10(s)                   mol_slice_by_offset(s, 10, 1)
#define         MolReader_Byte20_get_nth11(s)                   mol_slice_by_offset(s, 11, 1)
#define         MolReader_Byte20_get_nth12(s)                   mol_slice_by_offset(s, 12, 1)
#define         MolReader_Byte20_get_nth13(s)                   mol_slice_by_offset(s, 13, 1)
#define         MolReader_Byte20_get_nth14(s)                   mol_slice_by_offset(s, 14, 1)
#define         MolReader_Byte20_get_nth15(s)                   mol_slice_by_offset(s, 15, 1)
#define         MolReader_Byte20_get_nth16(s)                   mol_slice_by_offset(s, 16, 1)
#define         MolReader_Byte20_get_nth17(s)                   mol_slice_by_offset(s, 17, 1)
#define         MolReader_Byte20_get_nth18(s)                   mol_slice_by_offset(s, 18, 1)
#define         MolReader_Byte20_get_nth19(s)                   mol_slice_by_offset(s, 19, 1)
#define         MolReader_GlobalState_verify(s, c)              mol_verify_fixed_size(s, 32)
#define         MolReader_GlobalState_get_address_root(s)       mol_slice_by_offset(s, 0, 32)
#define         MolReader_AddressEntry_verify(s, c)             mol_verify_fixed_size(s, 36)
#define         MolReader_AddressEntry_get_index(s)             mol_slice_by_offset(s, 0, 4)
#define         MolReader_AddressEntry_get_pubkey_hash(s)       mol_slice_by_offset(s, 4, 20)
#define         MolReader_AddressEntry_get_nonce(s)             mol_slice_by_offset(s, 24, 4)
#define         MolReader_AddressEntry_get_balance(s)           mol_slice_by_offset(s, 28, 8)
mol_errno       MolReader_Action_verify                         (const mol_seg_t*, bool);
#define         MolReader_Action_unpack(s)                      mol_union_unpack(s)
mol_errno       MolReader_Register_verify                       (const mol_seg_t*, bool);
#define         MolReader_Register_actual_field_count(s)        mol_table_actual_field_count(s)
#define         MolReader_Register_has_extra_fields(s)          mol_table_has_extra_fields(s, 4)
#define         MolReader_Register_get_entry(s)                 mol_table_slice_by_index(s, 0)
#define         MolReader_Register_get_last_entry_hash(s)       mol_table_slice_by_index(s, 1)
#define         MolReader_Register_get_mmr_size(s)              mol_table_slice_by_index(s, 2)
#define         MolReader_Register_get_proof(s)                 mol_table_slice_by_index(s, 3)
#define         MolReader_Deposit_verify(s, c)                  mol_verify_fixed_size(s, 36)
#define         MolReader_Deposit_get_entry(s)                  mol_slice_by_offset(s, 0, 36)

/*
 * Builder APIs
 */

#define         MolBuilder_Byte20_init(b)                       mol_builder_initialize_fixed_size(b, 20)
#define         MolBuilder_Byte20_set_nth0(b, p)                mol_builder_set_byte_by_offset(b, 0, p)
#define         MolBuilder_Byte20_set_nth1(b, p)                mol_builder_set_byte_by_offset(b, 1, p)
#define         MolBuilder_Byte20_set_nth2(b, p)                mol_builder_set_byte_by_offset(b, 2, p)
#define         MolBuilder_Byte20_set_nth3(b, p)                mol_builder_set_byte_by_offset(b, 3, p)
#define         MolBuilder_Byte20_set_nth4(b, p)                mol_builder_set_byte_by_offset(b, 4, p)
#define         MolBuilder_Byte20_set_nth5(b, p)                mol_builder_set_byte_by_offset(b, 5, p)
#define         MolBuilder_Byte20_set_nth6(b, p)                mol_builder_set_byte_by_offset(b, 6, p)
#define         MolBuilder_Byte20_set_nth7(b, p)                mol_builder_set_byte_by_offset(b, 7, p)
#define         MolBuilder_Byte20_set_nth8(b, p)                mol_builder_set_byte_by_offset(b, 8, p)
#define         MolBuilder_Byte20_set_nth9(b, p)                mol_builder_set_byte_by_offset(b, 9, p)
#define         MolBuilder_Byte20_set_nth10(b, p)               mol_builder_set_byte_by_offset(b, 10, p)
#define         MolBuilder_Byte20_set_nth11(b, p)               mol_builder_set_byte_by_offset(b, 11, p)
#define         MolBuilder_Byte20_set_nth12(b, p)               mol_builder_set_byte_by_offset(b, 12, p)
#define         MolBuilder_Byte20_set_nth13(b, p)               mol_builder_set_byte_by_offset(b, 13, p)
#define         MolBuilder_Byte20_set_nth14(b, p)               mol_builder_set_byte_by_offset(b, 14, p)
#define         MolBuilder_Byte20_set_nth15(b, p)               mol_builder_set_byte_by_offset(b, 15, p)
#define         MolBuilder_Byte20_set_nth16(b, p)               mol_builder_set_byte_by_offset(b, 16, p)
#define         MolBuilder_Byte20_set_nth17(b, p)               mol_builder_set_byte_by_offset(b, 17, p)
#define         MolBuilder_Byte20_set_nth18(b, p)               mol_builder_set_byte_by_offset(b, 18, p)
#define         MolBuilder_Byte20_set_nth19(b, p)               mol_builder_set_byte_by_offset(b, 19, p)
#define         MolBuilder_Byte20_build(b)                      mol_builder_finalize_simple(b)
#define         MolBuilder_Byte20_clear(b)                      mol_builder_discard(b)
#define         MolBuilder_GlobalState_init(b)                  mol_builder_initialize_fixed_size(b, 32)
#define         MolBuilder_GlobalState_set_address_root(b, p)   mol_builder_set_by_offset(b, 0, p, 32)
#define         MolBuilder_GlobalState_build(b)                 mol_builder_finalize_simple(b)
#define         MolBuilder_GlobalState_clear(b)                 mol_builder_discard(b)
#define         MolBuilder_AddressEntry_init(b)                 mol_builder_initialize_fixed_size(b, 36)
#define         MolBuilder_AddressEntry_set_index(b, p)         mol_builder_set_by_offset(b, 0, p, 4)
#define         MolBuilder_AddressEntry_set_pubkey_hash(b, p)   mol_builder_set_by_offset(b, 4, p, 20)
#define         MolBuilder_AddressEntry_set_nonce(b, p)         mol_builder_set_by_offset(b, 24, p, 4)
#define         MolBuilder_AddressEntry_set_balance(b, p)       mol_builder_set_by_offset(b, 28, p, 8)
#define         MolBuilder_AddressEntry_build(b)                mol_builder_finalize_simple(b)
#define         MolBuilder_AddressEntry_clear(b)                mol_builder_discard(b)
#define         MolBuilder_Action_init(b)                       mol_union_builder_initialize(b, 128, 0, &MolDefault_Register, 100)
#define         MolBuilder_Action_set_Register(b, p, l)         mol_union_builder_set(b, 0, p, l)
#define         MolBuilder_Action_set_Deposit(b, p, l)          mol_union_builder_set(b, 1, p, l)
#define         MolBuilder_Action_build(b)                      mol_builder_finalize_simple(b)
#define         MolBuilder_Action_clear(b)                      mol_builder_discard(b)
#define         MolBuilder_Register_init(b)                     mol_table_builder_initialize(b, 512, 4)
#define         MolBuilder_Register_set_entry(b, p, l)          mol_table_builder_add(b, 0, p, l)
#define         MolBuilder_Register_set_last_entry_hash(b, p, l) mol_table_builder_add(b, 1, p, l)
#define         MolBuilder_Register_set_mmr_size(b, p, l)       mol_table_builder_add(b, 2, p, l)
#define         MolBuilder_Register_set_proof(b, p, l)          mol_table_builder_add(b, 3, p, l)
mol_seg_res_t   MolBuilder_Register_build                       (mol_builder_t);
#define         MolBuilder_Register_clear(b)                    mol_builder_discard(b)
#define         MolBuilder_Deposit_init(b)                      mol_builder_initialize_fixed_size(b, 36)
#define         MolBuilder_Deposit_set_entry(b, p)              mol_builder_set_by_offset(b, 0, p, 36)
#define         MolBuilder_Deposit_build(b)                     mol_builder_finalize_simple(b)
#define         MolBuilder_Deposit_clear(b)                     mol_builder_discard(b)

/*
 * Default Value
 */

#define ____ 0x00

const uint8_t MolDefault_Byte20[20]                              =  {
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____,
};
const uint8_t MolDefault_GlobalState[32]                         =  {
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____,
};
const uint8_t MolDefault_AddressEntry[36]                        =  {
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
};
const uint8_t MolDefault_Action[104]                             =  {
    ____, ____, ____, ____, 0x64, ____, ____, ____, 0x14, ____, ____, ____,
    0x38, ____, ____, ____, 0x58, ____, ____, ____, 0x60, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____,
};
const uint8_t MolDefault_Register[100]                           =  {
    0x64, ____, ____, ____, 0x14, ____, ____, ____, 0x38, ____, ____, ____,
    0x58, ____, ____, ____, 0x60, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____,
};
const uint8_t MolDefault_Deposit[36]                             =  {
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
};

#undef ____

/*
 * Reader Functions
 */

mol_errno MolReader_Action_verify (const mol_seg_t *input, bool compatible) {
    if (input->size < MOL_NUM_T_SIZE) {
        return MOL_ERR_HEADER;
    }
    mol_num_t item_id = mol_unpack_number(input->ptr);
    mol_seg_t inner;
    inner.ptr = input->ptr + MOL_NUM_T_SIZE;
    inner.size = input->size - MOL_NUM_T_SIZE;
    switch(item_id) {
        case 0:
            return MolReader_Register_verify(&inner, compatible);
        case 1:
            return MolReader_Deposit_verify(&inner, compatible);
        default:
            return MOL_ERR_UNKNOWN_ITEM;
    }
}
mol_errno MolReader_Register_verify (const mol_seg_t *input, bool compatible) {
    if (input->size < MOL_NUM_T_SIZE) {
        return MOL_ERR_HEADER;
    }
    uint8_t *ptr = input->ptr;
    mol_num_t total_size = mol_unpack_number(ptr);
    if (input->size != total_size) {
        return MOL_ERR_TOTAL_SIZE;
    }
    if (input->size < MOL_NUM_T_SIZE * 2) {
        return MOL_ERR_HEADER;
    }
    ptr += MOL_NUM_T_SIZE;
    mol_num_t offset = mol_unpack_number(ptr);
    if (offset % 4 > 0 || offset < MOL_NUM_T_SIZE*2) {
        return MOL_ERR_OFFSET;
    }
    mol_num_t field_count = offset / 4 - 1;
    if (field_count < 4) {
        return MOL_ERR_FIELD_COUNT;
    } else if (!compatible && field_count > 4) {
        return MOL_ERR_FIELD_COUNT;
    }
    if (input->size < MOL_NUM_T_SIZE*(field_count+1)){
        return MOL_ERR_HEADER;
    }
    mol_num_t offsets[field_count+1];
    offsets[0] = offset;
    for (mol_num_t i=1; i<field_count; i++) {
        ptr += MOL_NUM_T_SIZE;
        offsets[i] = mol_unpack_number(ptr);
        if (offsets[i-1] > offsets[i]) {
            return MOL_ERR_OFFSET;
        }
    }
    if (offsets[field_count-1] > total_size) {
        return MOL_ERR_OFFSET;
    }
    offsets[field_count] = total_size;
        mol_seg_t inner;
        mol_errno errno;
        inner.ptr = input->ptr + offsets[0];
        inner.size = offsets[1] - offsets[0];
        errno = MolReader_AddressEntry_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
        inner.ptr = input->ptr + offsets[1];
        inner.size = offsets[2] - offsets[1];
        errno = MolReader_Byte32_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
        inner.ptr = input->ptr + offsets[2];
        inner.size = offsets[3] - offsets[2];
        errno = MolReader_Uint64_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
        inner.ptr = input->ptr + offsets[3];
        inner.size = offsets[4] - offsets[3];
        errno = MolReader_Byte32Vec_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
    return MOL_OK;
}

/*
 * Builder Functions
 */

mol_seg_res_t MolBuilder_Register_build (mol_builder_t builder) {
    mol_seg_res_t res;
    res.errno = MOL_OK;
    mol_num_t offset = 20;
    mol_num_t len;
    res.seg.size = offset;
    len = builder.number_ptr[1];
    res.seg.size += len == 0 ? 36 : len;
    len = builder.number_ptr[3];
    res.seg.size += len == 0 ? 32 : len;
    len = builder.number_ptr[5];
    res.seg.size += len == 0 ? 8 : len;
    len = builder.number_ptr[7];
    res.seg.size += len == 0 ? 4 : len;
    res.seg.ptr = (uint8_t*)malloc(res.seg.size);
    uint8_t *dst = res.seg.ptr;
    mol_pack_number(dst, &res.seg.size);
    dst += MOL_NUM_T_SIZE;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[1];
    offset += len == 0 ? 36 : len;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[3];
    offset += len == 0 ? 32 : len;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[5];
    offset += len == 0 ? 8 : len;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[7];
    offset += len == 0 ? 4 : len;
    uint8_t *src = builder.data_ptr;
    len = builder.number_ptr[1];
    if (len == 0) {
        len = 36;
        memcpy(dst, &MolDefault_AddressEntry, len);
    } else {
        mol_num_t of = builder.number_ptr[0];
        memcpy(dst, src+of, len);
    }
    dst += len;
    len = builder.number_ptr[3];
    if (len == 0) {
        len = 32;
        memcpy(dst, &MolDefault_Byte32, len);
    } else {
        mol_num_t of = builder.number_ptr[2];
        memcpy(dst, src+of, len);
    }
    dst += len;
    len = builder.number_ptr[5];
    if (len == 0) {
        len = 8;
        memcpy(dst, &MolDefault_Uint64, len);
    } else {
        mol_num_t of = builder.number_ptr[4];
        memcpy(dst, src+of, len);
    }
    dst += len;
    len = builder.number_ptr[7];
    if (len == 0) {
        len = 4;
        memcpy(dst, &MolDefault_Byte32Vec, len);
    } else {
        mol_num_t of = builder.number_ptr[6];
        memcpy(dst, src+of, len);
    }
    dst += len;
    mol_builder_discard(builder);
    return res;
}
#ifdef __cplusplus
_CPP_END
#undef _CPP_BEGIN
#undef _CPP_END
#endif /* __cplusplus */

#endif /* GODWOKEN_H */
